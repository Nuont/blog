<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask</title>
      <link href="2021/08/07/flask/"/>
      <url>2021/08/07/flask/</url>
      
        <content type="html"><![CDATA[<h4 id="flask-和-sanic"><a href="#flask-和-sanic" class="headerlink" title="flask 和 sanic"></a>flask 和 sanic</h4><p>他们的写法基本一样，一个是轻量级web 框架 一个是异步框架</p><p><code>async</code>/<code>await</code> 语法，这使得您的代码有效的避免阻塞从而达到提升响应速度的目的</p><p><strong>必须</strong> 使用 <code>Response</code> 或继承自 <code>Response</code> 的类作为响应类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> <span class="token comment"># app 名称</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hellword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hello word'</span><span class="token keyword">from</span> sanic <span class="token keyword">import</span> Sanic<span class="token keyword">from</span> sanic<span class="token punctuation">.</span>response <span class="token keyword">import</span> textapp <span class="token operator">=</span> Sanic<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">helloword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string">'hello word'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flask 配置文件</p><pre class="line-numbers language-none"><code class="language-none">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：    {        'DEBUG':                                get_debug_flag(default=False),  是否开启Debug模式        'TESTING':                              False,                          是否开启测试模式        'PROPAGATE_EXCEPTIONS':                 None,                                  'PRESERVE_CONTEXT_ON_EXCEPTION':        None,        'SECRET_KEY':                           None,        'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),        'USE_X_SENDFILE':                       False,        'LOGGER_NAME':                          None,        'LOGGER_HANDLER_POLICY':               'always',        'SERVER_NAME':                          None,        'APPLICATION_ROOT':                     None,        'SESSION_COOKIE_NAME':                  'session',        'SESSION_COOKIE_DOMAIN':                None,        'SESSION_COOKIE_PATH':                  None,        'SESSION_COOKIE_HTTPONLY':              True,        'SESSION_COOKIE_SECURE':                False,        'SESSION_REFRESH_EACH_REQUEST':         True,        'MAX_CONTENT_LENGTH':                   None,        'SEND_FILE_MAX_AGE_DEFAULT':            timedelta(hours=12),        'TRAP_BAD_REQUEST_ERRORS':              False,        'TRAP_HTTP_EXCEPTIONS':                 False,        'EXPLAIN_TEMPLATE_LOADING':             False,        'PREFERRED_URL_SCHEME':                 'http',        'JSON_AS_ASCII':                        True,        'JSON_SORT_KEYS':                       True,        'JSONIFY_PRETTYPRINT_REGULAR':          True,        'JSONIFY_MIMETYPE':                     'application/json',        'TEMPLATES_AUTO_RELOAD':                None,    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">方式一：  ``app.config[``'DEBUG'``] ``=` `True  PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">方式二：  app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_pyfile<span class="token punctuation">(</span>``<span class="token string">"python文件名称"</span>``<span class="token punctuation">)</span>    如：      settings<span class="token punctuation">.</span>py        DEBUG <span class="token operator">=</span><span class="token boolean">True</span>        app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_pyfile<span class="token punctuation">(</span>``<span class="token string">"settings.py"</span>``<span class="token punctuation">)</span>        app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_envvar<span class="token punctuation">(</span>``<span class="token string">"环境变量名称"</span>``<span class="token punctuation">)</span>    环境变量的值为python文件名称名称，内部调用from_pyfile方法        app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_json<span class="token punctuation">(</span>json文件名称<span class="token punctuation">)</span>    JSON文件名称，必须是json格式，因为内部会执行json<span class="token punctuation">.</span>loads        app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_mapping<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    字典格式       app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span><span class="token string">"python类或类的路径"</span><span class="token punctuation">)</span>   app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span><span class="token string">'pro_flask.settings.TestingConfig'</span><span class="token punctuation">)</span>       settings<span class="token punctuation">.</span>py    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DEBUG <span class="token operator">=</span><span class="token boolean">False</span>      TESTING <span class="token operator">=</span><span class="token boolean">False</span>      DATABASE_URI <span class="token operator">=</span>'sqlite<span class="token punctuation">:</span><span class="token operator">//</span><span class="token punctuation">:</span>memory<span class="token punctuation">:</span>‘         <span class="token keyword">class</span> <span class="token class-name">ProductionConfig</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 生产环境</span>    DATABASE_URI <span class="token operator">=</span>'mysql<span class="token punctuation">:</span><span class="token operator">//</span>user@localhost<span class="token operator">/</span>foo        <span class="token keyword">class</span> <span class="token class-name">DevelopmentConfig</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 开发环境</span>        DEBUG<span class="token operator">=</span><span class="token boolean">True</span>            <span class="token keyword">class</span> <span class="token class-name">TestingConfig</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 测试环境</span>        TESTING <span class="token operator">=</span><span class="token boolean">True</span>            PS<span class="token punctuation">:</span> 从sys<span class="token punctuation">.</span>path中已经存在路径开始写    PS<span class="token punctuation">:</span> settings<span class="token punctuation">.</span>py文件默认路径要放在程序root_path目录，如果instance_relative_config为``<span class="token boolean">True</span>``，则就是instance_path目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> flask 路由</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;username&gt;'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post/&lt;int:post_id&gt;'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post/&lt;float:post_id&gt;'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post/&lt;path:path&gt;'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>常用路由系统有以上五种，所有的路由系统都是基于一下对应关系来处理：  DEFAULT_CONVERTERS <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'default'</span><span class="token punctuation">:</span>          UnicodeConverter<span class="token punctuation">,</span>      <span class="token string">'string'</span><span class="token punctuation">:</span>           UnicodeConverter<span class="token punctuation">,</span>      <span class="token string">'any'</span><span class="token punctuation">:</span>              AnyConverter<span class="token punctuation">,</span>      <span class="token string">'path'</span><span class="token punctuation">:</span>             PathConverter<span class="token punctuation">,</span>      <span class="token string">'int'</span><span class="token punctuation">:</span>              IntegerConverter<span class="token punctuation">,</span>      <span class="token string">'float'</span><span class="token punctuation">:</span>            FloatConverter<span class="token punctuation">,</span>      <span class="token string">'uuid'</span><span class="token punctuation">:</span>             UUIDConverter<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a.注册路由原理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before'</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result    <span class="token keyword">return</span> inner    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index.html'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@auth</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Index'</span>    或        <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Index"</span>    self<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">'/index.html'</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token string">"index"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>index<span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">or</span>    app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">'/index.html'</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token string">"index"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>index<span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>view_functions<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index    或    <span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before'</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result    <span class="token keyword">return</span> inner    <span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>        methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span>        decorators <span class="token operator">=</span> <span class="token punctuation">[</span>auth<span class="token punctuation">,</span> <span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">'Index!'</span>    app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># name=endpoint</span>    或    <span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>        methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span>        decorators <span class="token operator">=</span> <span class="token punctuation">[</span>auth<span class="token punctuation">,</span> <span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Index.GET'</span>        <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Index.POST'</span>    app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># name=endpoint</span>    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span>和app<span class="token punctuation">.</span>add_url_rule参数：        rule<span class="token punctuation">,</span>                       URL规则        view_func<span class="token punctuation">,</span>                  视图函数名称        defaults<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              默认值<span class="token punctuation">,</span>当URL中无参数，函数需要参数时，使用defaults<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'k'</span><span class="token punctuation">:</span><span class="token string">'v'</span><span class="token punctuation">}</span>为函数提供参数        endpoint<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              名称，用于反向生成URL，即： url_for<span class="token punctuation">(</span><span class="token string">'名称'</span><span class="token punctuation">)</span>        methods<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               允许的请求方式，如：<span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">]</span>                strict_slashes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        对URL最后的 <span class="token operator">/</span> 符号是否严格要求，                                    如：                                        <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span>strict_slashes<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>，                                            访问 http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token operator">/</span>index<span class="token operator">/</span> 或 http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token operator">/</span>index均可                                        <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span>strict_slashes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                                            仅访问 http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token operator">/</span>index         redirect_to<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>           重定向到指定地址                                    如：                                        <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index/&lt;int:nid&gt;'</span><span class="token punctuation">,</span> redirect_to<span class="token operator">=</span><span class="token string">'/home/&lt;nid&gt;'</span><span class="token punctuation">)</span>                                        或                                        <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> nid<span class="token punctuation">)</span><span class="token punctuation">:</span>                                            <span class="token keyword">return</span> <span class="token string">"/home/888"</span>                                        <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index/&lt;int:nid&gt;'</span><span class="token punctuation">,</span> redirect_to<span class="token operator">=</span>func<span class="token punctuation">)</span>        subdomain<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>             子域名访问                                            <span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> views<span class="token punctuation">,</span> url_for                                            app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>import_name<span class="token operator">=</span>__name__<span class="token punctuation">)</span>                                            app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SERVER_NAME'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'wupeiqi.com:5000'</span>                                            <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> subdomain<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                                            <span class="token keyword">def</span> <span class="token function">static_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                <span class="token triple-quoted-string string">"""Flask supports static subdomains                                                This is available at static.your-domain.tld"""</span>                                                <span class="token keyword">return</span> <span class="token string">"static.your-domain.tld"</span>                                            <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/dynamic"</span><span class="token punctuation">,</span> subdomain<span class="token operator">=</span><span class="token string">"&lt;username&gt;"</span><span class="token punctuation">)</span>                                            <span class="token keyword">def</span> <span class="token function">username_index</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>                                                <span class="token triple-quoted-string string">"""Dynamic subdomains are also supported                                                Try going to user1.your-domain.tld/dynamic"""</span>                                                <span class="token keyword">return</span> username <span class="token operator">+</span> <span class="token string">".your-domain.tld"</span>                                            <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>                                                app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b. 自定制正则路由匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> views<span class="token punctuation">,</span> url_for            <span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>routing <span class="token keyword">import</span> BaseConverter            app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>import_name<span class="token operator">=</span>__name__<span class="token punctuation">)</span>            <span class="token keyword">class</span> <span class="token class-name">RegexConverter</span><span class="token punctuation">(</span>BaseConverter<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token triple-quoted-string string">"""                自定义URL匹配正则表达式                """</span>                <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">,</span> regex<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token builtin">super</span><span class="token punctuation">(</span>RegexConverter<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>regex <span class="token operator">=</span> regex                <span class="token keyword">def</span> <span class="token function">to_python</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token triple-quoted-string string">"""                    路由匹配时，匹配成功后传递给视图函数中参数的值                    :param value:                     :return:                     """</span>                    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">to_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token triple-quoted-string string">"""                    使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数                    :param value:                     :return:                     """</span>                    val <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>RegexConverter<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>to_url<span class="token punctuation">(</span>value<span class="token punctuation">)</span>                    <span class="token keyword">return</span> val            <span class="token comment"># 添加到flask中</span>            app<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>converters<span class="token punctuation">[</span><span class="token string">'regex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> RegexConverter            <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index/&lt;regex("\d+"):nid&gt;'</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>nid<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> nid<span class="token operator">=</span><span class="token string">'888'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token string">'Index'</span>            <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>                app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>1、模板的使用</p><p>Flask使用的是Jinja2模板，所以其语法和Django无差别</p><p>2、自定义模板方法</p><p>Flask中自定义模板方法的方式和Bottle相似，创建一个函数并通过参数的形式传入render_template，如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>自定义函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    {{ww()|safe}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">wupeiqi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'&lt;h1&gt;Wupeiqi&lt;/h1&gt;'</span> <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> ww<span class="token operator">=</span>wupeiqi<span class="token punctuation">)</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    {% macro input(name, type='text', value='') %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ type }}<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ name }}<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ value }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {% endmacro %}    {{ input('n1') }}    {% include 'tp.html' %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>asdf{{ v.k1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask    <span class="token keyword">from</span> flask <span class="token keyword">import</span> request    <span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template    <span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect    <span class="token keyword">from</span> flask <span class="token keyword">import</span> make_response    app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login.html'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 请求相关信息</span>        <span class="token comment"># request.method</span>        <span class="token comment"># request.args</span>        <span class="token comment"># request.form</span>        <span class="token comment"># request.values</span>        <span class="token comment"># request.cookies</span>        <span class="token comment"># request.headers</span>        <span class="token comment"># request.path</span>        <span class="token comment"># request.full_path</span>        <span class="token comment"># request.script_root</span>        <span class="token comment"># request.url</span>        <span class="token comment"># request.base_url</span>        <span class="token comment"># request.url_root</span>        <span class="token comment"># request.host_url</span>        <span class="token comment"># request.host</span>        <span class="token comment"># request.files</span>        <span class="token comment"># obj = request.files['the_file_name']</span>        <span class="token comment"># obj.save('/var/www/uploads/' + secure_filename(f.filename))</span>        <span class="token comment"># 响应相关信息</span>        <span class="token comment"># return "字符串"</span>        <span class="token comment"># return render_template('html模板路径',**{})</span>        <span class="token comment"># return redirect('/index.html')</span>        <span class="token comment"># response = make_response(render_template('index.html'))</span>        <span class="token comment"># response是flask.wrappers.Response类型</span>        <span class="token comment"># response.delete_cookie('key')</span>        <span class="token comment"># response.set_cookie('key', 'value')</span>        <span class="token comment"># response.headers['X-Something'] = 'A value'</span>        <span class="token comment"># return response</span>        <span class="token keyword">return</span> <span class="token string">"内容"</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。</p><ul><li>设置：session[‘username’] ＝ ‘xxx’</li><li>删除：session.pop(‘username’, None)</li></ul><p>基本使用</p><pre class="line-numbers language-none"><code class="language-none">from flask import Flask, session, redirect, url_for, escape, request app = Flask(__name__) @app.route('/')def index():    if 'username' in session:        return 'Logged in as %s' % escape(session['username'])    return 'You are not logged in' @app.route('/login', methods=['GET', 'POST'])def login():    if request.method == 'POST':        session['username'] = request.form['username']        return redirect(url_for('index'))    return '''        &lt;form action="" method="post"&gt;            &lt;p&gt;&lt;input type=text name=username&gt;            &lt;p&gt;&lt;input type=submit value=Login&gt;        &lt;/form&gt;    ''' @app.route('/logout')def logout():    # remove the username from the session if it's there    session.pop('username', None)    return redirect(url_for('index')) # set the secret key.  keep this really secret:app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义Session</p><pre class="line-numbers language-none"><code class="language-none">pip3 install Flask-Session                run.py            from flask import Flask            from flask import session            from pro_flask.utils.session import MySessionInterface            app = Flask(__name__)            app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'            app.session_interface = MySessionInterface()            @app.route('/login.html', methods=['GET', "POST"])            def login():                print(session)                session['user1'] = 'alex'                session['user2'] = 'alex'                del session['user2']                return "内容"            if __name__ == '__main__':                app.run()        session.py            #!/usr/bin/env python            # -*- coding:utf-8 -*-            import uuid            import json            from flask.sessions import SessionInterface            from flask.sessions import SessionMixin            from itsdangerous import Signer, BadSignature, want_bytes            class MySession(dict, SessionMixin):                def __init__(self, initial=None, sid=None):                    self.sid = sid                    self.initial = initial                    super(MySession, self).__init__(initial or ())                def __setitem__(self, key, value):                    super(MySession, self).__setitem__(key, value)                def __getitem__(self, item):                    return super(MySession, self).__getitem__(item)                def __delitem__(self, key):                    super(MySession, self).__delitem__(key)            class MySessionInterface(SessionInterface):                session_class = MySession                container = {}                def __init__(self):                    import redis                    self.redis = redis.Redis()                def _generate_sid(self):                    return str(uuid.uuid4())                def _get_signer(self, app):                    if not app.secret_key:                        return None                    return Signer(app.secret_key, salt='flask-session',                                  key_derivation='hmac')                def open_session(self, app, request):                    """                    程序刚启动时执行，需要返回一个session对象                    """                    sid = request.cookies.get(app.session_cookie_name)                    if not sid:                        sid = self._generate_sid()                        return self.session_class(sid=sid)                    signer = self._get_signer(app)                    try:                        sid_as_bytes = signer.unsign(sid)                        sid = sid_as_bytes.decode()                    except BadSignature:                        sid = self._generate_sid()                        return self.session_class(sid=sid)                    # session保存在redis中                    # val = self.redis.get(sid)                    # session保存在内存中                    val = self.container.get(sid)                    if val is not None:                        try:                            data = json.loads(val)                            return self.session_class(data, sid=sid)                        except:                            return self.session_class(sid=sid)                    return self.session_class(sid=sid)                def save_session(self, app, session, response):                    """                    程序结束前执行，可以保存session中所有的值                    如：                        保存到resit                        写入到用户cookie                    """                    domain = self.get_cookie_domain(app)                    path = self.get_cookie_path(app)                    httponly = self.get_cookie_httponly(app)                    secure = self.get_cookie_secure(app)                    expires = self.get_expiration_time(app, session)                    val = json.dumps(dict(session))                    # session保存在redis中                    # self.redis.setex(name=session.sid, value=val, time=app.permanent_session_lifetime)                    # session保存在内存中                    self.container.setdefault(session.sid, val)                    session_id = self._get_signer(app).sign(want_bytes(session.sid))                    response.set_cookie(app.session_cookie_name, session_id,                                        expires=expires, httponly=httponly,                                        domain=domain, path=path, secure=secure)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三方session</p><pre class="line-numbers language-none"><code class="language-none">#!/usr/bin/env python# -*- coding:utf-8 -*-"""pip3 install redispip3 install flask-session"""from flask import Flask, session, redirectfrom flask.ext.session import Sessionapp = Flask(__name__)app.debug = Trueapp.secret_key = 'asdfasdfasd'app.config['SESSION_TYPE'] = 'redis'from redis import Redisapp.config['SESSION_REDIS'] = Redis(host='192.168.0.94',port='6379')Session(app)@app.route('/login')def login():    session['username'] = 'alex'    return redirect('/index')@app.route('/index')def index():    name = session['username']    return nameif __name__ == '__main__':    app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><ul><li>蓝图URL前缀：xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’)</li><li>蓝图子域名：xxx = Blueprint(‘account’, <strong>name</strong>,subdomain=’admin’)<br># 前提需要给配置SERVER_NAME： app.config[‘SERVER_NAME’] = ‘wupeiqi.com:5000’<br># 访问时：admin.wupeiqi.com:5000/login.html</li></ul><pre class="line-numbers language-none"><code class="language-none"># demo/blueprints/home.pyfrom flask import Blueprinthome = Blueprint("home", __name__, url_prefix="/home")@home.route('/')def index():    return "This is home index page."app.pyfrom flask import Flaskfrom demo.blueprints.home import homeapp = Flask(__name__)# 注册蓝图app.register_blueprint(home)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="message"><a href="#message" class="headerlink" title="message"></a>message</h3><p>message是一个基于Session实现的用于保存数据的集合，其特点是：使用一次就删除</p><pre class="line-numbers language-none"><code class="language-none">from flask import Flask, flash, redirect, render_template, request, get_flashed_messages        app = Flask(__name__)        app.secret_key = 'some_secret'        @app.route('/')        def index1():            messages = get_flashed_messages()            print(messages)            return "Index1"        @app.route('/set')        def index2():            v = request.args.get('p')            flash(v)            return 'ok'        if __name__ == "__main__":            app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><pre class="line-numbers language-none"><code class="language-none">from flask import Flask, flash, redirect, render_template, request app = Flask(__name__)app.secret_key = 'some_secret' @app.route('/')def index1():    return render_template('index.html') @app.route('/set')def index2():    v = request.args.get('p')    flash(v)    return 'ok' class MiddleWare:    def __init__(self,wsgi_app):        self.wsgi_app = wsgi_app     def __call__(self, *args, **kwargs):         return self.wsgi_app(*args, **kwargs) if __name__ == "__main__":    app.wsgi_app = MiddleWare(app.wsgi_app)    app.run(port=9999)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求扩展"><a href="#请求扩展" class="headerlink" title="请求扩展"></a>请求扩展</h3><pre class="line-numbers language-none"><code class="language-none">#!/usr/bin/env python# -*- coding:utf-8 -*-from flask import Flask, Request, render_templateapp = Flask(__name__, template_folder='templates')app.debug = True@app.before_first_requestdef before_first_request1():    print('before_first_request1')@app.before_first_requestdef before_first_request2():    print('before_first_request2')@app.before_requestdef before_request1():    Request.nnn = 123    print('before_request1')@app.before_requestdef before_request2():    print('before_request2')@app.after_requestdef after_request1(response):    print('before_request1', response)    return response@app.after_requestdef after_request2(response):    print('before_request2', response)    return response@app.errorhandler(404)def page_not_found(error):    return 'This page does not exist', 404@app.template_global()def sb(a1, a2):    return a1 + a2@app.template_filter()def db(a1, a2, a3):    return a1 + a2 + a3@app.route('/')def hello_world():    return render_template('hello.html')if __name__ == '__main__':    app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch集群部署</title>
      <link href="2021/06/17/elasticsearch-ji-qun-bu-shu/"/>
      <url>2021/06/17/elasticsearch-ji-qun-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、集群部署"><a href="#一、集群部署" class="headerlink" title="一、集群部署"></a>一、集群部署</h2><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ElasticSearch 的主旨是随时可用和按需扩容。 而扩容可以通过购买性能更强大(垂直扩容,或 纵向扩容) 或者数量更多的服务器(水平扩容,或 横向扩容 )来实现。</p><hr><h2 id="1-节点类型"><a href="#1-节点类型" class="headerlink" title="1.节点类型"></a>1.节点类型</h2><ul><li>不同角色的节点：Master eligible / Data / Ingest / Coordinating / Machine Learning</li><li>在开发环境中，一个节点可承担多种角色</li><li>在生产环境中<ul><li>根据数据量，写入和查询的吞吐量，选择适合的部署方式</li><li>建议设置单一角色的节点（dedicated node）</li></ul></li></ul><h2 id="2-节点参数配置"><a href="#2-节点参数配置" class="headerlink" title="2.节点参数配置"></a>2.节点参数配置</h2><ul><li>一个节点在默认情况下会同时扮演： master eligible ，data node 和 ingest node</li></ul><table><thead><tr><th>节点类型</th><th>配置参数</th><th>默认值</th></tr></thead><tbody><tr><td>master eligible</td><td>node.master</td><td>true</td></tr><tr><td>data</td><td>node.data</td><td>true</td></tr><tr><td>ingest</td><td>node.ingest</td><td>true</td></tr><tr><td>coodrinating only</td><td>无</td><td>设置上面三个参数全部为 false</td></tr><tr><td>machine learning</td><td>node.ml</td><td>true (需要 enable x-pack)</td></tr></tbody></table><h2 id="3-单一角色：职责分离的好处"><a href="#3-单一角色：职责分离的好处" class="headerlink" title="3.单一角色：职责分离的好处"></a>3.单一角色：职责分离的好处</h2><ul><li>Dedicated master eligible nodes：负责集群状态（cluster state）的管理<ul><li>使用低配置的 CPU ,RAM 和磁盘</li></ul></li><li>Dedicated data nodes: 负责数据存储及处理客户端请求<ul><li>使用高配置的 CPU,RAM 和磁盘</li></ul></li><li>Dedicated ingest nodes: 负责数据处理<ul><li>使用高配置的 CPU ; 中等配置的 RAM; 低配置的磁盘</li></ul></li></ul><h2 id="4-Dedicate-Master-Node"><a href="#4-Dedicate-Master-Node" class="headerlink" title="4.Dedicate Master Node"></a>4.Dedicate Master Node</h2><ul><li>从高可用 &amp; 避免脑裂的角色出发<ul><li>一般在生产环境中配置 3 台</li><li>一个集群只有 1 台活跃的主节点<ul><li>负载分片管理，索引创建，集群管理等操作</li></ul></li></ul></li><li>如果和数据节点或者 Coordinate 节点混合部署<ul><li>数据节点相对有比较大的内存占用</li><li>Coordinate 节点有时候可能会有开销很高的查询，导致 OOM</li><li>这些都有可能影响 Master 节点，导致集群的不稳定</li></ul></li></ul><h2 id="5-Anthentication-身份认证"><a href="#5-Anthentication-身份认证" class="headerlink" title="5.Anthentication 身份认证"></a>5.Anthentication 身份认证</h2><ul><li><p>Realms : X-Pack 中的认证服务</p><ul><li>内置 Realms （免费）<ul><li>File / Native (用户名密码保存在 Elasticsearch)</li></ul></li><li>外部 Realms （收费）<ul><li>LDAP / Active Directory / PKI / SAML / Kerberos</li></ul></li></ul></li><li><p><strong>Docker中 ES集群添加X-Pack（密码验证） docker 集群配置账号密码遇到了各种奇葩的问题，经过各种踩坑最终实现效果了，流程如下</strong>:</p><ul><li><p>1.这里有一个大坑，在集群配置账号密码时，需要先在master节点中生成ca文件，并且将elastic-certificates.p12文件拷贝到所有的数据节点config目录下，并且确保.P12文件有访问权限。 (chmod 777 elastic-certificates.p12)</p></li><li><p>2.并且需要修改所有节点的.yml文件配置,配置如下</p></li><li><p>3.启动所有节点，访问时 看看是否是需要账号登录</p></li><li><p>4.当出现需要账号密码时，再通过master节点去生成账号和密码， elasticsearch-setup-passwords interactive 或者 elasticsearch-setup-passwords auto</p></li><li><p>如果执行中途失败，找到问题原因后，可以通过kibana删除.security-7 索引，再重复执行上面命令</p><pre class="line-numbers language-none"><code class="language-none"># 集群名称cluster.name: "fyt-es"# 节点名称，确保每个节点名称唯一node.name: node-3node.master: falsenode.data: truenetwork.publish_host: 192.168.0.190network.host: 0.0.0.0http.port: 9200transport.tcp.port: 9300# 所有集群的IPdiscovery.seed_hosts: ["192.168.0.187", "192.168.0.188", "192.168.0.189", "192.168.0.190"]# 默认主节点cluster.initial_master_nodes: node-master-1http.cors.enabled: true# 开启账号密码验证xpack.security.enabled: truexpack.license.self_generated.type: basicxpack.security.transport.ssl.enabled: truexpack.security.transport.ssl.verification_mode: certificate#1. .p12的路径需要设置成绝对路径#2. 要确保.p12的文件有权限， chmod 777 elastic-certificates.p12xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>配置 Kibana</p></li></ul><pre class="line-numbers language-none"><code class="language-none">#修改 kibana.yml，使用上面设置好的kibana账户elasticsearch.username: "kibana"elasticsearch.password: "pwd"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="集群部署常见问题"><a href="#集群部署常见问题" class="headerlink" title="集群部署常见问题"></a>集群部署常见问题</h2><ul><li>Docker安装 elasticsearch 报错:max virtual memory areas vm.max_map_count [65530] is too low</li></ul><pre class="line-numbers language-none"><code class="language-none">使用下面命令解决：vim /etc/sysctl.conf添加 一行 vm.max_map_count=655360加载参数sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、分片设定及管理"><a href="#二、分片设定及管理" class="headerlink" title="二、分片设定及管理"></a>二、分片设定及管理</h2><h1 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h1><p>集群中分片的设置及管理注意要点</p><hr><h2 id="1-如何设计分片数"><a href="#1-如何设计分片数" class="headerlink" title="1.如何设计分片数"></a>1.如何设计分片数</h2><ul><li>当分片数 &gt; 节点数时<ul><li>一旦集群中有新的数据节点加入，分片就可以自动进行分配</li><li>分片在重新分配时，系统不会有 downtime</li></ul></li><li>多分片的好处：一个索引如果分布在不同的节点，多个节点可以并行执行<ul><li>查询可以并行执行</li><li>数据写入可以分散到多个机器</li></ul></li></ul><h2 id="2-分片过多所带来的副作用"><a href="#2-分片过多所带来的副作用" class="headerlink" title="2.分片过多所带来的副作用"></a>2.分片过多所带来的副作用</h2><ul><li>Shard 是 Elasticsearch 实现集群水平扩展的最小单位</li><li>过多设置分片数会带来一些潜在的问题<ul><li>每个分片是一个 Lucene 的 索引，会使用机器的资源。过多的分片会导致额外的性能开销<ul><li>Lucene Indices / File descriptors / RAM / CPU</li><li>每次搜索的请求，需要从每个分片上获取数据</li><li>分片的 Meta 信息由 Master 节点维护。过多，会增加管理的负担。经验值，控制分片总数在 10 W 以内</li></ul></li></ul></li></ul><h2 id="3-如何确定主分片数"><a href="#3-如何确定主分片数" class="headerlink" title="3.如何确定主分片数"></a>3.如何确定主分片数</h2><ul><li>从存储的物理角度看<ul><li>日志类应用，单个分片不要大于 50 GB</li><li>搜索类应用，单个分片不要超过 20 GB</li></ul></li><li>为什么要控制分片存储大小<ul><li>提高 Update 的性能</li><li>Merge 时，减少所需的资源</li><li>丢失节点后，具备更快的恢复速度 / 便于分片在集群内 Rebalancing</li></ul></li></ul><h2 id="4-如何确定副本分片数"><a href="#4-如何确定副本分片数" class="headerlink" title="4.如何确定副本分片数"></a>4.如何确定副本分片数</h2><ul><li>副本是主分片的拷贝<ul><li>提高系统可用性：相应查询请求，防止数据丢失</li><li>需要占用和主分片一样的资源</li></ul></li><li>对性能的影响<ul><li>副本会降低数据的索引速度：有几份副本就会有几倍的 CPU 资源消耗在索引上</li><li>会减缓对主分片的查询压力，但是会消耗同样的内存资源</li><li>如果机器资源充分，提高副本数，可以提高整体的查询 QPS</li></ul></li></ul><h2 id="5-调整分片总数设定，避免分配不均衡"><a href="#5-调整分片总数设定，避免分配不均衡" class="headerlink" title="5.调整分片总数设定，避免分配不均衡"></a>5.调整分片总数设定，避免分配不均衡</h2><ul><li>ES 的分片策略会尽量保证节点上的分片数大 致相同<ul><li>扩容的新节点没有数据，导致新索引集中在新 的节点</li><li>热点数据过于集中，可能会产生新能问题</li></ul></li></ul><h2 id="三、集群容量规划"><a href="#三、集群容量规划" class="headerlink" title="三、集群容量规划"></a>三、集群容量规划</h2><h1 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h1><p>ES 是在系统架构设计时常用到的数据搜索与存储系统，对于输入的数据，ES会按照预先定义好的设置（如果没有预先设置好，可以设置动态映射）进行分词，建立倒排索引和Doc_values，以方便搜索查询。ES本身具备对索引进行分片和备份的功能，使用者可以在索引建立时进行设置。ES 底层使用了Luence对数据进行管理，对宿主机的内存和磁盘IO有较高的要求，这使得每个ES的节点成本会比较高，因此在规划阶段需要对要使用的ES节点数目进行评估，以了解后续的成本状况。</p><hr><h2 id="容量规划"><a href="#容量规划" class="headerlink" title="容量规划"></a>容量规划</h2><ul><li>一个集群总共需要多少个节点？ 一个索引需要设置几个分片？<ul><li>规划上需要保持一定的余量，当负载出现波动，节点出现丢失时，还能正常运行</li></ul></li><li>做容量规划时，一些需要考虑的因素</li><li>机器的软硬件配置</li><li>单条文档的尺寸 / 文档的总数据量 / 索引的总数据量（Time base 数据保留的时间）/ 副本分片数</li><li>文档是如何写入的（Bulk 的尺寸）</li><li>文档的复杂度，文档是如何进行读取的（怎么样的查询和聚合）</li></ul><h2 id="常见用例"><a href="#常见用例" class="headerlink" title="常见用例"></a>常见用例</h2><ul><li>搜索：固定大小的数据集<ul><li>搜索的数据集增长相对比较缓慢</li></ul></li><li>日志：基于时间序列的数据<ul><li>使用 ES 存放日志与性能指标。数据每天不断写入，增长速度较快</li><li>结合 Warm Node 做数据的老化处理</li></ul></li></ul><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><ul><li>选择合理的硬件，数据节点尽可能使用 SSD</li><li>搜索等性能要求高的场景，建议 SSD<ul><li>按照 1 ：10 的比例配置内存和硬盘</li></ul></li><li>日志类和查询并发低的场景，可以考虑使用机械硬盘存储<ul><li>按照 1：50 的比例配置内存和硬盘</li></ul></li><li>单节点数据建议控制在 2 TB 以内，最大不建议超过 5 TB</li><li>JVM 配置机器内存的一半，JVM 内存配置不建议超过 32 G</li></ul><h2 id="创建基于时间序列的索引"><a href="#创建基于时间序列的索引" class="headerlink" title="创建基于时间序列的索引"></a>创建基于时间序列的索引</h2><ul><li>创建 time-based 索引<ul><li>在索引的名字中增加时间信息</li><li>按照 每天 / 每周 / 每月 的方式进行划分</li></ul></li><li>带来的好处<ul><li>更加合理的组织索引，例如随着时间推移，便于对索引做的老化处理<ul><li>利用 Hot &amp; Warm Architecture</li><li>备份和删除以及删除的效率高。（ Delete By Query 执行速度慢，底层不也不会立刻释放空间，而 Merge 时又很消 耗资源）</li></ul></li></ul></li></ul><h2 id="写入时间序列的数据-–-基于-Index-Alias"><a href="#写入时间序列的数据-–-基于-Index-Alias" class="headerlink" title="写入时间序列的数据 – 基于 Index Alias"></a>写入时间序列的数据 – 基于 Index Alias</h2><ul><li>Time-based 索引<ul><li>创建索引，每天 / 每周 / 每月</li><li>在索引的名字中增加时间信息</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">POST _aliases{  "actions": [    {      "add": {        "index": "logs_2019-06-27",        "alias": "logs_write"      }    },    {      "remove": {        "index": "logs_2019-06-26",        "alias": "logs_write"      }    }  ]}# POST /&lt;logs-{now/d}/_searchPOST /%3Clogs-%7Bnow%2Fd%7D%3E/_search# POST /&lt;logs-{now/w}/_searchPOST /%3Clogs-%7Bnow%2Fw%7D%3E/_search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h2><ul><li>增加 Coordinating / Ingest Node<ul><li>解决 CPU 和 内存开销的问题</li></ul></li><li>增加数据节点<ul><li>解决存储的容量的问题</li><li>为避免分片分布不均的问题，要提前监控磁盘空间，提前清理数据或增加节点（70%）</li></ul></li></ul><h2 id="四、集群健康与问题排查"><a href="#四、集群健康与问题排查" class="headerlink" title="四、集群健康与问题排查"></a>四、集群健康与问题排查</h2><h1 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h1><p>ES集群日常的运维问题处理</p><hr><h2 id="Health-相关的-API"><a href="#Health-相关的-API" class="headerlink" title="Health 相关的 API"></a>Health 相关的 API</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET _cluster/health</td><td>集群的状态（检查 节点数量）</td></tr><tr><td>GET _cluster/health?level=indices</td><td>所有索引的健康状态 （查看有问题的索引</td></tr><tr><td>GET _cluster/health/my_index</td><td>单个索引的健康状态（查看具体的索引）</td></tr><tr><td>GET _cluster/health?level=shards</td><td>分片级的索引</td></tr><tr><td>GET _cluster/allocation/explain</td><td>返回第一个未分配 Shard 的原因</td></tr></tbody></table><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h3><ul><li>症状：集群变红</li><li>分析：通过 Allocation Explain API 发现 创建索引失败，因为无法找到标记了相应 box type 的节点</li><li>解决：删除索引，集群变绿。重新创建索引，并且指定正确的 routing box type，索引创建成 功。集群保持绿色状态</li></ul><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h3><ul><li>症状：集群变黄</li><li>分析：通过 Allocation Explain API 发现无法在相同的节点上创建副本</li><li>解决：将索引的副本数设置为 0，或者通过增加节点解决</li></ul><pre class="line-numbers language-none"><code class="language-none">#案例1DELETE mytestPUT mytest{  "settings":{    "number_of_shards":3,    "number_of_replicas":0,    "index.routing.allocation.require.box_type":"hott"  }}# 检查集群状态，查看是否有节点丢失，有多少分片无法分配GET /_cluster/health/# 查看索引级别,找到红色的索引GET /_cluster/health?level=indices#查看索引的分片GET _cluster/health?level=shards# Explain 变红的原因GET /_cluster/allocation/explainGET /_cat/shards/mytestGET _cat/nodeattrsDELETE mytestGET /_cluster/health/PUT mytest{  "settings":{    "number_of_shards":3,    "number_of_replicas":0,    "index.routing.allocation.require.box_type":"hot"  }}GET /_cluster/health/#案例2, Explain 看 hot 上的 explainDELETE mytestPUT mytest{  "settings":{    "number_of_shards":2,    "number_of_replicas":1,    "index.routing.allocation.require.box_type":"hot"  }}GET _cluster/healthGET _cat/shards/mytestGET /_cluster/allocation/explainPUT mytest/_settings{    "number_of_replicas": 0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分片没有被分配的一些原因"><a href="#分片没有被分配的一些原因" class="headerlink" title="分片没有被分配的一些原因"></a>分片没有被分配的一些原因</h2><ul><li>INDEX_CREATE: 创建索引导致。在索引的全部分片分配完成之前，会有短暂的 Red，不一定代表有问题</li><li>CLUSTER_RECOVER：集群重启阶段，会有这个问题</li><li>INDEX_REOPEN：Open 一个之前 Close 的索引</li><li>DANGLING_INDEX_IMPORTED：一个节点离开集群期间，有索引被删除。这个节点重新返回时，会导致 Dangling 的问题</li></ul><h2 id="五、提升集群的读、写性能"><a href="#五、提升集群的读、写性能" class="headerlink" title="五、提升集群的读、写性能"></a>五、提升集群的读、写性能</h2><h1 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h1><p>在日常的使用中，对于集群的细节点掌握程度，很大程度的会影响集群的性能，特别是在数据量庞大的时候。下面总结几点：</p><hr><h1 id="一、提高写入性能的方法"><a href="#一、提高写入性能的方法" class="headerlink" title="一、提高写入性能的方法"></a>一、提高写入性能的方法</h1><ul><li>写性能优化的目标：增大写吞吐量（Events Per Second），越高越好</li><li>客户端：多线程，批量写<ul><li>可以通过性能测试，确定最佳文档数量</li><li>多线程：需要观察是否有 HTTP 429 返回，实现 Retry 以及线程数量的自动调节</li></ul></li><li>服务器端：单个性能问题，往往是多个因素造成的。需要先分解问题，在单个节点上进行调整并 且结合测试，尽可能压榨硬件资源，以达到最高吞吐量<ul><li>使用更好的硬件。观察 CPU / IO Block</li><li>线程切换 / 堆栈状况</li></ul></li></ul><h2 id="1-关闭无关的功能"><a href="#1-关闭无关的功能" class="headerlink" title="1.关闭无关的功能"></a>1.关闭无关的功能</h2><ul><li>只需要聚合不需要搜索， Index 设置成 false</li><li>不需要算分， Norms 设置成 false</li><li>不要对字符串使用默认的 dynamic mapping。字段 数量过多，会对性能产生比较大的影响</li><li>Index_options 控制在创建倒排索引时，哪些内容 会被添加到倒排索引中。优化这些设置，一定程度 可以节约 CPU</li><li>关闭 _source，减少 IO 操作；（适合指标型数据）</li></ul><pre class="line-numbers language-none"><code class="language-none">什么情况下不用保留 _source字段？比如如果某个字段内容非常多，我们的业务场景只需要能对该字段进行搜索，可以考虑关闭 _source字段，我们搜索到文档id后，再通过文档id去数据库拿到这个字段的内容。这样可以节省很多空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-数据写入的过程"><a href="#2-数据写入的过程" class="headerlink" title="2.数据写入的过程"></a>2.数据写入的过程</h2><ul><li>Refresh<ul><li>将文档先保存在 Index buffer 中， 以 refresh_interval 为间隔时间，定期清空 buffer，生成 segment，借助文件系统缓存的特性，先将 segment 放在文件系统缓存中，并开放查询，以提升搜索的实时性</li></ul></li><li>Translog<ul><li>Segment 没有写入磁盘，即便发生了当机，重启后，数据也能恢复，默认配置是每次请求都会落盘</li></ul></li><li>Flush<ul><li>删除旧的 translog 文件</li><li>生成 Segment 并写入磁盘 / 更新 commit point 并写入磁盘。 ES 自动完成，可优化点不多</li></ul></li></ul><h2 id="3-Refresh-Interval"><a href="#3-Refresh-Interval" class="headerlink" title="3.Refresh Interval"></a>3.Refresh Interval</h2><ul><li>降低 Refresh 的频率<ul><li>增加 refresh_interval 的数值。默认为 1s ，如果设置成 -1 ，会禁止自动 refresh<ul><li>避免过于频繁的 refresh，而生成过多的 segment 文件</li><li>但是会降低搜索的实时性</li></ul></li><li>增大静态配置参数 indices.memory.index_buffer_size<ul><li>默认是 10%， 会导致自动触发 refresh</li></ul></li></ul></li></ul><h2 id="4-Translog"><a href="#4-Translog" class="headerlink" title="4.Translog"></a>4.Translog</h2><ul><li>降低写磁盘的频率，但是会降低容灾能力</li></ul><pre class="line-numbers language-none"><code class="language-none">- `Index.translog.durability`：默认是 request，每个请求都落盘。设置成 async，异步写入  - `Index.translog.sync_interval` 设置为 60s，每分钟执行一次  - `Index.translog.flush_threshod_size`: 默认 512 mb，可以适当调大。 当 translog 超过该值，会触发 flush<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-分片设定"><a href="#5-分片设定" class="headerlink" title="5.分片设定"></a>5.分片设定</h2><ul><li><p>副本在写入时设为 0，完成后再增加</p></li><li><p>合理设置主分片数，确保均匀分配在所有数据节点上</p><ul><li>Index.routing.allocation.total_share_per_node: 限定每个索引在每个节点上可分配的分片数（replicas and primaries）</li><li>5 个节点的集群。 索引有 5 个主分片，1 个副本，应该如何设置？<ul><li>（5+5） / 5 = 2</li><li>生产环境中要适当调大这个数字，避免有节点下线时，分片无法正常迁移</li></ul></li></ul></li><li><p>例子</p><pre class="line-numbers language-none"><code class="language-none">DELETE myindexPUT myindex{  "settings": {    "index": {      "refresh_interval": "30s",      "number_of_shards": "2"    },    "routing": {      "allocation": {        "total_shards_per_node": "3"      }    },    "translog": {      "sync_interval": "30s",      "durability": "async"    },    "number_of_replicas": 0  },  "mappings": {    "dynamic": false,    "properties": {}  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="二、提高读取性能的方法"><a href="#二、提高读取性能的方法" class="headerlink" title="二、提高读取性能的方法"></a>二、提高读取性能的方法</h1><h3 id="1-尽量-Denormalize-数据"><a href="#1-尽量-Denormalize-数据" class="headerlink" title="1.尽量 Denormalize 数据"></a>1.尽量 Denormalize 数据</h3><ul><li>Elasticsearch ！= 关系型数据库</li><li>尽可能 Denormalize 数据，从而获取最佳的性能<ul><li>使用 Nested 类型的数据。查询速度会慢几倍</li><li>使用 Parent / Child 关系。查询速度会慢几百倍</li></ul></li></ul><h3 id="2-数据建模"><a href="#2-数据建模" class="headerlink" title="2.数据建模"></a>2.数据建模</h3><ul><li>尽量将数据先行计算，然后保存到 Elasticsearch 中。尽量避免查询时的 Script 计算</li><li>尽量使用 Filter Context，利用缓存机制，减少不必要的算分</li><li>结合 profile，explain API 分析慢查询的问题，持续优化数据模型<ul><li>严禁使用 * 开头通配符 Terms 查询</li></ul></li></ul><h3 id="3-聚合文档消耗内存"><a href="#3-聚合文档消耗内存" class="headerlink" title="3.聚合文档消耗内存"></a>3.聚合文档消耗内存</h3><ul><li>聚合查询会消耗内存，特别是针对很大的数据集进行聚合运算<ul><li>如果可以控制聚合的数量，就能减少内存的开销</li></ul></li><li>当需要使用不同的 Query Scope，可以使用 Filter Bucket</li></ul><h3 id="4-优化分片"><a href="#4-优化分片" class="headerlink" title="4.优化分片"></a>4.优化分片</h3><ul><li>避免 Over Sharing<ul><li>一个查询需要访问每一个分片，分片过多，会导致不必要的查询开销</li></ul></li><li>结合应用场景，控制单个分片的尺寸<ul><li>Search： 20GB</li><li>Logging：40GB</li></ul></li><li>Force-merge Read-only 索引<ul><li>使用基于时间序列的索引，将只读的索引进行 force merge，减少 segment 数</li></ul></li></ul><h3 id="5-读性能优化"><a href="#5-读性能优化" class="headerlink" title="5.读性能优化"></a>5.读性能优化</h3><ul><li>影响查询性能的一些因素<ul><li>数据模型和索引配置是否优化</li><li>数据规模是否过大，通过 Filter 减少不必要的数据计算</li><li>查询语句是否优化</li></ul></li></ul><h2 id="六、ES集群优化"><a href="#六、ES集群优化" class="headerlink" title="六、ES集群优化"></a>六、ES集群优化</h2><h1 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h1><p>在网上收集到的ES集群可优化的点，供参考</p><hr><h1 id="1、集群规划优化实践"><a href="#1、集群规划优化实践" class="headerlink" title="1、集群规划优化实践"></a>1、集群规划优化实践</h1><ul><li>1.1 基于目标数据量规划集群 在业务初期，经常被问到的问题，要几个节点的集群，内存、CPU要多大，要不要SSD？ 最主要的考虑点是：你的目标存储数据量是多大？可以针对目标数据量反推节点多少。</li><li>1.2 要留出容量Buffer 注意：Elasticsearch有三个警戒水位线，磁盘使用率达到85%、90%、95%。 不同警戒水位线会有不同的应急处理策略。 这点，磁盘容量选型中要规划在内。控制在85%之下是合理的。 当然，也可以通过配置做调整。</li><li>1.3 ES集群各节点尽量不要和其他业务功能复用一台机器。 除非内存非常大。 举例：普通服务器，安装了ES+Mysql+redis，业务数据量大了之后，势必会出现内存不足等问题。</li><li>1.4 磁盘尽量选择SSD Elasticsearch官方文档肯定推荐SSD，考虑到成本的原因。需要结合业务场景， 如果业务对写入、检索速率有较高的速率要求，建议使用SSD磁盘。 阿里的业务场景，SSD磁盘比机械硬盘的速率提升了5倍。 但要因业务场景而异。</li><li>1.5 内存配置要合理 官方建议：堆内存的大小是官方建议是：Min（32GB，机器内存大小/2）。 Medcl和wood大叔都有明确说过，不必要设置32/31GB那么大，建议：热数据设置：26GB，冷数据：31GB。 总体内存大小没有具体要求，但肯定是内容越大，检索性能越好。 经验值供参考：每天200GB+增量数据的业务场景，服务器至少要64GB内存。 除了JVM之外的预留内存要充足，否则也会经常OOM。</li><li>1.6 CPU核数不要太小 CPU核数是和ESThread pool关联的。和写入、检索性能都有关联。 建议：16核+。</li><li>1.7 超大量级的业务场景，可以考虑跨集群检索 除非业务量级非常大，例如：滴滴、携程的PB+的业务场景，否则基本不太需要跨集群检索。</li><li>1.8 集群节点个数无需奇数 ES内部维护集群通信，不是基于zookeeper的分发部署机制，所以，无需奇数。 但是discovery.zen.minimum_master_nodes的值要设置为：候选主节点的个数/2+1，才能有效避免脑裂。</li><li>1.9 节点类型优化分配 集群节点数：&lt;=3，建议：所有节点的master：true， data：true。既是主节点也是路由节点。 集群节点数：&gt;3, 根据业务场景需要，建议：逐步独立出Master节点和协调/路由节点。</li><li>1.10 建议冷热数据分离 热数据存储SSD和普通历史数据存储机械磁盘，物理上提高检索效率。</li></ul><h1 id="2、索引优化实践"><a href="#2、索引优化实践" class="headerlink" title="2、索引优化实践"></a>2、索引优化实践</h1><p>Mysql等关系型数据库要分库、分表。Elasticserach的话也要做好充分的考虑。</p><ul><li>2.1 设置多少个索引？ 建议根据业务场景进行存储。 不同通道类型的数据要分索引存储。举例：知乎采集信息存储到知乎索引；APP采集信息存储到APP索引。</li><li>2.2 设置多少分片？ 建议根据数据量衡量。 经验值：建议每个分片大小不要超过30GB。</li><li>2.3 分片数设置？ 建议根据集群节点的个数规模，分片个数建议&gt;=集群节点的个数。 5节点的集群，5个分片就比较合理。 注意：除非reindex操作，分片数是不可以修改的。</li><li>2.4副本数设置？ 除非你对系统的健壮性有异常高的要求，比如：银行系统。可以考虑2个副本以上。 否则，1个副本足够。 注意：副本数是可以通过配置随时修改的。</li><li>2.5不要再在一个索引下创建多个type 即便你是5.X版本，考虑到未来版本升级等后续的可扩展性。 建议：一个索引对应一个type。6.x默认对应_doc，5.x你就直接对应type统一为doc。</li><li>2.6 按照日期规划索引 随着业务量的增加，单一索引和数据量激增给的矛盾凸显。 按照日期规划索引是必然选择。 好处1：可以实现历史数据秒删。很对历史索引delete即可。注意：一个索引的话需要借助delete_by_query+force_merge操作，慢且删除不彻底。 好处2：便于冷热数据分开管理，检索最近几天的数据，直接物理上指定对应日期的索引，速度快的一逼！ 操作参考：模板使用+rollover API使用。</li><li>2.7 务必使用别名 ES不像mysql方面的更改索引名称。使用别名就是一个相对灵活的选择。</li></ul><h1 id="3、数据模型优化实践"><a href="#3、数据模型优化实践" class="headerlink" title="3、数据模型优化实践"></a>3、数据模型优化实践</h1><ul><li>3.1 不要使用默认的Mapping 默认Mapping的字段类型是系统自动识别的。其中：string类型默认分成：text和keyword两种类型。如果你的业务中不需要分词、检索，仅需要精确匹配，仅设置为keyword即可。 根据业务需要选择合适的类型，有利于节省空间和提升精度，如：浮点型的选择。</li><li>3.2 Mapping各字段的选型流程 在这里插入图片描述</li><li>3.3 选择合理的分词器 常见的开源中文分词器包括：ik分词器、ansj分词器、hanlp分词器、结巴分词器、海量分词器、“ElasticSearch最全分词器比较及使用方法” 搜索可查看对比效果。 如果选择ik，建议使用ik_max_word。因为：粗粒度的分词结果基本包含细粒度ik_smart的结果。</li><li>3.4 date、long、还是keyword 根据业务需要，如果需要基于时间轴做分析，必须date类型； 如果仅需要秒级返回，建议使用keyword。</li></ul><h1 id="4、数据写入优化实践"><a href="#4、数据写入优化实践" class="headerlink" title="4、数据写入优化实践"></a>4、数据写入优化实践</h1><ul><li><p>4.1 要不要秒级响应？ Elasticsearch近实时的本质是：最快1s写入的数据可以被查询到。 如果refresh_interval设置为1s，势必会产生大量的segment，检索性能会受到影响。 所以，非实时的场景可以调大，设置为30s，甚至-1。</p></li><li><p>4.2 减少副本，提升写入性能。 写入前，副本数设置为0， 写入后，副本数设置为原来值。</p></li><li><p>4.3 能批量就不单条写入 批量接口为bulk，批量的大小要结合队列的大小，而队列大小和线程池大小、机器的cpu核数。</p></li><li><p>4.4 禁用swap 在Linux系统上，通过运行以下命令临时禁用交换：</p><p>sudo swapoff -a</p></li></ul><h1 id="5、检索聚合优化实战"><a href="#5、检索聚合优化实战" class="headerlink" title="5、检索聚合优化实战"></a>5、检索聚合优化实战</h1><ul><li>5.1 禁用 wildcard模糊匹配 数据量级达到TB+甚至更高之后，wildcard在多字段组合的情况下很容易出现卡死，甚至导致集群节点崩溃宕机的情况。 后果不堪设想。 替代方案： 方案一：针对精确度要求高的方案:两套分词器结合，standard和ik结合，使用match_phrase检索。 方案二：针对精确度要求不高的替代方案：建议ik分词，通过match_phrase和slop结合查询。</li><li>5.2极小的概率使用match匹配 中文match匹配显然结果是不准确的。很大的业务场景会使用短语匹配“match_phrase”。 match_phrase结合合理的分词词典、词库，会使得搜索结果精确度更高，避免噪音数据。</li><li>5.3 结合业务场景，大量使用filter过滤器 对于不需要使用计算相关度评分的场景，无疑filter缓存机制会使得检索更快。 举例：过滤某邮编号码。</li><li>5.4控制返回字段和结果 和mysql查询一样，业务开发中，select * 操作几乎是不必须的。 同理，ES中，<em>source 返回全部字段也是非必须的。 要通过</em>source 控制字段的返回，只返回业务相关的字段。 网页正文content，网页快照html_content类似字段的批量返回，可能就是业务上的设计缺陷。 显然，摘要字段应该提前写入，而不是查询content后再截取处理。</li><li>5.5 分页深度查询和遍历 分页查询使用：from+size; 遍历使用：scroll； 并行遍历使用：scroll+slice。 斟酌集合业务选型使用。</li><li>5.6 聚合Size的合理设置 聚合结果是不精确的。除非你设置size为2的32次幂-1，否则聚合的结果是取每个分片的Top size元素后综合排序后的值。 实际业务场景要求精确反馈结果的要注意。 尽量不要获取全量聚合结果——从业务层面取TopN聚合结果值是非常合理的。因为的确排序靠后的结果值意义不大。</li><li>5.7 聚合分页合理实现 聚合结果展示的时，势必面临聚合后分页的问题，而ES官方基于性能原因不支持聚合后分页。 如果需要聚合后分页，需要自开发实现。包含但不限于： 方案一：每次取聚合结果，拿到内存中分页返回。 方案二：scroll结合scroll after集合redis实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch环境搭建</title>
      <link href="2021/06/17/elasticsearch-huan-jing-da-jian/"/>
      <url>2021/06/17/elasticsearch-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Elasticsearch环境搭建"><a href="#一、Elasticsearch环境搭建" class="headerlink" title="一、Elasticsearch环境搭建"></a>一、Elasticsearch环境搭建</h2><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。Elasticsearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便</p><hr><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ul><li>加速下载网址1:<a href="https://www.newbe.pro/Mirrors/Mirrors-Elasticsearch/">https://www.newbe.pro/Mirrors/Mirrors-Elasticsearch/</a></li><li>加速下载网址2:<a href="https://elasticsearch.cn/download/">https://elasticsearch.cn/download/</a></li><li>中文社区 :<a href="https://elasticsearch.cn/">https://elasticsearch.cn/</a></li><li>Logstash中文指南:<a href="https://www.wenjiangs.com/doc/a6xejcpgn">https://www.wenjiangs.com/doc/a6xejcpgn</a></li></ul><h1 id="1-源文件安装ES"><a href="#1-源文件安装ES" class="headerlink" title="1.源文件安装ES"></a>1.源文件安装ES</h1><ul><li>下载，解压</li></ul><pre class="line-numbers language-none"><code class="language-none">// 这里以7.8.0版本作为演示wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.0-linux-x86_64.tar.gztar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gzrm -rf elasticsearch-7.8.0-linux-x86_64.tar.gzmv elasticsearch-7.8.0/ /usr/local/elasticsearch// 增加es用户来运行rs，root不能直接运行useradd espasswd es chown -R es elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改vim elasticsearch.yml 配置</li></ul><pre class="line-numbers language-none"><code class="language-none">cluster.name: panco-esnode.name: node-1network.host: 0.0.0.0http.port: 9200discovery.seed_hosts: ["127.0.0.1", "[::1]"]cluster.initial_master_nodes: ["node-1"]xpack.security.enabled: falsepath.data: /usr/local/elasticsearch/datapath.logs: /usr/local/elasticsearch/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改linux系统配置</li></ul><pre class="line-numbers language-none"><code class="language-none">-- 1.设置文件最大进程/线程/内存数,末尾追加内容：vim /etc/security/limits.conf*               soft    nofile          65536*               hard    nofile          65536*               soft    nproc           4096*               hard    nproc           4096-- 2.修改sysctl.conf:vim /etc/sysctl.conf//添加内容vm.max_map_count=262144// 执行下面命令生效：sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动</li></ul><pre class="line-numbers language-none"><code class="language-none">-- elasticsearch目录下bin下执行: ./elasticsearch-- 开机自启动：chmod  755  /etc/rc.d/rc.localvim /etc/rc.d/rc.localsu - es -c "/usr/local/elasticsearch/bin/elasticsearch -d"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Elasticsearch-单台服务器启动多个节点-伪集群"><a href="#Elasticsearch-单台服务器启动多个节点-伪集群" class="headerlink" title="Elasticsearch 单台服务器启动多个节点(伪集群)"></a>Elasticsearch 单台服务器启动多个节点(伪集群)</h2><ul><li><p>1.拷贝elasticsearch文件: cp -R elasticsearch elasticsearch-node-2</p></li><li><p>2.修改elasticsearch.yml配置</p></li></ul><pre class="line-numbers language-none"><code class="language-none">cluster.name: ls-esnode.name: node-2     # 节点名称需要修改network.host: 0.0.0.0http.port: 9201      # 端口修改discovery.seed_hosts: ["127.0.0.1", "[::1]"]cluster.initial_master_nodes: ["node-1"]xpack.security.enabled: falsepath.data: /usr/local/elasticsearch/datapath.logs: /usr/local/elasticsearch/logsnode.max_local_storage_nodes: 2   // 单台服务器最大节点数量需要修改，默认为1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.要点</li></ul><pre class="line-numbers language-none"><code class="language-none">1：一个集群有N（N&gt;1）个节点组成2：节点的本质就是一个ES的运行实例，也就是一个JAVA进程，一台机器上可以运行多个ES实例，但在生产环境最好一台机器运行一个，防止一台机器挂了N个节点一起都挂了3：节点分成主节点、数据节点、节点还有其他角色，比如：路由、竞选主等。每个节点都可以知道整个集群的状态信息，默认都具有路由和竞选主的角色。4：主节点的功能最为关键，创建索引、删除索引、维护集群状态信息、分片分配、路由等。5：数据节点主要用于数据存储，路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-Docker-安装-ES"><a href="#2-Docker-安装-ES" class="headerlink" title="2.Docker 安装 ES"></a>2.Docker 安装 ES</h1><pre class="line-numbers language-none"><code class="language-none">//1.搜索ElasticSearch镜像docker search elasticsearch//2.拉取镜像// 可以在dockerhub官网搜索具体的版本号：https://hub.docker.com/_/elasticsearch?tab=tags&amp;page=1&amp;ordering=last_updateddocker pull docker.io/elasticsearch:7.8.0 (版本号)//3.查看镜像docker images//4.运行容器// ES_JAVA_OPTS： 设置为服务器内存的一半docker run --name fyt-es -p 9200:9200 -p 9300:9300 -e  "ES_JAVA_OPTS=-Xms8g -Xmx8g"  -d 121454ddad72<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES插件安装"><a href="#ES插件安装" class="headerlink" title="ES插件安装"></a>ES插件安装</h1><pre class="line-numbers language-none"><code class="language-none">// 安装插接// 方法1bin/elasticsearch-plugin install analysis-icu(插件名称)// 方法2./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.8.0/elasticsearch-analysis-ik-7.8.0.zip// 查看所有插接// 1.进入elasticsearch文件夹查看插件bin/elasticsearch-plugin list// 2.使用浏览器访问http://120.25.168.102:9200/_cat/plugins// 3.移除插件./bin/elasticsearch-plugin remove analysis-icu(插件名称)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、基础概念、原理"><a href="#二、基础概念、原理" class="headerlink" title="二、基础概念、原理"></a>二、基础概念、原理</h2><h1 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h1><p>大概介绍一下ES中的一些基础概念和原理。</p><hr><h1 id="索引原理-反向索引"><a href="#索引原理-反向索引" class="headerlink" title="索引原理:反向索引"></a>索引原理:反向索引</h1><ul><li>正向索引</li></ul><pre class="line-numbers language-none"><code class="language-none">在搜索引擎中每个文件都对应一个文件ID，文件内容被表示为一系列关键词的集合（实际上在搜索引擎索引库中，关键词也已经转换为关键词ID）。例如“文档1”经过分词，提取了20个关键词，每个关键词都会记录它在文档中的出现次数和出现位置。得到正向索引的结构如下：       “文档1”的ID &gt; 单词1：出现次数，出现位置列表；单词2：出现次数，出现位置列表；…………。       “文档2”的ID &gt; 此文档出现的关键词列表。              DOC1-&gt;关键词1 -&gt;关键词2 -&gt;关键词3       DOC2-&gt;关键词1 -&gt;关键词2 -&gt;关键词3       DOC3-&gt;关键词1 -&gt;关键词2 -&gt;关键词3              一般是通过key，去找value。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>搜索关键词“华为手机”时，假设只存在正向索引（forward index），那么就需要扫描索引库中的所有文档，找出所有包含关键词“华为手机”的文档，再根据打分模型进行打分，排出名次后呈现给用户。</strong></p><ul><li>反向索引</li></ul><pre class="line-numbers language-none"><code class="language-none">即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。得到倒排索引的结构如下：       “关键词1”：“文档1”的ID，“文档2”的ID，…………。       “关键词2”：带有此关键词的文档ID列表。              关键词1-&gt;doc1-&gt;doc2-&gt;doc3       关键词2-&gt;doc1-&gt;doc2-&gt;doc3       关键词3-&gt;doc1-&gt;doc2-&gt;doc3       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>反向索引，把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词,不需要遍历整个文档库</strong></p><p><strong>单词词典</strong>是倒排索引中非常重要的组成部分，它用来维护文档集合中出现过的所有单词的相关信息，同时用来记载某个单词对应的倒排列表在倒排文件中的位置信息,常用的数据结构包括<strong>哈希加链表结构</strong>和<strong>树形词典结构</strong>。</p><h1 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document 文档"></a>Document 文档</h1><pre class="line-numbers language-none"><code class="language-none">{"index": "movies","_type": "_doc","_id": "1","_score": "14.69302","_source": {"year": 1995,"@version": "1","genre" : ["Adventure","Animation","Children","Comedy","Fantasy"],"id" : "1","title" : "Toy Story"} }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>_index 文档 所属的索引名</li><li>_type 文档所属的类型名</li><li>_id 文档唯一 的ID</li><li>_source 文档的原始 Json 数据</li><li>_all 整合所有字段内容到该字段 ， 已经被废除</li><li>_version 文档版本信息</li><li>_scoure 相关性打分</li></ul><h1 id="Index-索引"><a href="#Index-索引" class="headerlink" title="Index 索引"></a>Index 索引</h1><p><strong>索引是 文档的容器， 是一类 文档的结合</strong></p><ul><li>index 体现了逻辑空间的概念， 每个索引都有自己的 Mapping 定义， 用于定义包含的文档的字段名和字段类型</li><li>Shard 体现了 屋里空间的概念，索引中的数据分散在 Shard 上</li></ul><p><strong>索引的 Mapping 和 Settings</strong></p><ul><li>Mapping 定义文档字段的类型</li><li>Setting 定义不同的数据分布</li></ul><h1 id="和关系型数据库比较"><a href="#和关系型数据库比较" class="headerlink" title="和关系型数据库比较"></a>和关系型数据库比较</h1><table><thead><tr><th>概念</th><th>数据库</th><th>ES</th></tr></thead><tbody><tr><td>容器</td><td>Table</td><td>Index</td></tr><tr><td>结构定义</td><td>Schema</td><td>Mapping</td></tr><tr><td>数据实体</td><td>Row</td><td>Document</td></tr><tr><td>列</td><td>Column</td><td>Field</td></tr><tr><td>查询方式</td><td>SQL</td><td>DSL</td></tr></tbody></table><h1 id="score文档权重"><a href="#score文档权重" class="headerlink" title="_score文档权重"></a>_score文档权重</h1><p>使用ES时，对于查询出的文档无疑会有文档相似度之别。而理想的排序是和查询条件相关性越高排序越靠前，而这个排序的依据就是_score</p><ul><li>学习网址：<a href="https://blog.csdn.net/paditang/article/details/79098830">https://blog.csdn.net/paditang/article/details/79098830</a></li></ul><h1 id="ES目录结构"><a href="#ES目录结构" class="headerlink" title="ES目录结构"></a>ES目录结构</h1><ul><li>bin 二进制脚本文件包括elasticsearch启动节点、elasticsearch-plugin安装插件</li><li>conf 配置文件 包括elasticsearch.yml</li><li>data 在节点上分配的每个index/shard的数据文件的位置，可以容纳多个位置</li><li>logs 日志文件的位置</li><li>plugins 插件文件的位置，每个插件将包含在其子目录中</li><li>repo 共享文件系统存储库位置。可容纳多个位置。文件系统存储库可以放在这里指定的任何目录的任何子目录中</li><li>script 脚本文件的位置</li></ul><h2 id="三、Kibana安装"><a href="#三、Kibana安装" class="headerlink" title="三、Kibana安装"></a>三、Kibana安装</h2><h1 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h1><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。 Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。 设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><hr><h1 id="linux环境搭建-Kibana"><a href="#linux环境搭建-Kibana" class="headerlink" title="linux环境搭建 Kibana"></a>linux环境搭建 Kibana</h1><ul><li>Docker 安装</li></ul><pre class="line-numbers language-none"><code class="language-none"># 安装docker pull docker.elastic.co/kibana/kibana:7.10.0# 启动docker run  -d --name kibana -p 5601:5601 docker.elastic.co/kibana/kibana:7.10.0# 修改kibana.yml 配置docker exec -it kibana <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>本地安装</li></ul><pre class="line-numbers language-none"><code class="language-none">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.3.2-linux-x86_64.tar.gztar -zxvf kibana-6.3.2-linux-x86_64.tar.gzmv kibana-6.3.2-linux-x86_64/ /usr/local/kibana-- 不能root执行，改成eschown -R es kibana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改配置</li></ul><pre class="line-numbers language-none"><code class="language-none">-- vim config/kibana.ymlserver.port: 5601server.host: "0.0.0.0"elasticsearch.url: "http://192.168.202.128:9200"kibana.index: ".kibana"-- 修改为中文i18n.locale: "en" 改为 i18n.locale: "zh-CN"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动</li></ul><pre class="line-numbers language-none"><code class="language-none">bin/kibana -- 挂起到后台执行./bin/kibana &amp; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止</li></ul><pre class="line-numbers language-none"><code class="language-none">fuser -n tcp 5601kill 进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、Mapping-数据类型"><a href="#四、Mapping-数据类型" class="headerlink" title="四、Mapping 数据类型"></a>四、Mapping 数据类型</h2><h1 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h1><p>ES的mapping非常类似于静态语言中的数据类型：声明一个变量为int类型的变量， 以后这个变量都只能存储int类型的数据。同样的， 一个number类型的mapping字段只能存储number类型的数据。 同语言的数据类型相比，mapping还有一些其他的含义，mapping不仅告诉ES一个field中是什么类型的值， 它还告诉ES如何索引数据以及数据是否能被搜索到。</p><hr><h2 id="1-Dynamic-Mapping-字段"><a href="#1-Dynamic-Mapping-字段" class="headerlink" title="1.Dynamic Mapping 字段"></a>1.Dynamic Mapping 字段</h2><ul><li>动态映射(dynamic: true)，动态添加新的字段（或缺省）。</li><li>静态映射(dynamic:false)，忽略新的字段。在原有的映射基础上，当有新的字段时，不会主动的添加新的映射关系，只作为查询结果出现在查询中。</li><li>严格模式(dynamic：strict)，如果遇到新的字段，就抛出异常。</li></ul><table><thead><tr><th></th><th>true</th><th>false</th><th>strict</th></tr></thead><tbody><tr><td>文档可索引</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>字段可索引</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>mapping被更新</td><td>YES</td><td>NO</td><td>NO</td></tr></tbody></table><p><strong>修改语句</strong></p><pre class="line-numbers language-none"><code class="language-none">PUT dynamic_test/_mapping{  "dynamic": false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h2><p><strong>核心数据类型</strong></p><ul><li>字符串 text：用于全文索引，该类型的字段将通过分词器进行分词 keyword：不分词，只能搜索该字段的完整的值</li><li>数值型 long、integer、short、byte、double、float、half_float、scaled_float</li><li>布尔 boolean</li><li>二进制 binary：该类型的字段把值当做经过base64编码的字符串，默认不存储，且不可搜索</li><li>范围类型 范围类型表示值是一个范围，而不是一个具体的值 integer_range、float_range、long_range、double_range、date_range 比如age类型是integer_range，那么值可以是{“gte”:20,”lte”:40}；搜索”term”:{“age”:21}可以搜索该值</li><li>日期-date\ 由于json类型没有date类型，所以es通过识别字符串是否符合format定义的格式来判断是否为date类型\ format默认为：strict_date_optional_time || epoch_millis\ 格式”2022-01-01” “2022/01/01 12:10:30” \ 这种字符串格式\ 从开始纪元（1970年1月1日0点）开始的毫秒数</li></ul><p><strong>复杂数据类型</strong> ES中没有专门的数据类型，直接使用[]定义接口，数组中所有的值必须是同一种数据类型，不支持混合数据类型的数组</p><ul><li>字符串数组[“one”,”two”]</li><li>整数数组[1,2]</li><li>Object对象数组[{“name”:”alex”,”age”:18},{“name”:”tom”,”age”:18}]</li></ul><p><strong>专用数据类型</strong></p><ul><li>IP类型的字段用于存储IPv4和IPv6的地址，本质上是一个长整形字段</li><li>completion（实现自动补全）</li><li>token_count（记录分词数）</li><li>murmur3（记录字符串hash值）</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><pre class="line-numbers language-none"><code class="language-none"># 创建PUT my_index{  "mappings": {    "doc": {      "dynamic": false,      "properties": {        "title": {          "type": "text"        },        "name": {          "type": "keyword"        },        "age": {          "type": "integer"        }      }    }  }}#查询GET my_index/_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-index参数"><a href="#3-index参数" class="headerlink" title="3.index参数"></a>3.index参数</h2><p>index参数作用是控制当前字段是否被<strong>索引</strong>，默认为true，false表示不记录，即不可被搜索。</p><pre class="line-numbers language-none"><code class="language-none">PUT my_index5{  "mappings": {    "doc": {      "properties": {        "cookie": {          "type": "text",          "index": false        },        "content": {          "type": "text",          "index": true        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个index有两个字段，其中cookie设定为不可被搜索\ <strong>当在es中存储了一些不想要被检索的字段如身份证、手机等，这是对于这些字段就可以使用index设置为false，这样有一定的安全性还可以节省空间</strong></p><h2 id="4-null-value参数"><a href="#4-null-value参数" class="headerlink" title="4.null_value参数"></a>4.null_value参数</h2><p>这个参数的作用是当字段遇到null值的时候的处理策略，默认为null，即空值，此时es会忽略该值。可以通过这个参数设置某个字段的默认值。</p><pre class="line-numbers language-none"><code class="language-none">PUT my_index5{  "mappings": {    "doc": {      "properties": {        "cookie": {          "type": "text",          "null_value":"Null"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Index-template"><a href="#5-Index-template" class="headerlink" title="5.Index template"></a>5.Index template</h2><ul><li>Index Templates - 帮助设定Mapping 和 Settings，并按照一定的规则，自动匹配到新创建的索引上</li><li>模板仅在一个索引被新创建时，才会产生作用，修改模版不会影响已创建的索引。</li><li>可以设定多个索引模版，这些设置会被”merge”在一起</li><li>可以指定”order”的数值，控制”merging”的过程</li></ul><pre class="line-numbers language-none"><code class="language-none">所有索引在创建的时候 都会把setting设置成主分片和副本分片都是1# 案列1   PUT  _template/template_default   {     "index_patterns":["*"],     "order" : 0,     "version" : 1,     "settings" : {  "number_of_shards" : 1,  "number_of_replicas": 1  }  }#  案列2 PUT _template/fy_office_template{  # 匹配的索引名字  "index_patterns":["fy_office_list*"],  "order": 0,  "settings": {  # 设置分词器    "analysis":{         "analyzer":{          "ik":{            "tokenizer":"ik_max_word"          }        }    },    # 刷新频率    "refresh_interval": "30s",    "translog":{      "sync_interval":"30s",      "durability": "async"    }  },  "mappings" : {      "properties" : {        "address" : {          "type" : "keyword"        },        "province" : {          "type" : "keyword"        },        "web_url" : {          "type" : "keyword"        },        "city" : {          "type" : "keyword"        },        "county" : {          "type" : "keyword"        },        "name" : {          "type" : "text",          "fields" : {            "keyword" : {              "ignore_above" : 256,              "type" : "keyword"            }          }        },        "tel" : {          "type" : "keyword"        },        "id" : {          "type" : "integer"        },        "fax" : {          "type" : "keyword"        },        "email" : {          "type" : "keyword"        }      }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Index template的工作方式</strong></p><ul><li>当一个索引被新创建时</li><li>应用Elasticsearch 默认的setting和mappings</li><li>应用order 数值低的 Index Template 中设定</li><li>应用order 高的Index Template 中设定，之前的设定会被覆盖</li><li>应用创建索引时，用户所指定的setting和mappings，并覆盖之前 模版中的设定</li></ul><h2 id="6-Dynamic-Template"><a href="#6-Dynamic-Template" class="headerlink" title="6.Dynamic Template"></a>6.Dynamic Template</h2><p>根据Elasticsearch 识别的数据类型，结合字段名称，来动态设定字段类型</p><ul><li>Dynamic Template 是定义在某个索引的mapping中</li><li>Template有一个名称</li><li>匹配规则是一个数组</li><li>为匹配都字段设置Mapping</li></ul><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li>1：keword是一种字段类型 es的每个字段可以做多字段，例如，你有一个content的字段，类型是text。你可以为他指定一个子字段叫 keyword（也可以取名字叫kw）类型设置成keword， 在做term查询时，就查询content.keyword（或者叫content.kw。 es默认为所有文本都设置成text，并且设置keywoed的子字段</li><li>2： mapping信息是保存在cluster state里面的。 文件应该放在 nodes/{N}/_state/global-{NNN} 下面 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state.html</a></li><li>3：使用动态mapping的隐患 设置成strict，万一有一条数据里带着不存在的字段，写入就会失败。 设置成true，数据可以写入，还会在mapping中增加那个字段的设置。随着时间的流逝，这类数据会导致mapping设定的膨胀</li><li>4：选择使用ES的场景，及同步数据的思路 如果有全文搜索的需求。或者有统计分析的需求，都可以用es作为存储。数据可以在数据库里保存一份，定期同步到es中。然后对一些全文搜索的，对应es实现。 数据库和es同步可以考虑使用logstash的jdbc connector。只需要配置就可以实现增量同步。对于物理删除的记录如何同步es，在logstash中不支持这个功能。但是可以通过为数据增加isDeleted字段的方式。标记成删除状态。同步到es后 再用程序分别删除。</li></ul><h2 id="五、分片，副本管理"><a href="#五、分片，副本管理" class="headerlink" title="五、分片，副本管理"></a>五、分片，副本管理</h2><h1 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h1><p>分片，副本 是ES中一个重要的概念</p><hr><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>**集群(Cluster)**：集群是一个或多个节点（服务器）的集合，它们共同保存您的整个数据，并提供跨所有节点的联合索引和搜索功能。本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</li><li><strong>节点（Node）</strong>：节点是作为集群一部分的单个服务器，存储数据并参与群集的索引和搜索功能。</li><li><strong>索引（Index）</strong>：索引是具有某些类似特征的文档集合。索引由名称标识（必须全部小写），此名称用于在对其中的文档执行索引，搜索，更新和删除操作时引用索引。 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</li><li><strong>文档（Document）</strong>：文档是可以编制索引的基本信息单元。Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示，同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</li><li><strong>分片和副本（Shards &amp; Replicas）</strong>：索引可能存储大量可能超过单个节点的硬件限制的数据。为了解决这个问题，Elasticsearch提供了将索引细分为多个称为分片的功能。创建索引时，只需定义所需的分片数即可。每个分片本身都是一个功能齐全且独立的“索引”，可以托管在集群中的任何节点上。<strong>一个分片默认最大文档数量是20亿，每个分片最好不超过30GB</strong></li><li><strong>副本集很重要</strong>：它在分片/节点发生故障时提供高可用性。它允许您扩展搜索量/吞吐量，因为可以在所有副本上并行执行搜索。默认情况下，Elasticsearch中的每个索引都分配了5个主分片和1个副本，这意味着如果群集中至少有两个节点，则索引将包含5个主分片和另外5个副本分片（1个完整副本），总计为每个索引10个分片。 (7.0 版本改为默认1个主分片，0个副本分片)</li></ul><hr><p>索引的number_of_shards参数只对当前索引有效而不是对整个集群生效.对每个索引来讲, 该参数定义了当前索引的主分片数(而不是集群中所有的主分片数).</p><h1 id="文档到路由的算法"><a href="#文档到路由的算法" class="headerlink" title="文档到路由的算法"></a>文档到路由的算法</h1><p>当你索引一个文档，它被存储在单独一个主分片上。Elasticsearch是如何知道文档属于哪个分片的呢？当你创建一个新文档，它是如何知道是应该存储在分片1还是分片2上的呢？</p><p>进程不能是随机的，因为我们将来要检索文档。事实上，它根据一个简单的算法决定：</p><p><strong>shard = hash(routing) % number_of_primary_shards</strong> \ routing值是一个任意字符串，它默认是_id但也可以自定义。这个routing字符串通过哈希函数生成一个数字，然后除以主切片的数量得到一个余数(remainder)，余数的范围永远是0到number_of_primary_shards - 1，这个数字就是特定文档所在的分片。</p><p><strong>这也解释了为什么主分片的数量只能在创建索引时定义且不能修改：如果主分片的数量在未来改变了，所有先前的路由值就失效了</strong>，文档也就永远找不到了。</p><h1 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h1><ul><li>绿色：一起正常，主分片副本分片都正常使用</li><li>黄色 ：主分片都可以正常访问，有部分副本分片无法使用</li><li>黄色：有部分主分片无法使用</li></ul><h1 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h1><ul><li>索引创建后就不能修改主分片，(需要重建索引)</li><li>副本分片个数可以随时调整</li><li>当其中节点出现无法访问时，副本分片会自动竞选成为主分片，确保系统正常运行</li></ul><pre class="line-numbers language-none"><code class="language-none"># 创建索引PUT demo1{  "mappings": {    "properties": {      "name":{        "type": "keyword"      },      "address":{        "type": "text"      },      "memo":{        "type": "text"      }    }  },  "settings": {    "number_of_shards": 3,    // 设置主分片个数 (索引创建后就不能修改)    "number_of_replicas": 1   // 设置副本分片个数（相当于所有的主分片都会被）  }  }POST demo1/_doc{  "name":"阿龙",  "address":"湖南长沙",  "memo":"test1"}POST demo1/_doc{  "name":"阿俊",  "address":"湖南株洲",  "memo":"test2"}# 设置分片PUT /demo1{  "settings": {    "number_of_shards": 3,    "number_of_replicas": 1  }}# 设置副本数,每个节点只会生成一个副本PUT demo1/_settings{  "number_of_replicas": 4}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="推迟分配分片"><a href="#推迟分配分片" class="headerlink" title="推迟分配分片"></a>推迟分配分片</h1><p>当有节点无法访问时，master节点会进行分片的**reallocation(重新分配)**。</p><p>理论上来说，这个是理想的行为，我们想要提拔副本分片来尽快恢复丢失的主分片。 我们同时也希望保证资源在整个集群的均衡，用以避免热点。 然而，在实践中，立即的再均衡所造成的问题会比其解决的更多。举例来说，考虑到以下情形：</p><ul><li>Node（节点） 19 在网络中失联了（某个家伙踢到了电源线)</li><li>Master 立即注意到了这个节点的离线，它决定在集群内提拔其他拥有 Node 19 上面的主分片对应的副本分片为主分片</li><li>在副本被提拔为主分片以后，master 节点开始执行恢复操作来重建缺失的副本。集群中的节点之间互相拷贝分片数据，网卡压力剧增，集群状态尝试变绿。</li><li>由于目前集群处于非平衡状态，这个过程还有可能会触发小规模的分片移动。其他不相关的分片将在节点间迁移来达到一个最佳的平衡状态 与此同时，那个踢到电源线的倒霉管理员，把服务器插好电源线进行了重启，现在节点 Node 19 又重新加入到了集群。不幸的是，这个节点被告知当前的数据已经没有用了， 数据已经在其他节点上重新分配了。所以 Node 19 把本地的数据进行删除，然后重新开始恢复集群的其他分片（然后这又导致了一个新的再平衡）</li></ul><p>如果这一切听起来是不必要的且开销极大，那就对了。是的，不过前提是你知道这个节点会很快回来。如果节点 Node 19 真的丢了，上面的流程确实正是我们想要发生的。</p><p>为了解决这种瞬时中断的问题，Elasticsearch 可以推迟分片的分配。这可以让你的集群在重新分配之前有时间去检测这个节点是否会再次重新加入。</p><p><strong>修改默认延时</strong></p><pre class="line-numbers language-none"><code class="language-none">默认情况，集群会等待一分钟来查看节点是否会重新加入，如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。通过修改参数 delayed_timeout ，默认等待时间可以全局设置也可以在索引级别进行修改:PUT /_all/_settings {  "settings": {    "index.unassigned.node_left.delayed_timeout": "5m"  （如果你希望分片立即分配而不想等待,可以设置成0）  }}通过使用 _all 索引名，我们可以为集群里面的所有的索引使用这个参数默认时间被修改成了 5 分钟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自动取消分配迁移</strong></p><p>如果节点在超时之后再回来，且集群还没有完成分片的移动，会发生什么事情呢？在这种情形下， Elasticsearch 会检查该机器磁盘上的分片数据和当前集群中的活跃主分片的数据是不是一样 — 如果两者匹配， 说明没有进来新的文档，包括删除和修改 — 那么 master 将会取消正在进行的再平衡并恢复该机器磁盘上的数据。</p><p>之所以这样做是因为本地磁盘的恢复永远要比网络间传输要快，并且我们保证了他们的分片数据是一样的，这个过程可以说是双赢。</p><p>如果分片已经产生了分歧（比如：节点离线之后又索引了新的文档），那么恢复进程会继续按照正常流程进行。重新加入的节点会删除本地的、过时的数据，然后重新获取一份新的。</p><h1 id="分片生命周期"><a href="#分片生命周期" class="headerlink" title="分片生命周期"></a>分片生命周期</h1><ul><li>1）客户端发起数据写入请求，对你写的这条数据根据<em>routing规则选择发给哪个Shard。 确认Index Request中是否设置了使用哪个Filed的值作为路由参数， 如果没有设置，则使用Mapping中的配置， 如果mapping中也没有配置，则使用</em>id作为路由参数，然后通过_routing的Hash值选择出Shard，最后从集群的Meta中找出出该Shard的Primary节点。</li><li>2）写入请求到达Shard后，先把数据写入到内存（buffer）中，同时会写入一条日志到translog日志文件中去。 当写入请求到shard后，首先是写Lucene，其实就是创建索引。 索引创建好后并不是马上生成segment，这个时候索引数据还在缓存中，这里的缓存是lucene的缓存，并非Elasticsearch缓存，lucene缓存中的数据是不可被查询的。</li><li>3）执行refresh操作：从内存buffer中将数据写入os cache(操作系统的内存)，产生一个segment file文件，buffer清空。 写入os cache的同时，建立倒排索引，这时数据就可以供客户端进行访问了。 默认是每隔1秒refresh一次的，所以es是准实时的，因为写入的数据1秒之后才能被看到。 buffer内存占满的时候也会执行refresh操作，buffer默认值是JVM内存的10%。 通过es的restful api或者java api，手动执行一次refresh操作，就是手动将buffer中的数据刷入os cache中，让数据立马就可以被搜索到。 若要优化索引速度, 而不注重实时性, 可以降低刷新频率。</li><li>4）translog会每隔5秒或者在一个变更请求完成之后，将translog从缓存刷入磁盘。 translog是存储在os cache中，每个分片有一个，如果节点宕机会有5秒数据丢失，但是性能比较好，最多丢5秒的数据。。 可以将translog设置成每次写操作必须是直接fsync到磁盘，但是性能会差很多。 可以通过配置增加transLog刷磁盘的频率来增加数据可靠性，最小可配置100ms，但不建议这么做，因为这会对性能有非常大的影响。</li><li>5）每30分钟或者当tanslog的大小达到512M时候，就会执行commit操作（flush操作），将os cache中所有的数据全以segment file的形式，持久到磁盘上去。 第一步，就是将buffer中现有数据refresh到os cache中去。 清空buffer 然后强行将os cache中所有的数据全都一个一个的通过segmentfile的形式，持久到磁盘上去。 将commit point这个文件更新到磁盘中，每个Shard都有一个提交点(commit point), 其中保存了当前Shard成功写入磁盘的所有segment。 把translog文件删掉清空，再开一个空的translog文件。 flush参数设置： index.translog.flush_threshold_period: index.translog.flush_threshold_size: #控制每收到多少条数据后flush一次 index.translog.flush_threshold_ops:</li><li>6）Segment的merge操作： 随着时间，磁盘上的segment越来越多，需要定期进行合并。 Es和Lucene 会自动进行merge操作，合并segment和删除已经删除的文档。 我们可以手动进行merge：POST\ index/_forcemerge。一般不需要，这是一个比较消耗资源的操作。</li></ul><h2 id="六、查询模板，索引别名"><a href="#六、查询模板，索引别名" class="headerlink" title="六、查询模板，索引别名"></a>六、查询模板，索引别名</h2><h1 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h1><p>我们发现一些用户经常编写了一些非常冗长和复杂的查询 - 在很多情况下，相同的查询会一遍又一遍地执行，但是会有一些不同的值作为参数来查询。在这种情况下，我们觉得使用一个search template（搜索模板）来做这样的工作非常合适。搜索模板允许您使用可在执行时定义的参数定义查询</p><hr><h1 id="1-查询模板Search-template"><a href="#1-查询模板Search-template" class="headerlink" title="1.查询模板Search template"></a>1.查询模板Search template</h1><p>Search template的好处是：</p><ul><li>避免在多个地方重复代码</li><li>更容易测试和执行您的查询</li><li>在应用程序间共享查询</li><li>允许用户只执行一些预定义的查询</li><li>将搜索逻辑与应用程序逻辑分离</li></ul><pre class="line-numbers language-none"><code class="language-none"># 创建 Search Template 查询模板POST _scripts/tmdbFind{  "script":{    "lang": "mustache",    "source": {      "_source":["title","overview"],       "size": 20,       "query": {        "multi_match": {          "query": "{{q}}",          "fields": ["title^2","overview"]        }      }    }  }}# tmdbFind 为查询模板的ID，可以在多个索引中使用这个模板# 使用查询模板POST tmdb/_search/template{  "id":"tmdbFind",  "params": {    "q":"Coach and Carter"  }}# 查看模板GET _scripts/searchTitle# 删除模板DELETE _scripts/searchTitle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-索引别名-alias"><a href="#2-索引别名-alias" class="headerlink" title="2.索引别名 alias"></a>2.索引别名 alias</h1><p>别名。别名正如其名，他们是你使用的指针或者名称，对于1个或多个具体的所有。由于其提供的灵活性，别名再扩展集群和管理数据在索引中的分布时是非常有用的</p><ul><li>（1）灵活的扩容：推荐每个人为他们的Elasticsearch所以使用别名，因为在未来重建索引的时候，别名会赋予你更多的灵活性。假设一开始创建索引只有一个主分片，之后你又决定为索引扩容。如果为原索引使用的是别名，现在你可以修改别名让其指向额外创建的新索引，而无须修改被搜索的索引之名称（假设一开始你就为搜索使用了别名）。</li><li>（2）动态的滚动查询：在实际应用中，我们也不应该向单个索引持续写入数据，知道它的分片巨大无比。巨大的索引会在数据老化后难以删除，以——id为单位删除文档不会立即释放空间，删除doc只在lucene分段合并时才会真正从磁盘中删除。即使手工触发分段合并，仍会引起较高的I/O压力，并且可能因为分段巨大导致合并过程中磁盘空间不足（分段大小大于此片可用空间的一半）</li></ul><p>因此，另外一个有用的特性是：在不同的索引创建窗口。比如，如果为数据创建了每日索引，你可能期望一个滑动窗口覆盖过去一周的数据，别名就称为last-7-days.然后，每天创建新的每日索引时，将其加入别名，同时删除第8天前的旧索引。</p><p>这样，对于业务方来说，读取时使用的别名不变，当需要删除数据的时候，可以直接删除整个索引</p><ul><li>（3）进行索引分组</li><li>（4）使用别名过滤器来屏蔽文档，他们可以对正在执行的查询自动地实施过滤</li><li>（5）结合别名和路由，在查询或索引得时候自动地使用路由值。</li></ul><pre class="line-numbers language-none"><code class="language-none"># 创建别名POST _aliases{  "actions": [    {      "add": {        "index": "tmdb",        "alias": "movies-last",        "filter": {    # 查询条件，可选          "range": {            "id": {              "gte": 8000,              "lte": 8200            }          }        }      }    }  ]}# 使用别名查询GET movies-last/_search{  "_source": ["id","title"],   "query": {    "match_all": {}  }}# 当每天创建一个索引时，动态设置好别名，查询的操作就不需要做改动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、分词器"><a href="#七、分词器" class="headerlink" title="七、分词器"></a>七、分词器</h2><h1 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h1><p>文本分析是指将文本进行特定的过滤、分词和转换的过程。 在es进行倒排索引和进行文本搜索时，都可以预先对文本进行文本分析，经过文本分析后的结果会最后被建进倒排索引或者被发送进行真正的查询。</p><hr><p><strong>一段文本分词的步骤经过如下：</strong></p><ul><li>字符过滤器 char_filter,字符级别过滤</li><li>分词器 tokenizer,基于规则或语义切分</li><li>分词过滤器 filter，禁用词吗，同义词，大小写 等处理</li></ul><p><img src="http://dl2.iteye.com/upload/attachment/0113/2519/6d5a46ad-568e-38b9-a3b0-bb56a0b47229.png" alt="image"></p><h2 id="内置分词器"><a href="#内置分词器" class="headerlink" title="内置分词器"></a>内置分词器</h2><p><strong>Standard Analyzer</strong></p><p>根据Unicode Text Segmentation algorithm对文本进行分词，移除大多数的标点符号，将文本转为小写，并将停止词去掉。</p><p><strong>Simple Analyzer</strong></p><p>遇到非字母的符号就切分文本，并且将大写字母转为小写。</p><p><strong>Whitespace Analyzer</strong></p><p>以空白字符为切割符分割文本，不会进行大小写转换。</p><p><strong>Stop Analyzer</strong></p><p>与Simple Analyzer行为很像，只是在分词过程中过滤了停止词。</p><p><strong>Keyword AnalyzerT</strong></p><p>不对字段进行分词，将整个字段当做一个单独的分词。</p><p><strong>Pattern Analyzer</strong></p><p>允许指定一个分词切分的模式，同时支持大写字母转为小写和停止词过滤；</p><p><strong>Language Analyzers</strong></p><p>特定语言的分析器，需要指定语言。比如english 、french。</p><p><strong>Fingerprint Analyzer</strong></p><p>该分词器将输入的文本转为小写，并过滤重复的词，最后再将过滤的词重新组成文本。如果有定义停止词，那么也会移除停止词。</p><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><ul><li>安装方法1<ul><li>1、去github 下载对应的分词插件 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 根据不同版本下载不同的分词插件</li><li>2、到es的plugins 目录创建文件夹 cd your-es-root/plugins/ &amp;&amp; mkdir ik</li><li>3、解压ik分词插件到ik文件夹 unzip elasticsearch-analysis-ik-6.4.3.zip</li></ul></li><li>方法2<ul><li>./bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip</a> （替换自己的版本号:7.1.0）</li><li>安装后重启elasticsearch</li></ul></li></ul><hr><p><strong>简介</strong></p><ul><li>Elasticsearch中文分词我们采用Ik分词，ik有两种分词模式，<strong>ik_max_word</strong>,和<strong>ik_smart</strong>模式;</li><li><strong>ik_max_word</strong>: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</li><li><strong>ik_smart</strong>: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”。</li></ul><hr><p><strong>实例</strong></p><pre class="line-numbers language-none"><code class="language-none">-- 设置mapping时，定义分词器GET test_chinese/_mapping/doc{  "properties":{    "content":{      "type":"text",      "analyzer":"ik_max_word",      "search_analyzer":"ik_smart"    }  }}-- ik_max_word 分词GET /_analyze{  "analyzer": "ik_max_word",  "text": "海燕在苍茫的大海上高傲的飞翔"}-- ik_smart 分词GET /_analyze{  "analyzer": "ik_smart",  "text": "海燕在苍茫的大海上高傲的飞翔"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义词典</strong></p><pre class="line-numbers language-none"><code class="language-none">配置文件IKAnalyzer.cfg.xml。如果是在线安装方式IKAnalyzer.cfg.xml的位置在{conf}/analysis-ik/IKAnalyzer.cfg.xml离线安装在{plugins}/elasticsearch-analysis-ik-*/config/IKAnalyzer.cfg.xml&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;&lt;properties&gt;    &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;    &lt;!--用户可以在这里配置自己的扩展字典 --&gt;    &lt;entry key="ext_dict"&gt;custom/mydict.dic;custom/single_word_low_freq.dic&lt;/entry&gt;     &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;    &lt;entry key="ext_stopwords"&gt;custom/ext_stopword.dic&lt;/entry&gt;    &lt;!--用户可以在这里配置远程扩展字典 --&gt;    &lt;entry key="remote_ext_dict"&gt;location&lt;/entry&gt;    &lt;!--用户可以在这里配置远程扩展停止词字典--&gt;    &lt;entry key="remote_ext_stopwords"&gt;http://xxx.com/xxx.dic&lt;/entry&gt;&lt;/properties&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ik文本词典均是以dic结尾,换行符作为分隔,示例如下:</p><pre class="line-numbers language-none"><code class="language-none">vim myDic.dic-- 我爱中国万里长城真的想你<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改ik配置文件,将自定义的词典添加到ik配置中</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;&lt;properties&gt;    &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;    &lt;!--用户可以在这里配置自己的扩展字典 --&gt;    &lt;entry key="ext_dict"&gt;myDic.dic&lt;/entry&gt;     &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;    &lt;entry key="ext_stopwords"&gt;&lt;/entry&gt;&lt;/properties&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好后需要重启ES</p><p>通过前面教程中,我们发现短语”我爱中国”,会被分词为, “我”,”爱”,”中国”三个词, 如果按照上面词典定义后, “我爱中国”会被当成一个词语不被分词。</p><hr><h2 id="Hanlp-分词器"><a href="#Hanlp-分词器" class="headerlink" title="Hanlp 分词器"></a>Hanlp 分词器</h2><ul><li>安装插件\ ./elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip</a></li></ul><pre class="line-numbers language-none"><code class="language-none">#hanlp: hanlp默认分词#hanlp_standard: 标准分词#hanlp_index: 索引分词#hanlp_nlp: NLP分词#hanlp_n_short: N-最短路分词#hanlp_dijkstra: 最短路分词#hanlp_crf: CRF分词（在hanlp 1.6.6已开始废弃）#hanlp_speed: 极速词典分词POST _analyze{  "analyzer": "hanlp_standard",  "text": ["剑桥分析公司多位高管对卧底记者说，他们确保了唐纳德·特朗普在总统大选中获胜"]}     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其他分词器"><a href="#其他分词器" class="headerlink" title="其他分词器"></a>其他分词器</h1><ul><li>中科院计算所NLPIR <a href="http://ictclas.nlpir.org/nlpir/">http://ictclas.nlpir.org/nlpir/</a></li><li>ansj分词器 <a href="https://github.com/NLPchina/ansj_seg">https://github.com/NLPchina/ansj_seg</a></li><li>哈工大的LTP <a href="https://github.com/HIT-SCIR/ltp">https://github.com/HIT-SCIR/ltp</a></li><li>清华大学THULAC <a href="https://github.com/thunlp/THULAC">https://github.com/thunlp/THULAC</a></li><li>斯坦福分词器 <a href="https://nlp.stanford.edu/software/segmenter.shtml">https://nlp.stanford.edu/software/segmenter.shtml</a></li><li>Hanlp分词器 <a href="https://github.com/hankcs/HanLP">https://github.com/hankcs/HanLP</a></li><li>结巴分词 <a href="https://github.com/yanyiwu/cppjieba">https://github.com/yanyiwu/cppjieba</a></li><li>KCWS分词器(字嵌入+Bi-LSTM+CRF) <a href="https://github.com/koth/kcws">https://github.com/koth/kcws</a></li><li>ZPar <a href="https://github.com/frcchang/zpar/releases">https://github.com/frcchang/zpar/releases</a></li><li>IKAnalyzer <a href="https://github.com/wks/ik-analyzer">https://github.com/wks/ik-analyzer</a></li></ul><h2 id="八、文档打分机制"><a href="#八、文档打分机制" class="headerlink" title="八、文档打分机制"></a>八、文档打分机制</h2><h1 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h1><p>Elasticsearch是基于Lucene的，所以它的评分机制也是基于Lucene的。在Lucene中把这种相关性称为得分（score），确定文档和查询有多大相关性的过程被称为打分（scoring）</p><hr><h2 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h2><p>Lucene和es的打分机制是一个公式。将查询作为输入，使用不同的手段来确定每一篇文档的得分，将每一个因素最后通过公式综合起来，返回该文档的最终得分。这个综合考量的过程，就是我们希望相关的文档被优先返回的考量过程。在Lucene和es中这种相关性称为得分。 在开始计算得分之前，es使用了被搜索词条的频率和它有多常见来影响得分，从两个方面理解：</p><ul><li>一个词条在某篇文档中出现的次数越多，该文档就越相关。</li><li>一个词条如果在不同的文档中出现的次数越多，它就越不相关！</li></ul><p>我们称之为TF-IDF，TF是词频（term frequency），而IDF是逆文档频率（inverse document frequency）。</p><p>*<strong>词频：TF*</strong> 考虑一篇文档得分的首要方式，是查看一个词条在文档中出现的次数，比如某篇文章围绕es的打分展开的，那么文章中肯定会多次出现相关字眼，当查询时，我们认为该篇文档更符合，所以，这篇文档的得分会更高。</p><p>TF=freq(i,j) / maxOthers(i,j)</p><p><strong>逆文档频率：IDF</strong> 相对于词频，逆文档频率稍显复杂，如果一个词条在索引中的不同文档中出现的次数越多，那么它就越不重要。</p><p>IDF = log(N /n(i))<br>N 为所有可能推荐文档的数量，n(i)为N中关键词 i 出现过得文档的数量。</p><p><strong>TF-IDF权值 = TF 乘 IDF</strong></p><h2 id="BM25"><a href="#BM25" class="headerlink" title="BM25"></a>BM25</h2><p>BM25源于概率相关模型，而非向量空间模型</p><p>BM25同样使用词频，逆文档频率以及字段长度归一化，但是每个因子的定义都有细微差别</p><p><strong>ES5 ，默认使用BM25算分，和经典的TF-IDF相比，当TF无限增加时，BM25算分会趋于一个数值</strong></p><p>列子：</p><pre class="line-numbers language-none"><code class="language-none">DELETE newsPOST /news/_bulk{ "index": { "_id": 1 }}{ "content":"Apple Mac" }{ "index": { "_id": 2 }}{ "content":"Apple iPad" }{ "index": { "_id": 3 }}{ "content":"Apple employee like Apple Pie and Apple Juice" }# 搜索 apple, _id=3会在第一条POST news/_search{  "query": {    "bool": {      "must": {        "match":{"content":"apple"}      }    }  }}# 排除 包含pie的记录POST news/_search{  "query": {    "bool": {      "must": {        "match":{"content":"apple"}      },      "must_not": {        "match":{"content":"pie"}      }    }  }}# 通过boosting 将包含pie的权重下降，_id=3会在最后一条POST news/_search{  "query": {    "boosting": {      "positive": {        "match": {          "content": "apple"        }      },      "negative": {        "match": {          "content": "pie"        }      },      "negative_boost": 0.5    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳字段查询（Dis-Max-Query）"><a href="#最佳字段查询（Dis-Max-Query）" class="headerlink" title="最佳字段查询（Dis Max Query）"></a>最佳字段查询（Dis Max Query）</h2><p>只取分数最高的条件进行排序</p><pre class="line-numbers language-none"><code class="language-none"># 写入数据POST /arvintest/_bulk{ "index": { "_id": 1 }}{ "title":"今天是一个悲伤而又欢快的有纪念意义的节日","content":"每年都都好多的有意义，有纪念价值的节日" }{ "index": { "_id": 2 }}{ "title":"有一点点悲伤的日子","content":"今天是纪念屈原的节日" }# 将两个查询条件得分相加进行排序GET arvintest/_search{  "query": {    "bool": {      "should": [        {          "match": {            "content": "纪念屈原的节日"          }        },        {          "match": {            "title": "纪念屈原的节日"          }        }      ]    }  }}# 根据其中得分最高的条件进行排序GET arvintest/_search{  "query": {    "dis_max": {      "queries": [        {          "match": {            "content": "纪念屈原的节日"          }        },        {          "match": {            "title": "纪念屈原的节日"          }        }        ]    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、聚合分析"><a href="#九、聚合分析" class="headerlink" title="九、聚合分析"></a>九、聚合分析</h2><h1 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h1><p>ES聚合分析 类似与对关系型数据的数据进行分组，排序，求和等操作</p><hr><h2 id="聚合与搜索"><a href="#聚合与搜索" class="headerlink" title="聚合与搜索"></a>聚合与搜索</h2><p>首先要弄清楚两个概念，聚合与搜索</p><ul><li><strong>搜索</strong>即从一个索引下按照特定的字段或关键词搜索出符合用户预期的一个或者一堆cocument，然后根据文档的相关度得分，在返回的结果集里并根据得分对这些文档进行一定的排序展示</li><li><strong>聚合</strong> 即对文档中的某个或某几个字段进行数据的分组并做一些指标数据的统计分析，比如要计算一批文档中某个业务字段的总数，平均数，最大最小值等操作</li></ul><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li>Buckets(桶/集合):满足特定条件的文档的集合(类似group by)</li><li>Metrics(指标):对桶内的文档进行统计计算(例如最小值,求和,最大值等)</li></ul><p>写法</p><pre class="line-numbers language-none"><code class="language-none">GET es_order/_search{  "size": 0,  "aggs": {    "max_agg": {      "max": {&lt;!--指标关键词--&gt;        "field": "score"&lt;!--按照某个字段进行聚合--&gt;      }    }  }}聚合查询中，size可以设置为0，表示不返回ES中的文档，只返回ES聚合之后的数据，提高查询速度，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*<strong>Metrics 指标*</strong></p><ul><li>1.AVG</li><li>2 Cardinality 值去重计数</li><li>3 Stats 统计 count max min avg sum 5个值</li><li>4 Extended Stats</li><li>5 Percentiles 占比百分位对应的值统计</li><li>6 Percentile Ranks 统计值小于等于指定值的文档占比</li></ul><pre class="line-numbers language-none"><code class="language-none"># maxGET es_order/_search{  "size": 0,  "query": {       # 添加状态查询条件    "range": {      "status": {        "gt": 0,        "lt": 15      }    }  },  "aggs": {    "maxPrice": {      "max": {        "field": "amount"      }    }  }}# minGET es_order/_search{  "size": 0,  "aggs": {    "minPrice": {      "min": {        "field": "amount"      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Bucket 集合</strong></p><ul><li>1Filter</li><li>2 Range</li><li>3 Missing</li><li>4 Terms</li><li>5 Date Range</li><li>6 Global Aggregation</li><li>7 Histogram</li><li>8 Date Histogram</li><li>9 IPv4 range</li><li>10 Return only aggregation results</li></ul><pre class="line-numbers language-none"><code class="language-none"># 分组GET es_order/_search{  "size": 0,  "query": {    "range": {      "status": {        "gt": 0,        "lt": 5      }    }  },  "aggs": {    "typeGroup": {      "terms": {        "size": 100,         "field": "goods_type"      }    }  }}key为聚合的桶的名称，doc_count就是聚合的数量，有一个比较重要的地方，就是在做聚合分析的时候，该字段的mapping需要设置为不可分词才行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pipeline-聚合"><a href="#pipeline-聚合" class="headerlink" title="pipeline 聚合"></a>pipeline 聚合</h2><p>主要有如下两种管道聚合方式：</p><ul><li><p>parent 结果内嵌到现有聚合分析结果之中</p><p>Derivative（求导）</p><p>Cumultive Sum（累计求和）</p><p>Moving Function（滑动窗口）</p></li><li><p>sibling 结果现有分析结果同级</p><p>Max，min，Avg&amp;Sum Bucket</p><p>Stats ， Extened Status Bucket</p><p>Percentiles Bucket</p></li></ul><pre class="line-numbers language-none"><code class="language-none"># 平均工资最低的工作类型POST employees/_search{"size": 0,"aggs": {  "jobs": {    "terms": {      "field": "job.keyword",      "size": 10    },    "aggs": {      "avg_salary": {        "avg": {          "field": "salary"        }      }    }  },  "min_salary_by_job": {    "min_bucket": {      "buckets_path": "jobs&gt;avg_salary"    }  }}}# 平均工资最高的工作类型POST employees/_search{"size": 0,"aggs": {  "jobs": {    "terms": {      "field": "job.keyword",      "size": 10    },    "aggs": {      "avg_salary": {        "avg": {          "field": "salary"        }      }    }  },  "max_salary_by_job":{    "max_bucket": {      "buckets_path": "jobs&gt;avg_salary"    }  }}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="聚合作用范围"><a href="#聚合作用范围" class="headerlink" title="聚合作用范围"></a>聚合作用范围</h2><ul><li>1、query和filter，是先选定数据范围，在聚合桶；</li><li>2、post_filter对聚合桶没影响，桶是全部返回，只对查询结果进行过滤返回</li><li>3、global的作用是覆盖掉query的查询作用</li></ul><h2 id="课件demo代码"><a href="#课件demo代码" class="headerlink" title="课件demo代码"></a>课件demo代码</h2><pre class="line-numbers language-none"><code class="language-none">PUT /employees/{  "mappings" : {      "properties" : {        "age" : {          "type" : "integer"        },        "gender" : {          "type" : "keyword"        },        "job" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 50            }          }        },        "name" : {          "type" : "keyword"        },        "salary" : {          "type" : "integer"        }      }    }}PUT /employees/_bulk{ "index" : {  "_id" : "1" } }{ "name" : "Emma","age":32,"job":"Product Manager","gender":"female","salary":35000 }{ "index" : {  "_id" : "2" } }{ "name" : "Underwood","age":41,"job":"Dev Manager","gender":"male","salary": 50000}{ "index" : {  "_id" : "3" } }{ "name" : "Tran","age":25,"job":"Web Designer","gender":"male","salary":18000 }{ "index" : {  "_id" : "4" } }{ "name" : "Rivera","age":26,"job":"Web Designer","gender":"female","salary": 22000}{ "index" : {  "_id" : "5" } }{ "name" : "Rose","age":25,"job":"QA","gender":"female","salary":18000 }{ "index" : {  "_id" : "6" } }{ "name" : "Lucy","age":31,"job":"QA","gender":"female","salary": 25000}{ "index" : {  "_id" : "7" } }{ "name" : "Byrd","age":27,"job":"QA","gender":"male","salary":20000 }{ "index" : {  "_id" : "8" } }{ "name" : "Foster","age":27,"job":"Java Programmer","gender":"male","salary": 20000}{ "index" : {  "_id" : "9" } }{ "name" : "Gregory","age":32,"job":"Java Programmer","gender":"male","salary":22000 }{ "index" : {  "_id" : "10" } }{ "name" : "Bryant","age":20,"job":"Java Programmer","gender":"male","salary": 9000}{ "index" : {  "_id" : "11" } }{ "name" : "Jenny","age":36,"job":"Java Programmer","gender":"female","salary":38000 }{ "index" : {  "_id" : "12" } }{ "name" : "Mcdonald","age":31,"job":"Java Programmer","gender":"male","salary": 32000}{ "index" : {  "_id" : "13" } }{ "name" : "Jonthna","age":30,"job":"Java Programmer","gender":"female","salary":30000 }{ "index" : {  "_id" : "14" } }{ "name" : "Marshall","age":32,"job":"Javascript Programmer","gender":"male","salary": 25000}{ "index" : {  "_id" : "15" } }{ "name" : "King","age":33,"job":"Java Programmer","gender":"male","salary":28000 }{ "index" : {  "_id" : "16" } }{ "name" : "Mccarthy","age":21,"job":"Javascript Programmer","gender":"male","salary": 16000}{ "index" : {  "_id" : "17" } }{ "name" : "Goodwin","age":25,"job":"Javascript Programmer","gender":"male","salary": 16000}{ "index" : {  "_id" : "18" } }{ "name" : "Catherine","age":29,"job":"Javascript Programmer","gender":"female","salary": 20000}{ "index" : {  "_id" : "19" } }{ "name" : "Boone","age":30,"job":"DBA","gender":"male","salary": 30000}{ "index" : {  "_id" : "20" } }{ "name" : "Kathy","age":29,"job":"DBA","gender":"female","salary": 20000}GET employees/_search{  "query": {    "match_all": {}  }}# 单独求最小值GET employees/_search{  "size":0,   "aggs": {    "maxMoney": {      "min": {        "field": "salary"      }    }  }}# 最大值，最小值，平均值GET employees/_search{  "size": 0,  "aggs": {    "status_info": {      "stats": {        "field": "salary"      }    }  }}# 按job分桶POST employees/_search{  "size": 0,  "aggs": {    "type": {      "terms": {        "field": "job.keyword",        "size": 2      }    }  }}# 指定size，不同工种中，年纪最大的3个员工的具体信息GET employees/_search{  "size": 0,  "aggs": {    "jobs": {      "terms": {        "field": "job.keyword"      },      "aggs": {        "old_employee": {          "top_hits": {            "size": 3            , "sort": [              {                "age": {                  "order": "desc"                }              }]          }        }      }    }  }}#Salary Ranges 分桶，可以自己定义 keyGET employees/_search{  "size": 0,  "aggs": {    "salary_rang": {      "range": {        "field": "salary",        "ranges": [          {            "to": 10000          },          {            "from": 10000            , "to": 20000          },          {            "key": "&gt;20000",             "from": 20000          }        ]      }    }  }}#Salary Histogram,工资0到10万，以 5000一个区间进行分桶GET employees/_search{  "size": 0,  "aggs": {    "salary_histrogram": {      "histogram": {        "field": "salary",        "interval": 5000,        "extended_bounds": {            "min": 10000,          "max": 50000        }      }    }  }}# 多次嵌套。根据工作类型分桶，然后按照性别分桶，计算工资的统计信息GET employees/_search{  "size": 0,  "aggs": {    "em_jobs": {      "terms": {        "field": "job.keyword"      },      "aggs": {        "em_sex": {          "terms": {            "field": "gender",            "size": 10          },          "aggs": {            "em_info": {              "stats": {                "field": "salary"              }            }          }        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="按照日期分组"><a href="#按照日期分组" class="headerlink" title="按照日期分组"></a>按照日期分组</h1><pre class="line-numbers language-none"><code class="language-none"># 1.按照固定年月日进行分组 POST fy_document_list/_search{    "size": 0,     "query":{        "bool":{            "must":[                {                    "term":{                        "court.name":"重庆市江津区人民法院"                    }                },                {                  "range": {                    "trial_date_time": {                      "gt": "01/01/2000",                       "lt": "01/01/2022",                       "format": "dd/MM/yyyy||yyyy"                    }                  }                }            ]        }    },    "aggs":{        "trialDateGroup":{            "date_histogram":{                "field":"trial_date_time",                "calendar_interval":"year"            }        }    }}   # 2.自定义分组区间POST fy_document_list/_search{    "size": 0,     "query":{        "bool":{            "must":[                {                    "term":{                        "court.name":"重庆市江津区人民法院"                    }                },                {                  "range": {                    "trial_date_time": {                      "gt": "2000/01/01",                       "lt": "2022/01/01",                       "format": "yyyy/dd/MM||yyyy"                    }                  }                }            ]        }    },    "aggs":{        "trialDateGroup":{            "date_range": {              "field": "trial_date_time",              "format": "yyyy",               "ranges": [                                {                  "from": "2012",                  "to": "2013"                },                {                  "from": "2013",                  "to": "2014"                },                {                  "from": "2014",                  "to": "2015"                }              ]            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="同时对多列进行分组统计-无法对doc-count进行排序"><a href="#同时对多列进行分组统计-无法对doc-count进行排序" class="headerlink" title="同时对多列进行分组统计(无法对doc_count进行排序)"></a>同时对多列进行分组统计(无法对doc_count进行排序)</h1><pre class="line-numbers language-none"><code class="language-none">POST fy_document_list/_search{  "size": 0,   "query":{      "bool":{          "must":[              {                  "term":{                      "category_names":{                          "value":"家庭婚姻"                      }                  }              },              {                  "term":{                      "court.province":{                          "value":"湖南省"                      }                  }              },              {                  "term":{                      "court.city":{                          "value":"长沙市"                      }                  }              }          ]      }  },  "aggs":{      "group_by_field":{          "composite": {            "size": 10,             "sources": [              {                "judge_key": {                  "terms": {                    "field": "judge.name"                  }                }              },              {                "court_key":{                  "terms": {                    "field": "court.name"                  }                }              }            ]          }      }  }}# 如果加载下一页，则在sources 字段后添加 上一个请求的after字段内容"after": {   "judge_key" : "001",   "court_key" : "002"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对指定字段分组并求和-排序"><a href="#对指定字段分组并求和-排序" class="headerlink" title="对指定字段分组并求和 排序"></a>对指定字段分组并求和 排序</h1><pre class="line-numbers language-none"><code class="language-none">POST fy_lawyer_doc_item/_search{  "size": 0,   "query": {    "term": {      "court.city": {        "value": "长沙市"      }    }  },  "aggs": {      "lawyer_group": {          "terms": {              "field": "lawyer_id",              "size": 10,              "order": {                  "score_sum": "desc"              }          },          "aggs": {              "score_sum": {                  "sum": {                      "field": "score"                  }              }          }      }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、分页，遍历，并发处理"><a href="#十、分页，遍历，并发处理" class="headerlink" title="十、分页，遍历，并发处理"></a>十、分页，遍历，并发处理</h2><h1 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h1><p>具体实现案列</p><hr><h2 id="1-From-Size"><a href="#1-From-Size" class="headerlink" title="1.From, Size"></a>1.From, Size</h2><p>将查询的数据写入缓存， 当页数越深，占用内存越大会出现<strong>深度分页</strong>的问题</p><p>from，size:最大值为10000</p><pre class="line-numbers language-none"><code class="language-none">GET demo1/_search{  "from": 2,   "size": 2,   "query": {    "match_all": {}  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-earch-after"><a href="#2-earch-after" class="headerlink" title="2.earch_after"></a>2.earch_after</h2><p>避免了深度分页的问题，可以实时获取下一页的数据</p><ul><li>不支持指定页数（from）</li><li>只能往下翻</li><li>需要指定sort,并且保证值是唯一的</li></ul><pre class="line-numbers language-none"><code class="language-none">## 第一次查询添加排序字段_idPOST demo1/_search{  "size": 1,   "query": {    "match_all": {}  },  "sort": [    {      "age": "asc",      "_id":"asc"    }  ]  }## 后面的查询使用上一次查询结果当中sort的返回值POST demo1/_search{  "size": 1,   "query": {    "match_all": {}  },  "search_after":    [          11,          "R5PTdXQBQ2jxSlVAT4RO"        ]  ,  "sort": [    {      "age": "asc",      "_id":"asc"    }  ]  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Scroll-API"><a href="#3-Scroll-API" class="headerlink" title="3.Scroll API"></a>3.Scroll API</h2><ul><li>需要创建快照</li><li>有新的数据写入后，本次查询无法被实时搜索到</li><li>需要输入上一次的查询ID</li></ul><pre class="line-numbers language-none"><code class="language-none">## 创建快照（有效时间5分钟）POST /demo1/_search?scroll=5m{    "size": 1,    "query": {        "match_all" : {        }    }}## 使用创建好的IDPOST /_search/scroll{    "scroll" : "1m",    "scroll_id" : "FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFFVaUGFkWFFCUTJqeFNsVkE0SVIxAAAAAAAAeMQWeE1FUzFTN1RUcENHSDdNMDBUbWNJQQ=="}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-并发处理"><a href="#4-并发处理" class="headerlink" title="4. 并发处理"></a>4. 并发处理</h2><ul><li>ES 使用乐观锁（mysql 使用悲观锁，行锁）</li><li>使用<strong>if_seq_no ， if_primary_term</strong> 来进行控制</li></ul><pre class="line-numbers language-none"><code class="language-none">PUT products/_doc/1{  "title":"iphone",  "count":100}GET products/_doc/1PUT products/_doc/1?if_seq_no=1&amp;if_primary_term=1{  "title":"iphone",  "count":100}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当同时有多个人操作同一个文档时 <strong>if_seq_no ， if_primary_term</strong> 被使用过后，会有报错提示。</p><h2 id="十一、Logstash使用"><a href="#十一、Logstash使用" class="headerlink" title="十一、Logstash使用"></a>十一、Logstash使用</h2><h1 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h1><p>Logstash 是一个实时数据收集引擎，可收集各类型数据并对其进行分析，过滤和归纳。按照自己条件分析过滤出符合数据导入到可视化界面。 同时它也是 Elastic 栈非常重要的一部分，但是它不仅仅为 Elasticsearch 所使用。它可以介绍广泛的各种数据源。Logstash 可以帮利用它自己的Filter帮我们对数据进行解析，丰富，转换等</p><hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.newbe.pro/Mirrors/Mirrors-Logstash/">下载链接</a></p><pre class="line-numbers language-none"><code class="language-none">wget urltar xf /opt/logstash-5.6.1.tar.gz -C /usr/localmv /usr/local/logstash-5.6.1 /usr/local/logstash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="配置组成"><a href="#配置组成" class="headerlink" title="配置组成"></a>配置组成</h1><p><a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns">1.Grok插件使用说明</a><br><a href="https://blog.csdn.net/qq_34021712/article/details/79746413">2.Grok使用案例</a></p><ul><li>input 数据输入</li><li>filter 数据筛选</li><li>output 数据输出</li></ul><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><ul><li>在logstash目录下创建配置文件 arvin.conf</li><li>bin/logstash -t -f arvin.conf 测试配置文件是否可用</li><li>bin/logstash -f arvin.conf 启动</li><li>nohup bin/logstash -f arvin.conf &amp; 挂起到后台运行</li></ul><h1 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h1><p><a href="http://grokdebug.herokuapp.com/">线上测试grok测试</a></p><pre class="line-numbers language-none"><code class="language-none">input{    beats{port=&gt;"5044"}#       file{#           path=&gt;"/root/test2.log"#           start_position =&gt; "beginning"#       }}filter{        grok{                match=&gt;{"message"=&gt;"\[(?:-|%{IP:ip})\] %{IP:transfer} %{WORD:method} %{URIPATH:action}(?:%{URIPARAM:para})? HTTP/%{NUMBER:httpversion} %{HTTPDATE:timestamp} (?:-|%{NUMBER:code}) (?:-|%{NUMBER:bytes})"}        }           geoip{                source=&gt;"ip"                database=&gt;"/usr/local/logstash/GeoLite2-City_20200915/GeoLite2-City.mmdb"        }   }output{   elasticsearch {            user =&gt; elastic        password =&gt; arvinhe        hosts=&gt; "http://120.25.168.102:9200"        index =&gt; "logstash-ls-nginx-%{+YYYY.MM.dd}"       }   #   stdout{codec=&gt; rubydebug}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>input详解</li></ul><pre class="line-numbers language-none"><code class="language-none">input{#    beats{port=&gt;"5044"}   filebeat TCP 端口传输数据        # 本地文件上传        file{            path=&gt;"/root/test2.log"            start_position =&gt; "beginning"        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>filter 过滤器</li></ul><pre class="line-numbers language-none"><code class="language-none">filter{        grok{            match=&gt;{"message"=&gt;"\[(?:-|%{IP:ip})\] %{IP:transfer} %{WORD:method} %{URIPATH:action}(?:%{URIPARAM:para})? HTTP/%{NUMBER:httpversion} %{HTTPDATE:timestamp} (?:-|%{NUMBER:code}) (?:-|%{NUMBER:bytes})"}        }       geoip{               source=&gt;"ip"               database=&gt;"/usr/local/logstash/GeoLite2-City_20200915/GeoLite2-City.mmdb"       }}\[(?:-|%{IP:ip})\] : 匹配[]中的IP(真实IP)%{IP:transfer}: 转发内网IP%{WORD:method}:请求方法名%{URIPATH:action}(?:%{URIPARAM:para})? ：action方法 para参数HTTP/%{NUMBER:httpversion}: http版本号%{HTTPDATE:timestamp} :时间戳(?:-|%{NUMBER:code}) :状态码(?:-|%{NUMBER:bytes}):字节数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>output 输出</li></ul><pre class="line-numbers language-none"><code class="language-none">output{# 输出到elasticsearch    elasticsearch {            user =&gt; elastic        password =&gt; arvinhe        hosts=&gt; "http://120.25.168.102:9200"        index =&gt; "logstash-ls-nginx-%{+YYYY.MM.dd}"       }      #  控制面板输出   stdout{codec=&gt; rubydebug}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、Filebeat-使用"><a href="#十二、Filebeat-使用" class="headerlink" title="十二、Filebeat 使用"></a>十二、Filebeat 使用</h2><h1 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h1><p>Filebeat用于收集和传送日志文件，它也是最常用的Beat。 Filebeat如此高效的事实之一就是它处理背压的方式-因此，如果Logstash繁忙，Filebeat会减慢其读取速率，并在减速结束后加快节奏。 Filebeat几乎可以安装在任何操作系统上，包括作为Docker容器安装，还随附用于特定平台（例如Apache，MySQL，Docker等）的内部模块，其中包含这些平台的默认配置和Kibana对象。</p><hr><h1 id="Beats是什么"><a href="#Beats是什么" class="headerlink" title="Beats是什么?"></a>Beats是什么?</h1><p>在讲解Filebeat之前，我需要先了解一下Beats是什么 。</p><p>Elastic Stack传统上由三个主要组件（Elasticsearch，Logstash和Kibana）组成，早已脱离了这种组合，现在也可以与名为“ Beats”的第四个元素结合使用–一个针对不同用例的日志运送者系列。 现在网上有一种说法叫做ELKB，这里的B就是指的beats.</p><p>Beats是轻量级（资源高效，无依赖性，小型）和开放源代码日志发送程序的集合，这些日志发送程序充当安装在基础结构中不同服务器上的代理，用于收集日志或指标（metrics）。这些可以是日志文件（Filebeat），网络数据（Packetbeat），服务器指标（Metricbeat）或Elastic和社区开发的越来越多的Beats可以收集的任何其他类型的数据。<br>收集后，数据将直接发送到Elasticsearch或Logstash中进行其他处理。Beats建立在名为libbeat的Go框架之上，该框架用于数据转发，这意味着社区一直在开发和贡献新的Beats。</p><p><strong>而Filebeat就是Beats其中的一种，收集数据的流程Filebeat-&gt;logstash-&gt;ES</strong></p><h1 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.newbe.pro/Mirrors/Mirrors-Filebeat/">下载链接</a></p><pre class="line-numbers language-none"><code class="language-none"># 下载wget https://mirrors.huaweicloud.com/filebeat/7.8.0/filebeat-7.8.0-linux-x86_64.tar.gz# 解压tar -zxvf filebeat-7.8.0-linux-x86_64.tar.gz# 移动mv filebeat-7.8.0-linux-x86_64 /usr/local/filebeat-7.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><ul><li><p>修改yml文件</p><ul><li>paths: log日志地址</li><li>enabled：true 启动这个节点</li></ul><pre class="line-numbers language-none"><code class="language-none">filebeat.inputs:    - type: log    enabled: true    paths:        - /www/wwwlogs/addition.lvshiguan.com.log  # 日志文件的绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>发送到logstash</li></ul><pre class="line-numbers language-none"><code class="language-none">output.logstash:    hosts: ["120.25.168.102:5044"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动</p><ul><li>./filebeat -e -c filebeat.yml -d “publish”</li></ul></li></ul><h1 id="挂起到后台执行"><a href="#挂起到后台执行" class="headerlink" title="挂起到后台执行"></a>挂起到后台执行</h1><ul><li>nohup ./filebeat -e -c filebeat.yml &gt; filebeat.log &amp;</li><li>exit 退出用户<ul><li>在当shell中执行nohup成功后，还需要按终端上键盘任意键退回到shell输入命令窗口，然后通过在shell中输入exit来退出终端；如果在nohup执行成功后直接点关闭程序按钮关闭终端的话，这时候会断掉该命令所对应的session，导致nohup对应的进程被通知需要一起shutdown，起不到关掉终端后调用程序继续后台运行的作用。</li></ul></li><li>查看进程 ps -ef|grep filebeat</li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSL语法使用</title>
      <link href="2021/06/17/dsl-yu-fa-shi-yong/"/>
      <url>2021/06/17/dsl-yu-fa-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="DSL语法使用"><a href="#DSL语法使用" class="headerlink" title="DSL语法使用"></a>DSL语法使用</h2><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>查询表达式(Query DSL)是一种非常灵活又富有表现力的 查询语言。 Elasticsearch 使用它可以以简单的 JSON 接口来展现 Lucene 功能的绝大部分。在你的应用中，你应该用它来编写你的查询语句。它可以使你的查询语句更灵活、更精确、易读和易调试。</p><hr><h1 id="1-创建索引"><a href="#1-创建索引" class="headerlink" title="1.创建索引"></a>1.创建索引</h1><ul><li>使用方法通过浏览器访问kibana(如：127.0.0.1:5601 ),然后Management-&gt;Dev Tools 进入编辑器</li></ul><pre class="line-numbers language-none"><code class="language-none">// 查看所有索引信息GET _cat/indices?v// 查看fy_开头的索引GET _cat/indices/*fy_*?v// 查看集群的状态GET _cluster/health// 查看结构GET fy_lawyer_list_lsg/_mapping// 根据_id查询GET lvshixia_main/_doc/2634_1// 查看user索引的内容GET users/_search// 分组，排序GET fy_lawyer_doc_item/_search{  "_source": ["name","category_names"],  "query": {    "bool": {       "must": [        {"term" : {"name" : "张峰"}},        {"term": {"office.name" : "郯城胜利法律服务所"}}                ]              }            },    "aggs":    {      "agg_data": {        "terms": {          "field": "category_names"        }      }    }}// 使用年排序GET fy_lawyer_doc_item/_search{  "_source": ["name","trial_date_time"],  "query": {    "bool": {       "must": [        {"term" : {"name" : "张峰"}},        {"term": {"office.name" : "郯城胜利法律服务所"}}                ]              }            },    "aggs":    {      "time": {        "date_histogram":  {          "field": "trial_date_time",          "interval": "year",           "format": "yyyy"        }      }    }    }// 创建索引PUT es_index{  "settings":{    "number_of_shards": "1",    "number_of_replicas": "0",      "analysis":{         "analyzer":{        "ik":{          "tokenizer":"ik_max_word"        }      }    }  },  "mappings": {    "properties": {      "amount" : {          "type" : "float"        },        "create_time" : {          "type" : "long"        },        "goods_id" : {          "type" : "integer"        },        "goods_type" : {          "type" : "text"          ,"fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        }            }        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==数组类型==</p><ul><li>没有专用的array数据类型。默认情况下，任何字段都可以包含零个或多个值，但是，数组中的所有值都必须具有相同的数据类型。建立mapping映射时只需成单个字段一样，在插入的数据时候，插入多个值时，该字段就会自动变成数组类型的。</li><li>使用 term，match 都是查询包含关系</li></ul><h1 id="2-写入记录"><a href="#2-写入记录" class="headerlink" title="2.写入记录"></a>2.写入记录</h1><pre class="line-numbers language-none"><code class="language-none">POST test/order{  "id" : 99999,  "no" : "10000055583",  "uid" : 174124,  "lawyer_id" : 5613,  "goods_id" : 4949,  "title" : "3天电话咨询擅长婚姻/刑事/借款/劳动/交通/经济/继承/合同/房产/建材/土地/顾问/医疗/消费",  "goods_type" : "电话咨询",  "quantity" : 1,  "amount" : 98.0,  "status" : 4,  "type" : 2,  "create_time" : 1554101648}# 指定ID创建 如果ID已经存在会报错PUT users/_doc/1?op_type=create{  "user":"jack",  "post_date" : "2019-05-15T14:12:12",  "message" : "trying out Elasticsearch"}# PUT会删除原来的文档，再创建新文档，version+1PUT users/_doc/1{  "user":"arvin"}# 修改POST users/_update/1/{  "doc":{    "post_date" : "2019-06-15T14:12:12",    "message" : "2222333"  }}# 查看指定IDGET users/_doc/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-删除记录"><a href="#3-删除记录" class="headerlink" title="3.删除记录"></a>3.删除记录</h1><pre class="line-numbers language-none"><code class="language-none">DELETE test/order/206<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-组合多个搜索条件"><a href="#4-组合多个搜索条件" class="headerlink" title="4.组合多个搜索条件"></a>4.组合多个搜索条件</h1><ul><li><p>must:: 查询指定文档一定要被包含。</p></li><li><p>should:: 查询指定文档，有则可以为文档相关性加分。</p></li><li><p>must_not:: 查询指定文档一定不要被包含，不计算任何相关度分数</p></li><li><p>filter，仅仅只是按照搜索条件过滤出需要的数据而已，不计算任何相关度分数，对相关度没有任何影响</p></li><li><p>query，会去计算每个document相对于搜索条件的相关度，并按照相关度进行排序</p></li><li><p>wait_for_completion 此设置必须为<code>True</code>或<code>False</code>。此设置指定请求是应立即返回还是等待操作完成后再返回</p></li><li><p>```<br>  timeout：请求超时时长，限定在指定时长内响应（即使没查完）；<br>  from： 分页的起始行，默认0；<br>  size：分页大小；<br>  request_cache：是否缓存请求结果，默认true。<br>  terminate_after：限定每个分片取几个文档。如果设置，则响应将有一个布尔型字段terminated_early来指示查询执行是否实际已经terminate_early。缺省为no terminate_after；<br>  search_type：查询的执行方式，可选值dfs_query_then_fetch or query_then_fetch ，默认： query_then_fetch ；<br>  batched_reduce_size：一次在协调节点上应该减少的分片结果的数量。如果请求中的潜在分片数量可能很大，则应将此值用作保护机制以减少每个搜索请求的内存开销。</p><pre class="line-numbers language-none"><code class="language-none">- ```    timeout：请求超时时长，限定在指定时长内响应（即使没查完）；    from： 分页的起始行，默认0；    size：分页大小；    request_cache：是否缓存请求结果，默认true。    terminate_after：限定每个分片取几个文档。如果设置，则响应将有一个布尔型字段terminated_early来指示查询执行是否实际已经terminate_early。缺省为no terminate_after；    search_type：查询的执行方式，可选值dfs_query_then_fetch or query_then_fetch ，默认： query_then_fetch ；    batched_reduce_size：一次在协调节点上应该减少的分片结果的数量。如果请求中的潜在分片数量可能很大，则应将此值用作保护机制以减少每个搜索请求的内存开销。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```<br>  timeout：请求超时时长，限定在指定时长内响应（即使没查完）；<br>  from： 分页的起始行，默认0；<br>  size：分页大小；<br>  request_cache：是否缓存请求结果，默认true。<br>  terminate_after：限定每个分片取几个文档。如果设置，则响应将有一个布尔型字段terminated_early来指示查询执行是否实际已经terminate_early。缺省为no terminate_after；<br>  search_type：查询的执行方式，可选值dfs_query_then_fetch or query_then_fetch ，默认： query_then_fetch ；<br>  batched_reduce_size：一次在协调节点上应该减少的分片结果的数量。如果请求中的潜在分片数量可能很大，则应将此值用作保护机制以减少每个搜索请求的内存开销。</p><pre class="line-numbers language-none"><code class="language-none">- ```    timeout：请求超时时长，限定在指定时长内响应（即使没查完）；    from： 分页的起始行，默认0；    size：分页大小；    request_cache：是否缓存请求结果，默认true。    terminate_after：限定每个分片取几个文档。如果设置，则响应将有一个布尔型字段terminated_early来指示查询执行是否实际已经terminate_early。缺省为no terminate_after；    search_type：查询的执行方式，可选值dfs_query_then_fetch or query_then_fetch ，默认： query_then_fetch ；    batched_reduce_size：一次在协调节点上应该减少的分片结果的数量。如果请求中的潜在分片数量可能很大，则应将此值用作保护机制以减少每个搜索请求的内存开销。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-none"><code class="language-none">// kibana 返回结果{  "took" : 8,               // 耗时，毫秒  "timed_out" : false,      //是否超时  "_shards" : {             // 查询的分片数    "total" : 1,                "successful" : 1,    "skipped" : 0,    "failed" : 0  },  "hits" : {                //命中结果    "total" : {             //总命中数      "value" : 10000,      "relation" : "gte"    },    "max_score" : 7.0387955, //最高分数    "hits" : []              //本页结果文档数组    }}    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="query-match-查询语句"><a href="#query-match-查询语句" class="headerlink" title="query match 查询语句"></a>query match 查询语句</h1><ul><li>match all 查询到所有文档，是没有查询条件下的默认语句。</li></ul><pre class="line-numbers language-none"><code class="language-none">GET /_search{    "query": {        "match_all": {}    },    "sort": [    {      "id": {        "order": "desc"     // ID 排序      }    }  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>match 查询单个条件到所有文档 默认分词后用 or</li></ul><pre class="line-numbers language-none"><code class="language-none">GET test/_search{  "_source": ["no","id"],           // 指定返回字段  "query": {    "match": {      "title": "医疗继承交通事故"       }  }  , "highlight": {     "fields" : {            "title": {}        }  }  , "from": 2          //分页开始值  , "size": 3          //分页结束值  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>match 查询单个条件到所有文档分词后用 and</li></ul><pre class="line-numbers language-none"><code class="language-none">GET test/_search{  "query": {    "match": {      "title":{        "query": "医疗继承交通"        ,"operator": "and"         // 分词后用 and      }    }  }  , "highlight": {     "fields" : {            "title": {}        }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>match 短句精确匹配</li></ul><pre class="line-numbers language-none"><code class="language-none">// slop参数告诉match_phrase查询词条能够相隔多远时仍然将文档视为匹配GET test/_search{  "query": {    "match_phrase": {      "title": {        "query": "交通婚姻继承"        , "slop": 2                 }    }  }}//匹配条件交通、婚姻和继承必须全部出现在某个字段中。交通的位置必须比婚姻的位置大1。婚姻的位置必须比继承的位置大2。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>multi_match 查询允许做match查询的基础上同时搜索多个字段，其中一个字匹配就可以</li></ul><pre class="line-numbers language-none"><code class="language-none">//best_fields: 希望完全匹配的文档占的评分比较高，则需要使用best_fields//most_fields：希望越多字段匹配的文档评分越高//cross_fields：希望这个词条的分词词汇是分配到不同字段中的GET test/_search{  "query": {    "multi_match": {      "query": "交通工伤合同赔偿",      "fields": ["no","title"]      , "type": "best_fields"      , "tie_breaker": 0.3    }  }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="query-term-查询语句"><a href="#query-term-查询语句" class="headerlink" title="query term 查询语句"></a>query term 查询语句</h1><ul><li>term term是代表完全匹配，即不进行分词器分析，文档中必须包含整个搜索的词汇</li><li>对于多值字段,term 查询是包含，而不是等于. 比如数组值： [“1”,”2”]</li></ul><pre class="line-numbers language-none"><code class="language-none">GET test/_search{   "explain": true,  "query": {    "term": {      "no": {        "value": "10000011268"      }    }  }}//使用term要确定的是这个字段是否“被分析”(analyzed)，默认的字符串是被分析的。# 多个term条件查询，并且分组GET fy_lawyer_doc_item/_search{  "size": 0,  "query": {    "bool": {      "must": [        {"term": {"name": "曹飞跃"}},        {"term": {"office_name.keyword": "山西臻兴律师事务所"}}      ]    }  },  "aggs": {    "provinceGroup": {      "terms": {        "field": "court_province",        "size": 10,        // 这里按_count排个序        "order": {          "_count": "desc"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件</li></ul><pre class="line-numbers language-none"><code class="language-none">GET test/_search{  "query": {    "terms": {      "id": [        "1",        "2"      ]    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-bool联合查询"><a href="#5-bool联合查询" class="headerlink" title="5.bool联合查询"></a>5.bool联合查询</h1><ul><li>must 文档必须完全匹配条件</li><li>should should下面会带一个以上的条件，至少满足一个条件，这个文档就符合should</li><li>must_not 文档必须不匹配条件</li></ul><pre class="line-numbers language-none"><code class="language-none">GET es_index/_search{  "query": {   "bool": {     "must": [       {         "match_phrase": {           "text": "雷杰"         }       },       {         "match_phrase": {           "text": "雷静"         }       }     ],     "must_not": [       {         "match_phrase": {           "text": "00000015号"         }       }     ]   }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="filter-范围查询"><a href="#filter-范围查询" class="headerlink" title="filter 范围查询"></a>filter 范围查询</h1><ul><li>gt :: 大于</li><li>gte:: 大于等于</li><li>lt :: 小于</li><li>lte:: 小于等于</li></ul><pre class="line-numbers language-none"><code class="language-none">GET es_index/_search{  "_source": ["id","case_type","text"] ,  "query": {   "bool": {     "must": [       {         "match_phrase": {           "text": "房"         }       },       {         "match_phrase": {           "text": "条款"         }       }     ],     "must_not": [       {         "match_phrase": {           "text": "00000015号"         }       }     ],     "filter": [       {         "range": {           "id": {             "gte": 100           }         }       }     ]   }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不计分查询</li></ul><pre class="line-numbers language-none"><code class="language-none">GET es_order/_search{  "query": {    "constant_score": {      "filter": {        "term": {          "goods_type": "在线咨询-1天咨询"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日期查询</li></ul><pre class="line-numbers language-none"><code class="language-none">GET fy_lawyer_doc_item/_search{   "query": {        "range": {            "trial_date_time": {                "gte": "2018-06-01",                "lte": "now",                "format": "yyyy-MM-dd"            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询字段为空</li></ul><pre class="line-numbers language-none"><code class="language-none">// 查询office.id不存在的值GET fy_lawyer_doc_item/_count{  "query": {    "bool": {      "must_not": [        {          "exists": {            "field": "office.id"          }        }      ]    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><h4 id="wildcard查询"><a href="#wildcard查询" class="headerlink" title="wildcard查询"></a>wildcard查询</h4><p>wildcard查询等于sql中的like语法，只是查询数据上加*</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">GET /test1/_search{  "query": {   "wildcard": {        "message":"*wu*"     }   }}···#### 正则查询regexp可以支持正则查询，比如查询短信内容中的验证码之类···dslGET /test1/_search{  "query": {   "regexp": {        "message":"xu[0-9]"     }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>创建索引时请根据自身任务设计（字段是否分词，字段类型）</p><pre class="line-numbers language-sdl" data-language="sdl"><code class="language-sdl">PUT test1{    "settings" : {        "number_of_shards" : 10,# 设置的分片数，设置之后无法更改！        "number_of_replicas" : 1,# 是设置es缓存的刷新时间，如果写入较为频繁，但是查询对实时性要求不那么高的话，可以设置高一些来提升性能。可以更改         "refresh_interval" : "1s"# 是设置该索引库的副本数，建议设置为1以上。    },    "mappings" : {        "_doc" : {            "properties" : {                "uid" : { "type" : "long" },                "phone" : { "type" : "long" },                "message" : { "type" : "keyword" },                "msgcode" : { "type" : "long" },                 "sendtime" : {                    "type" : "date",                  "format" : "yyyy-MM-dd HH:mm:ss"   }                            }        }    }}1 store: true/false 表示该字段是否存储，默认存储。``2 doc_values: true/false 表示该字段是否参与聚合和排序。``3 index: true/false 表示该字段是否建立索引，默认建立。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cavalry.top/images/20210423140112.jpg" alt="img"></p><p>##写入数据<br>ElasticSearch可以直接新增数据，只要你指定了index(索引库名称)和type(类型)即可。在新增的时候你可以自己指定主键ID，也可以不指定，由 ElasticSearch自身生成。</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">新增数据命令示例:POST test1/_doc/1{    "uid" : "1234",    "phone" : "12345678909",    "message" : "qq",    "msgcode" : "1",    "sendtime" : "2019-03-14 01:57:04"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="通过主键ID进行修改"><a href="#通过主键ID进行修改" class="headerlink" title="通过主键ID进行修改"></a>通过主键ID进行修改</h3><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">POST test1/_doc/1{    "uid" : "1234",    "phone" : "12345678909",    "message" : "qq",    "msgcode" : "1",    "sendtime" : "2019-03-14 01:57:04"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过条件进行修改，相当于SQL更新语句的-where条件"><a href="#通过条件进行修改，相当于SQL更新语句的-where条件" class="headerlink" title="通过条件进行修改，相当于SQL更新语句的 where条件"></a>通过条件进行修改，相当于SQL更新语句的 where条件</h3><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">POST test1/_update_by_query{  "query": {    "term": {      "phone": "12345678909"    }  } ,  "script": {    "source": "ctx._source['message'] = 'xuwujing'"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加索引字段"><a href="#增加索引字段" class="headerlink" title="增加索引字段"></a>增加索引字段</h2><p>查看结构</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">GET fy_lawyer_list/_mapping# 结果{  "fy_lawyer_list" : {    "mappings" : {      "properties" : {        "address" : {          "type" : "keyword"        },        "categorys" : {          "type" : "keyword"        },        "education" : {          "type" : "keyword"        },        "email" : {          "type" : "keyword"        },        "graduated_from" : {          "type" : "keyword"        },        "id" : {          "type" : "integer"        },        "law_office_id" : {          "type" : "integer"        },        "license" : {          "type" : "keyword"        },        "name" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "office_name" : {          "type" : "text"        },        "operation_experience" : {          "type" : "keyword"        },        "phone" : {          "type" : "keyword"        },        "settle" : {          "type" : "boolean"        },        "sex" : {          "type" : "keyword"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：查看索引是否允许被修改</p><pre class="line-numbers language-none"><code class="language-none">GET news/_settings# 结果{  "fy_lawyer_list" : {    "settings" : {      "index" : {        "refresh_interval" : "30s",        "number_of_shards" : "1",        "translog" : {          "sync_interval" : "30s",          "durability" : "async"        },        "provided_name" : "fy_lawyer_list",        "creation_date" : "1612687227667",        "analysis" : {          "analyzer" : {            "default" : {              "type" : "ik_max_word"            }          }        },        "number_of_replicas" : "1",        "uuid" : "-kN0dFCqS4CFdvuOgNi4sQ",        "version" : {          "created" : "7080099"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看结果中的 read_only_allow_delete是否为true,为true时即可修改，如果为false时，说明索引时只读状态<br>添加</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">PUT fy_lawyer_list/_mapping{  "properties": {    "lvid":      {        "type":"keyword"      }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在properties里面添加lvid字段，类型为keyword</p><h2 id="复制索引"><a href="#复制索引" class="headerlink" title="复制索引"></a>复制索引</h2><pre class="line-numbers language-sdl" data-language="sdl"><code class="language-sdl">POST _reindex{    "source": {        "index": "dynamic_data_v2"    },    "dest": {        "index": "dynamic_data_v5"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改已有数据的数据类型"><a href="#更改已有数据的数据类型" class="headerlink" title="更改已有数据的数据类型"></a>更改已有数据的数据类型</h2><ol><li><p>查看源字段类型：</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">   GET fy_lawyer_list/_mapping{  "fy_lawyer_list_cp" : {    "mappings" : {      "properties" : {        "address" : {          "type" : "keyword"        },        "categorys" : {          "type" : "keyword"        },        "education" : {          "type" : "keyword"        },        "email" : {          "type" : "keyword"        },        "graduated_from" : {          "type" : "keyword"        },        "id" : {          "type" : "integer"        },        "law_office_id" : {          "type" : "integer"        },        "license" : {          "type" : "keyword"        },        "name" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "office_name" : {          "type" : "text"        },        "operation_experience" : {          "type" : "keyword"        },        "phone" : {          "type" : "keyword"        },        "settle" : {          "type" : "boolean"        },        "sex" : {          "type" : "keyword"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更改指定字段类型，新建索引fy_lawyer_list_cp</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">PUT fy_lawyer_list_cpGET text/_mapping{  "fy_lawyer_list_cp" : {    "mappings" : {      "properties" : {        "address" : {          "type" : "text"        },        "categorys" : {          "type" : "keyword"        },        "education" : {          "type" : "text"        },        "email" : {          "type" : "keyword"        },        "graduated_from" : {          "type" : "keyword"        },        "id" : {          "type" : "integer"        },        "law_office_id" : {          "type" : "integer"        },        "license" : {          "type" : "keyword"        },        "name" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "office_name" : {          "type" : "text"        },        "operation_experience" : {          "type" : "keyword"        },        "phone" : {          "type" : "keyword"        },        "settle" : {          "type" : "boolean"        },        "sex" : {          "type" : "keyword"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这里改了address和education</p></li><li><p>将fy_lawyer_list数据reindex到fy_lawyer_list_cp</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">POST /_reindex{  "source": {    "index": "fy_lawyer_list"  },  "dest": {    "index": "fy_lawyer_list_cp"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除索引blog</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">DELETE fy_lawyer_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将fy_lawyer_list数据reindex到fy_lawyer_list_cp</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">POST _reindex{  "source": {    "index": "fy_lawyer_list_cp"  },  "dest": {    "index": "fy_lawyer_list"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除索引fy_lawyer_list_cp</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">DELETE fy_lawyer_list_cp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>删除fy_lawyer_doc_item索引</p><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">DELETE /fy_lawyer_doc_item?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="根据主键删除数据"><a href="#根据主键删除数据" class="headerlink" title="根据主键删除数据"></a>根据主键删除数据</h3><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">DELETE test1/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="根据条件删除数据的命令示例："><a href="#根据条件删除数据的命令示例：" class="headerlink" title="根据条件删除数据的命令示例："></a>根据条件删除数据的命令示例：</h3><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">POST test/_delete_by_query{  "query": {      "term": {        "phone": "12345678909"      }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="根据条件删除数据的命令"><a href="#根据条件删除数据的命令" class="headerlink" title="根据条件删除数据的命令"></a>根据条件删除数据的命令</h3><pre class="line-numbers language-dsl" data-language="dsl"><code class="language-dsl">POST test/_delete_by_query{  "query": {      "term": {        "phone": "12345678909"      }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="2021/06/07/vim/"/>
      <url>2021/06/07/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim命令速查表"><a href="#Vim命令速查表" class="headerlink" title="Vim命令速查表"></a>Vim命令速查表</h1><h2 id="进入vim"><a href="#进入vim" class="headerlink" title="进入vim"></a>进入vim</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">vim filename</td><td align="left">打开或新建文件,并将光标置于第一行首</td></tr><tr><td align="left">vim +n filename</td><td align="left">打开文件，并将光标置于第n行首</td></tr><tr><td align="left">vim + filename</td><td align="left">打开文件，并将光标置于最后一行首</td></tr><tr><td align="left">vim +/pattern filename</td><td align="left">打开文件，并将光标置于第一个与pattern匹配的串处</td></tr><tr><td align="left">vim -r filename</td><td align="left">在上次正用vim编辑时发生系统崩溃，恢复filename</td></tr><tr><td align="left">vim filename….filename</td><td align="left">打开多个文件，依次编辑</td></tr></tbody></table><h2 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">列出所有选项设置情况</td></tr><tr><td align="left">term</td><td align="left">设置终端类型</td></tr><tr><td align="left">ignorance</td><td align="left">在搜索中忽略大小写</td></tr><tr><td align="left">list</td><td align="left">显示制表位(Ctrl+I)和行尾标志（$)</td></tr><tr><td align="left">number</td><td align="left">显示行号</td></tr><tr><td align="left">report</td><td align="left">显示由面向行的命令修改过的数目</td></tr><tr><td align="left">terse</td><td align="left">显示简短的警告信息</td></tr><tr><td align="left">warn</td><td align="left">在转到别的文件时若没保存当前文件则显示NO write信息</td></tr><tr><td align="left">nomagic</td><td align="left">允许在搜索模式中，使用前面不带“\”的特殊字符</td></tr><tr><td align="left">nowrapscan</td><td align="left">禁止vi在搜索到达文件两端时，又从另一端开始</td></tr><tr><td align="left">mesg</td><td align="left">允许vi显示其他用户用write写到自己终端上的信息</td></tr><tr><td align="left">:set number / set nonumber</td><td align="left">显示/不显示行号</td></tr><tr><td align="left">:set ruler /set noruler</td><td align="left">显示/不显示标尺</td></tr><tr><td align="left">:set hlsearch</td><td align="left">高亮显示查找到的单词</td></tr><tr><td align="left">:set nohlsearch</td><td align="left">关闭高亮显示</td></tr><tr><td align="left">:syntax on</td><td align="left">语法高亮</td></tr><tr><td align="left">:set nu</td><td align="left">显示行号</td></tr><tr><td align="left">:set ignorecase</td><td align="left">搜索时忽略大小写</td></tr><tr><td align="left">:set smartcase</td><td align="left">搜索时匹配大小写</td></tr><tr><td align="left">:set ruler</td><td align="left">显示光标位置坐标</td></tr><tr><td align="left">:set hlsearch</td><td align="left">搜索匹配全高亮</td></tr><tr><td align="left">:set tabstop=8</td><td align="left">设置tab大小,8为最常用最普遍的设置</td></tr><tr><td align="left">:set softtabstop=8</td><td align="left">4:4个空格,8:正常的制表符,12:一个制表符4个空格,16:两个制表符</td></tr><tr><td align="left">:set autoindent</td><td align="left">自动缩进</td></tr><tr><td align="left">:set cindent</td><td align="left">C语言格式里面的自动缩进</td></tr></tbody></table><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">k nk</td><td align="left">上 向上移动n行</td></tr><tr><td align="left">j nj</td><td align="left">下 向下移动n行</td></tr><tr><td align="left">h nh</td><td align="left">左 向左移动n行</td></tr><tr><td align="left">l nl</td><td align="left">右 向右移动n行</td></tr><tr><td align="left">Space</td><td align="left">光标右移一个字符</td></tr><tr><td align="left">Backspace</td><td align="left">光标左移一个字符</td></tr><tr><td align="left">Enter</td><td align="left">光标下移一行</td></tr><tr><td align="left">w/W</td><td align="left">光标右移一个字至字首</td></tr><tr><td align="left">b/B</td><td align="left">光标左移一个字至字首</td></tr><tr><td align="left">e或E</td><td align="left">光标右移一个字至字尾</td></tr><tr><td align="left">)</td><td align="left">光标移至句尾</td></tr><tr><td align="left">(</td><td align="left">光标移至句首</td></tr><tr><td align="left">}</td><td align="left">光标移至段落开头</td></tr><tr><td align="left">{</td><td align="left">光标移至段落结尾</td></tr><tr><td align="left">n$</td><td align="left">光标移至第n行尾</td></tr><tr><td align="left">H</td><td align="left">光标移至屏幕顶行</td></tr><tr><td align="left">M</td><td align="left">光标移至屏幕中间行</td></tr><tr><td align="left">L</td><td align="left">光标移至屏幕最后行</td></tr><tr><td align="left">0</td><td align="left">（注意是数字零）光标移至当前行首</td></tr><tr><td align="left">^</td><td align="left">移动光标到行首第一个非空字符上去</td></tr><tr><td align="left">$</td><td align="left">光标移至当前行尾</td></tr><tr><td align="left">gg</td><td align="left">移到第一行</td></tr><tr><td align="left">G</td><td align="left">移到最后一行</td></tr><tr><td align="left">f</td><td align="left">移动光标到当前行的字符a上</td></tr><tr><td align="left">F</td><td align="left">相反</td></tr><tr><td align="left">%</td><td align="left">移动到与制匹配的括号上去（），{}，[]，&lt;&gt;等</td></tr><tr><td align="left">nG</td><td align="left">移动到第n行上</td></tr><tr><td align="left">G</td><td align="left">到最后一行</td></tr></tbody></table><h2 id="屏幕滚动"><a href="#屏幕滚动" class="headerlink" title="屏幕滚动"></a>屏幕滚动</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Ctrl+e</td><td align="left">向文件首翻一行</td></tr><tr><td align="left">Ctrl+y</td><td align="left">向文件尾翻一行</td></tr><tr><td align="left">Ctrl+u</td><td align="left">向文件首翻半屏</td></tr><tr><td align="left">Ctrl+d</td><td align="left">向文件尾翻半屏</td></tr><tr><td align="left">Ctrl+f</td><td align="left">向文件尾翻一屏</td></tr><tr><td align="left">Ctrl+b</td><td align="left">向文件首翻一屏</td></tr><tr><td align="left">nz</td><td align="left">将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部</td></tr></tbody></table><h2 id="插入文本类"><a href="#插入文本类" class="headerlink" title="插入文本类"></a>插入文本类</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">在光标前</td></tr><tr><td align="left">I</td><td align="left">在当前行首</td></tr><tr><td align="left">a</td><td align="left">光标后</td></tr><tr><td align="left">A</td><td align="left">在当前行尾</td></tr><tr><td align="left">o</td><td align="left">在当前行之下新开一行</td></tr><tr><td align="left">O</td><td align="left">在当前行之上新开一行</td></tr><tr><td align="left">r</td><td align="left">替换当前字符</td></tr><tr><td align="left">R</td><td align="left">替换当前字符及其后的字符，直至按ESC键</td></tr><tr><td align="left">s</td><td align="left">从当前光标位置处开始，以输入的文本替代指定数目的字符</td></tr><tr><td align="left">S</td><td align="left">删除指定数目的行，并以所输入文本代替之</td></tr><tr><td align="left">ncw/nCW</td><td align="left">修改指定数目的字</td></tr><tr><td align="left">nCC</td><td align="left">修改指定数目的行</td></tr></tbody></table><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">x/X</td><td align="left">删除一个字符，x删除光标后的，而X删除光标前的</td></tr><tr><td align="left">dw</td><td align="left">删除一个单词(删除光标位置到下一个单词开始的位置)</td></tr><tr><td align="left">dnw</td><td align="left">删除n个单词</td></tr><tr><td align="left">dne</td><td align="left">也可，只是删除到单词尾</td></tr><tr><td align="left">do</td><td align="left">删至行首</td></tr><tr><td align="left">d$</td><td align="left">删至行尾</td></tr><tr><td align="left">dd</td><td align="left">删除一行</td></tr><tr><td align="left">ndd</td><td align="left">删除当前行及其后n-1行</td></tr><tr><td align="left">dnl</td><td align="left">向右删除n个字母</td></tr><tr><td align="left">dnh</td><td align="left">向左删除n个字母</td></tr><tr><td align="left">dnj</td><td align="left">向下删除n行,当前行+其上n行</td></tr><tr><td align="left">dnk</td><td align="left">向上删除n行,当期行+其下n行</td></tr><tr><td align="left">cnw[word]</td><td align="left">将n个word改变为word</td></tr><tr><td align="left">C$</td><td align="left">改变到行尾</td></tr><tr><td align="left">cc</td><td align="left">改变整行</td></tr><tr><td align="left">shift+j</td><td align="left">删除行尾的换行符，下一行接上来了</td></tr></tbody></table><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">p</td><td align="left">粘贴用x或d删除的文本</td></tr><tr><td align="left">ynw</td><td align="left">复制n个单词</td></tr><tr><td align="left">yy</td><td align="left">复制一行</td></tr><tr><td align="left">ynl</td><td align="left">复制n个字符</td></tr><tr><td align="left">y$</td><td align="left">复制当前光标至行尾处</td></tr><tr><td align="left">nyy</td><td align="left">拷贝n行</td></tr></tbody></table><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">u</td><td align="left">撤销前一次的操作</td></tr><tr><td align="left">shif+u(U)</td><td align="left">撤销对该行的所有操作</td></tr></tbody></table><h2 id="搜索及替换"><a href="#搜索及替换" class="headerlink" title="搜索及替换"></a>搜索及替换</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">/pattern</td><td align="left">从光标开始处向文件尾搜索pattern</td></tr><tr><td align="left">?pattern</td><td align="left">从光标开始处向文件首搜索pattern</td></tr><tr><td align="left">n</td><td align="left">在同一方向重复上一次搜索命令</td></tr><tr><td align="left">N</td><td align="left">在反方向上重复上一次搜索命令</td></tr><tr><td align="left">cw newword</td><td align="left">替换为newword</td></tr><tr><td align="left">n</td><td align="left">继续查找</td></tr><tr><td align="left">.</td><td align="left">执行替换</td></tr><tr><td align="left">:s/p1/p2/g</td><td align="left">将当前行中所有p1均用p2替代,g表示执行 用c表示需要确认</td></tr><tr><td align="left">:n1,n2 s/p1/p2/g</td><td align="left">将第n1至n2行中所有p1均用p2替代</td></tr><tr><td align="left">:g/p1/s//p2/g</td><td align="left">将文件中所有p1均用p2替换</td></tr><tr><td align="left">:1,$ s/string1/string2/g</td><td align="left">在全文中将string1替换为string2</td></tr></tbody></table><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">m[a-z]</td><td align="left">在文中做标记，标记号可为a-z的26个字母</td></tr><tr><td align="left">`a</td><td align="left">移动到标记a处</td></tr></tbody></table><h2 id="visual模式"><a href="#visual模式" class="headerlink" title="visual模式"></a>visual模式</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">v</td><td align="left">进入visual 模式</td></tr><tr><td align="left">V</td><td align="left">进入行的visual 模式</td></tr><tr><td align="left">ctrl+v</td><td align="left">进如块操作模式用o和O改变选择的边的大小</td></tr><tr><td align="left">在所有行插入相同的内容如include&lt;</td><td align="left">将光标移到开始插入的位置，按CTRL+V进入VISUAL模式，选择好模块后按I（shift+i)，后插入要插入的文本，按[ESC]完成</td></tr></tbody></table><h2 id="行方式命令"><a href="#行方式命令" class="headerlink" title="行方式命令"></a>行方式命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:n1,n2 co n3</td><td align="left">将n1行到n2行之间的内容拷贝到第n3行下</td></tr><tr><td align="left">:n1,n2 m n3</td><td align="left">将n1行到n2行之间的内容移至到第n3行下</td></tr><tr><td align="left">:n1,n2 d</td><td align="left">将n1行到n2行之间的内容删除</td></tr><tr><td align="left">:n1,n2 w!command</td><td align="left">将文件中n1行至n2行的内容作为command的输入并执行之 若不指定n1，n2，则表示将整个文件内容作为command的输入</td></tr></tbody></table><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">q[a-z]</td><td align="left">开始记录但前开始的操作为宏，名称可为【a-z】，然后用q终止录制宏</td></tr><tr><td align="left">reg</td><td align="left">显示当前定义的所有的宏，用@[a-z]来在当前光标处执行宏[a-z]</td></tr></tbody></table><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:split</td><td align="left">分割一个窗口</td></tr><tr><td align="left">:split file.c</td><td align="left">为另一个文件file.c分隔窗口</td></tr><tr><td align="left">:nsplit file.c</td><td align="left">为另一个文件file.c分隔窗口，并指定其行数</td></tr><tr><td align="left">ctrl＋w</td><td align="left">在窗口中切换</td></tr><tr><td align="left">:close</td><td align="left">关闭当前窗口</td></tr></tbody></table><h2 id="文件及其他"><a href="#文件及其他" class="headerlink" title="文件及其他"></a>文件及其他</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:q</td><td align="left">退出vi</td></tr><tr><td align="left">:q!</td><td align="left">不保存文件并退出vi</td></tr><tr><td align="left">:e filename</td><td align="left">打开文件filename进行编辑</td></tr><tr><td align="left">:e!</td><td align="left">放弃修改文件内容，重新载入该文件编辑</td></tr><tr><td align="left">:w</td><td align="left">保存当前文件</td></tr><tr><td align="left">:wq</td><td align="left">存盘退出</td></tr><tr><td align="left">:ZZ</td><td align="left">保存当前文档并退出VIM</td></tr><tr><td align="left">:!command</td><td align="left">执行shell命令command</td></tr><tr><td align="left">:r!command</td><td align="left">将命令command的输出结果放到当前行</td></tr><tr><td align="left">:n1,n2 write temp.c</td><td align="left"></td></tr><tr><td align="left">:read file.c</td><td align="left">将文件file.c的内容插入到当前光标所在的下面</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="2021/06/07/git/"/>
      <url>2021/06/07/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p>经常用到Git，但是很多命令记不住，将其整理于此。（大量摘自网络）</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要要记住60~100个命令。</p><p><img src="http://img.saodiyang.com/FlWMWzIX9WE7PW-7eyeq8uaEJ_3p.png" alt="git常用命令"></p><p>git常用命令</p><p>下面整理的 Git 命令清单。几个专业名词的译名如下。</p><pre class="line-numbers language-none"><code class="language-none">Workspace：工作区Index / Stage：暂存区Repository：仓库区（本地仓库）Remote：远程仓库xml复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新建版本仓库"><a href="#新建版本仓库" class="headerlink" title="新建版本仓库"></a>新建版本仓库</h2><pre class="line-numbers language-none"><code class="language-none"># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史, -o 给远程仓库起名:faker,默认origin$ git clone [-o faker] [url]bash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre class="line-numbers language-none"><code class="language-none"># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"# 设置大小写敏感（windows不区分大小写的解决办法）$ git config core.ignorecase  falsebash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><pre class="line-numbers language-none"><code class="language-none"># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]bash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><pre class="line-numbers language-none"><code class="language-none"># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...bash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><pre class="line-numbers language-none"><code class="language-none"># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 列出所有本地分支，并展示没有分支最后一次提交的信息$ git branch -v# 列出所有本地分支，并展示没有分支最后一次提交的信息和远程分支的追踪情况$ git branch -vv# 列出所有已经合并到当前分支的分支$ git branch --merged# 列出所有还没有合并到当前分支的分支$ git branch --no-merged# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个与远程分支同名的分支，并切换到该分支$ git checkout --track [branch-name]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream-to=[remote-branch]$ git branch --set-upstream [branch] [remote-branch] # 已被弃用# 合并指定分支到当前分支$ git merge [branch]# 中断此次合并（你可能不想处理冲突）$ git merge --abort# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]#新增远程分支 远程分支需先在本地创建,再进行推送$ git push origin [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]bash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><pre class="line-numbers language-none"><code class="language-none"># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]bash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看信息-搜索"><a href="#查看信息-搜索" class="headerlink" title="查看信息/搜索"></a>查看信息/搜索</h2><pre class="line-numbers language-none"><code class="language-none"># 显示有变更的文件$ git status [-sb] #s:short,给一个短格式的展示，b:展示当前分支# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 图形化显示所有分支$ git log --oneline --graph --all# 显示在分支2而不在分支1中的提交$ git log [分支1]..[分支2]$ git log ^[分支1] [分支2]$ git log [分支2] --not [分支1]# 显示两个分支不同时包含的提交$ git log [分支1]...[分支2]# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog# 搜索你工作目录的文件，输出匹配行号$ git grep -n [关键字]# 搜索你工作目录的文件，输出每个文件包含多少个匹配$ git grep --count [关键字]# 优化阅读$ git grep --break --heading [关键字]# 查询iCheck这个字符串那次提交的$ git log -SiCheck --oneline# 查询git_deflate_bound函数每一次的变更$ git log -L :git_deflate_bound:zlib.cbash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><pre class="line-numbers language-none"><code class="language-none"># 下载远程仓库的所有变动 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin$ git fetch [shortname]# 显示所有远程仓库$ git remote -v#显式地获得远程引用的完整列表 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin$ git ls-remote [shortname]# 显示某个远程仓库的信息 [remote] 为远程仓库的shortname, 如origin$ git remote show [shortname]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 重命名一个远程仓库（shortname）$ git remote rename [旧仓库名] [新仓库名]# 删除一个远程链接$ git remote rm [shortname] [url]$ git remote remove [shortname] [url]# 修改远程仓库地址$ git remote set-url [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地当前分支到远程仓库git push [remote]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 推送所有分支到远程仓库$ git push [remote] --all# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --forcebash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre class="line-numbers language-none"><code class="language-none"># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .#只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本$ git reset &lt;commit_id&gt;   #默认为 --mixed模式$ git reset --mixed &lt;commit_id&gt;#保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本$ git reset --soft &lt;commit_id&gt;#源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本$ git reset --hard &lt;commit_id&gt;# 恢复到最后一次提交的状态$ git reset --hard HEAD# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 将工作区和暂存区的代码全都存储起来了$ git stash [save]# 只保存工作区，不存储暂存区$ git stash --keep-index# 存储工作区、暂存区和未跟踪文件$ git stash -u$ git stash --include-untracked# 不存储所有改动的东西，但会交互式的提示那些改动想要被储藏、哪些改动需要保存在工作目录中$ git stash --patch# 不指定名字，Git认为指定最近的储藏，将存储的代码（工作区和暂存区）都应用到工作区$ git stash apply [stash@{2}]# 存储的工作区和暂存区的代码应用到工作区和暂存区$ git stash apply [stash@{2}] --index# 将存储的代码（工作区和暂存区）都应用到工作区，并从栈上扔掉他$ git stash pop# 删除stash@{2}的存储$ git stash drop [stash@{2}]# 获取储藏的列表$ git stash list# 移除工作目录中所有未跟踪的文件及口口那个的子目录，不会移除.gitiignore忽略的文件$ git clean -f -dbash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-none"><code class="language-none"># 生成一个可供发布的压缩包$ git archivebash复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="2021/06/07/pa-chong/"/>
      <url>2021/06/07/pa-chong/</url>
      
        <content type="html"><![CDATA[<h5 id="requests库的七个主要方法"><a href="#requests库的七个主要方法" class="headerlink" title="requests库的七个主要方法"></a>requests库的七个主要方法</h5><table><thead><tr><th align="left">方法</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">requests.request()</td><td align="left">构造一个请求，支持以下各种方法</td></tr><tr><td align="left">requests.get()</td><td align="left">获取html的主要方法</td></tr><tr><td align="left">requests.head()</td><td align="left">获取html头部信息的主要方法</td></tr><tr><td align="left">requests.post()</td><td align="left">向html网页提交post请求的方法</td></tr><tr><td align="left">requests.put()</td><td align="left">向html网页提交put请求的方法</td></tr><tr><td align="left">requests.patch()</td><td align="left">向html提交局部修改的请求</td></tr><tr><td align="left">requests.delete()</td><td align="left">向html提交删除请求</td></tr></tbody></table><h5 id="返回Response对象"><a href="#返回Response对象" class="headerlink" title="返回Response对象"></a>返回Response对象</h5><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即，url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式（如果header中不存在charset，则认为编码为ISO-8859-1）</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析的响应内容编码方式（备选编码方式</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制形式</td></tr><tr><td>r.raise_for_status()</td><td>发出错误的请求</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql</title>
      <link href="2021/06/07/mysql/"/>
      <url>2021/06/07/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库服务端操作"><a href="#数据库服务端操作" class="headerlink" title="数据库服务端操作"></a>数据库服务端操作</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>sudo apt-get install mysql-server</td><td>安装数据库服务端</td></tr><tr><td>sudo apt-get instarll mysql-client</td><td>安装数据库客户端</td></tr><tr><td>sudo service mysql status</td><td>查看mysql服务状态</td></tr><tr><td>sudo service mysql stop</td><td>停止mysqk服务</td></tr><tr><td>sudo service mysql start</td><td>启动mysql服务</td></tr><tr><td>sudo service mysql restart</td><td>重启mysql服务</td></tr></tbody></table><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>**数值: **</p><p><strong>整形:</strong></p><p>int、tinyint、bigint  </p><p><strong>浮点型:</strong></p><p>float：单精度型 只保证6位有效数字</p><p>double: 双精度型，只保证16位有效数字的准确性</p><p>decimal: 定点数,其中dicimal(5,2)代表共5位数字，其中2位是小数，</p></li><li><p><strong>日期/时间:</strong></p><p>date  年-月-日</p><p>datetime 年-月-日  时:分:秒       保存是时间范围: ‘1000-01-01 00:00:00’ 到’9999-12-31 23:59:59’</p><p>timestamp 年-月-日 时:分:”秒   保存是时间范围: ‘1970-01-01 00:00:01’ 到’2038-01-19 03:14:07’</p></li><li><p><strong>字符串:</strong> </p><p>char:适用于知道固定长度的字符串</p><p>varchar: 适用于不知道固定长度的字符串</p><p>尽量使用varchar</p><p>超过255字节的只能有varchar或者text,能用varchar的地方不用text.</p></li><li><p><strong>枚举类型:</strong></p><p>gender enum(‘男’, ‘女’,’妖’)</p></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><table><thead><tr><th>约束类型</th><th>约束说明</th></tr></thead><tbody><tr><td>not null</td><td>非空约束(设置非空约束，该字段不能为空)</td></tr><tr><td>primary key</td><td>主键约束(唯一性，非空性)</td></tr><tr><td>unique key</td><td>唯一约束(唯一性，可以空，但只能有一个)</td></tr><tr><td>default</td><td>默认约束(该数据的默认值)</td></tr><tr><td>foreign key</td><td>外键约束(需要建立两表间的关系)</td></tr></tbody></table><h2 id="登录与退出数据库命令"><a href="#登录与退出数据库命令" class="headerlink" title="登录与退出数据库命令"></a>登录与退出数据库命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>mysql -u用户名 -p密码</td><td>连接数据库</td></tr><tr><td>exit/quit/ctrl + d</td><td>退出数据库</td></tr><tr><td>select version();</td><td>查看版本休息</td></tr><tr><td>select now();</td><td>查看时间</td></tr></tbody></table><h2 id="数据库基本操作命令"><a href="#数据库基本操作命令" class="headerlink" title="数据库基本操作命令"></a>数据库基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>show create database 数据库名</td><td>查看创建数据库的语句</td><td>show create database python;</td></tr><tr><td>show databases()</td><td>查看所有数据库</td><td>show databases();</td></tr><tr><td>select database()</td><td>查看当前使用的数据库</td><td>select database();</td></tr><tr><td>create database 数据库名 charset=utf-8;</td><td>创建数据库</td><td>create database python charset=utf-8;</td></tr><tr><td>use 数据库名;</td><td>使用数据库</td><td>use python;</td></tr><tr><td>drop database 数据库名;</td><td>删除数据库</td><td>drop database python;</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建数据库 数据库中数据的编码采用的是安装数据库时指定的默认编码 utf8</span>CREATE DATABASE day21_1<span class="token punctuation">;</span><span class="token comment"># 创建数据库 并指定数据库中数据的编码</span>CREATE DATABASE day21_1 CHARACTER SET utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库基本操作命令-1"><a href="#数据库基本操作命令-1" class="headerlink" title="数据库基本操作命令"></a>数据库基本操作命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>show tables;</td><td>查看当前数据库中所有表</td></tr><tr><td>desc 表名;</td><td>查看表结构</td></tr><tr><td>show create table 表名；</td><td>查看表的创建语句</td></tr></tbody></table><h3 id="表结构相关语句"><a href="#表结构相关语句" class="headerlink" title="表结构相关语句"></a>表结构相关语句</h3><ul><li><p>创建表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 格式:create table 表名(字段名 类型(长度) 约束,    字段名 类型(长度) 约束)# 例如 创建分类表create table sort( sid INT, # 分类ID sname VARCHAR(100) # 分类名称)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看数据库所有表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看数据库中的所有表# 格式show tables;# 查看表结构# 格式: desc 表名;# 例如:desc sort;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 格式：drop table 表名;# 例如:drop table sort;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改表结构格式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add 列名 类型(长度) 约束;# 作用: 修改表添加列# 例如:# 1. 为分类表添加一个新的字段为分类描述 varchar(20)alter table sort add sdesc varchar(20);alter table 表名 modify 列名 类型(长度) 约束;# 作用: 修改表修改列的类型长度及约束# 例如:# 2. 为分类表的分类名称字段进行修改, 类型varchar(50) 添加约束 not nullalter table sort modify sname varchar(50) not null;alter table 表名 change 旧列名 新列名 类型(长度) 约束;# 作用: 修改表修改列名# 例如:# 3. 为分类表的分类名称字段进行更换, 更换为snamesname varchar(30)alter table sort change sname snamename varchar(30);alter table 表名 drop 列名;# 作用: 修改表删除列# 例如:# 4. 删除分类表中snamename这列alter table sort drop snamename;rename table 表名 to 新表名# 作用: 修改表名# 例如:# 5. 为分类表sort改名为categoryrename table sort to categoryalter table 表名 character set 字符集# 作用:修改表的字符集# 例如:# 6. 为分类表category的编码进行修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数据表结构修改命令"><a href="#数据表结构修改命令" class="headerlink" title="数据表结构修改命令"></a>数据表结构修改命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>alter table 表名 add 列名 类型;</td><td>添加字段</td></tr><tr><td>alter table 表名 change 原名  新名  类型及约束</td><td>重命名字段</td></tr><tr><td>alter table 表名 modify 列名  类型及约束</td><td>修改字段类型</td></tr><tr><td>alter table 表名 drop 列名；</td><td>删除字段</td></tr><tr><td>drop table 表名;</td><td>删除表</td></tr><tr><td>alter table &lt;旧表名&gt; rename to &lt;新表名&gt;</td><td>修改表的名字</td></tr></tbody></table><h2 id="表数据操作命令"><a href="#表数据操作命令" class="headerlink" title="表数据操作命令"></a>表数据操作命令</h2><p><strong>添加数据</strong></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>insert into 表名  values(…);</td><td>全列插入：值的顺序与表结构字段的顺序完全一一对应</td></tr><tr><td>insert into 表名(列1,..)values(值1,…);</td><td>部分列插入: 值的顺序与给出的列顺序对应</td></tr><tr><td>insert into 表名 values(…),(…)</td><td>一次性插入多行数据</td></tr><tr><td>insert into 表名(列1,…) values(值1,…),(值1,…),…;</td><td>部分列多行插入</td></tr></tbody></table><p><strong>修改查询数据</strong></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>select * from 表名;</td><td>查询所有列数据</td></tr><tr><td>select 列1,列2,… from 表名;</td><td>查询指定列数据</td></tr><tr><td>select distinct</td><td>去重查询</td></tr><tr><td>update 表名 set 列1=值，列2=值… where 条件;</td><td>修改数据</td></tr></tbody></table><p><strong>删除数据</strong></p><p> 物理删除</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>delete from 表名 where 条件</td><td>删除数据</td></tr></tbody></table><p>逻辑删除</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>alter table 表名 add is_delete bit default 0；</td><td>增加一个字段，用这个字端来表示这条信息是否已经不能再使用</td></tr><tr><td>update 表名 set is_delete=1 where 条件</td><td>修改字段，当为1时表示这条信息不能使用</td></tr></tbody></table><h2 id="where之比较运算查询"><a href="#where之比较运算查询" class="headerlink" title="where之比较运算查询"></a>where之比较运算查询</h2><ul><li><p>where语句的作用</p><p>使用where子句对表中的数据筛选,结果为true的记录会出现在结果集中</p><p>语法:</p><p>select * from 表名 where 条件;</p></li><li><p>常见的比较运算符</p><p>等于：=</p><p>大于：&gt;</p><p>大于等于: &gt;=</p><p>小于: &lt;</p><p>小于等于: &lt;=</p><p>不等于: != 或 &lt;&gt;</p></li></ul><h2 id="where之逻辑运算查询"><a href="#where之逻辑运算查询" class="headerlink" title="where之逻辑运算查询"></a>where之逻辑运算查询</h2><ul><li><p>逻辑运算符</p><p>and 表示有多个条件时，多个条件必须同时成立(值为True)</p><p>or 表示有多个条件时，满足任意一个条件时成立</p><p>not 表示取反操作</p><p>注意：使用”()”运算符优先级问</p></li></ul><h2 id="where之模糊查询"><a href="#where之模糊查询" class="headerlink" title="where之模糊查询"></a>where之模糊查询</h2><ul><li><p>模糊查询</p><p>模糊查询关键字:</p><p>like</p><p>like后跟:</p><p>% 表示任意多个任意字符</p><p>_ 表示一个任意字符</p></li></ul><h2 id="where之范围查询"><a href="#where之范围查询" class="headerlink" title="where之范围查询"></a>where之范围查询</h2><ul><li><p>范围查询</p><p>in 表示在一个非连续的范围内</p><p>between…and…表示在一个连续的范围内</p><p>注意：</p><p><strong>between A and B 在匹配数据的时候匹配的范围空间是[A, B]</strong></p></li></ul><h2 id="where之空值查询"><a href="#where之空值查询" class="headerlink" title="where之空值查询"></a>where之空值查询</h2><ul><li><p>判断为空</p><p>判断为空: is null</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from students where height is null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意: null 与’’是不同的</strong></p></li><li><p>判断非空</p><p>判断非空: is not null</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from students where height is not null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意: is not null 顺序不要错误</strong></p></li></ul><h2 id="order排序查询"><a href="#order排序查询" class="headerlink" title="order排序查询"></a>order排序查询</h2><ul><li><p>排序查询语法:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 order by 列1 asc|desc [,列2 asc|desc]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法说明:</p><ul><li>将行数据按照列1进行排序，如果某项行列1的值相同时，则按照列2排序，以此类推</li><li>asc从小到大排序，即升序</li><li>desc从大到小排序，即降序</li><li>默认按照列值从小到大排序(即asc关键字)</li></ul></li></ul><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul><li><p>聚合函数</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>count(字段)</td><td>计算总行数</td></tr><tr><td>max(字段)</td><td>求此字段的最大值</td></tr><tr><td>min(字段)</td><td>求此字段的最小值</td></tr><tr><td>sum(字段)</td><td>求此字段之和</td></tr><tr><td>avg(字段)</td><td>求此字段平均值</td></tr></tbody></table></li><li><p>聚合函数的作用</p><p><strong>聚合函数的作用：聚合函数会把当前所在表当做一个组进行统计</strong></p><p>聚合函数有以下几个特点:</p><ul><li>每个组哈数接收一个参数(字段名或者表达式)</li><li>统计结果默认忽略字段为NULL的记录</li><li>不允许出现嵌套 比如sum(max(xx))</li><li>round()四舍五入 : round(avg(age), 2)</li></ul></li></ul><h2 id="group-分组查询"><a href="#group-分组查询" class="headerlink" title="group 分组查询"></a>group 分组查询</h2><ul><li><p>什么是分组</p><p>所谓的分组就是讲一个”数据集”划分成若干个”小区域”，然后针对若干个”小区域”进行数据处理</p><p><strong>group by分组</strong></p><ul><li><p>使用特点</p><p>group by的含义: 将查询结果按照1个或多个字段进行分组，字段值相同为一组</p><p>group by可用于单个字段分组，也可用于多个字段分组</p></li></ul><p><strong>group by + group_concat()</strong></p><ul><li>group_concat(字段名)作用: 根据分组结果，使用group_concat()来放置每一个分组中某字段的集合</li><li>select group_concat(name),gender from students group by gender;</li></ul><p><strong>group by + 聚合函数</strong></p><ul><li>作用: 聚合函数在和group by结合使用时候，统计的对象是每一个分组</li></ul><p><strong>group by + having</strong></p><ul><li>having作用好where类似，但having只能用于group by对分组后的每组数据过滤，而where是用来过滤表的数据</li><li>select group_concat(name),gender from students group by gender having avg(age) &gt; 30;</li></ul><p><strong>group by + with rollup 汇总的作用:</strong></p><ul><li><p><strong>with rollup</strong>的作用是: 在数据表最后新增一行，来记录当前表中该字段对应的操作结果，一般是汇总结果</p></li><li><p>select count(*), gender from students group by gender with rollup;</p></li></ul></li></ul><h2 id="limit限制查询"><a href="#limit限制查询" class="headerlink" title="limit限制查询"></a>limit限制查询</h2><ul><li><p>limit限制查询</p><p>可以使用limit限制取出记录的数量，但limit要写在sql语句的最后</p><p>语法：</p><p>​    limit 起始记录，记录数</p><p>说明: </p><ul><li>起始记录是指从第几条记录开始取，第一天记录的下标为0</li><li>记录数是指从起始记录开始向后依次取的记录数</li></ul></li></ul><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul><li><p>连接查询</p><p>mysql支持三种类型的连接查询，分别为：</p><ul><li><p>内连接查询</p><p>查询结果为两个表符合条件匹配到的数据</p><p>语法：</p><p>select 字段from 表1 inner join 表2 on 表1.字段1=表2.字段2</p><p>注意: </p><ol><li><p>内连接： 根据链接条件取出两个表”交集”</p><ol start="2"><li>on 是连接条件 where是连接后筛选条件</li></ol></li></ol></li></ul></li><li><p>外连接查询</p><ul><li><p>左连接</p><p>左(外)连接查询：查询的结果为两个表匹配到的数据和左表特有的数据</p><p>注意：对于右表中不存在的数据使用null填充</p><p><strong>使用left join实际上左边表的所有数据都会显示出来</strong></p></li><li><p>右连接</p><p>右(外)连接查询：查询的结果为两个表匹配到的数据和右表特有的数据</p><p>注意：对于左表中不存在的数据使用null填充</p></li></ul><p>语法：</p><p>​    左连接：主表 left join 从表 on 连接条件;</p><p>​    右连接:   从表 right join 主表 on 连接条件;</p><p>注意：</p><p>​    能够使用连接的前提是，多表之间有字段上的关联</p><p>​    左连接和右连接区别在于主表在SQL语句中的位置，因此实际左连接就可以满足常见需求</p></li><li><p>自连接查询</p><p>从sql文件中导入文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">source areas.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">使用自连接查询只需要使用一个表，可以加快查询速度，减少数据表占用空间  **自连接查询本质还是连接查询**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询：把一个查询的结果当做另一查询的条件</p><p>子查询分为三类：</p><ul><li>标量子查询：子查询返回的结果是一个数据(一行一列)</li><li>列子查询：返回的结果是一列(一列多行)</li><li>行子查询: 返回的结果是一行(一行多列)</li></ul><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>alter table 表名 add foreign key (列名) references 表名(列名)</td><td>给表增加外键</td></tr><tr><td>show create table 表名</td><td>获取外键名称</td></tr><tr><td>alter table 表名 drop foreign key 外键约束名称</td><td>删除外键</td></tr></tbody></table><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>create view 视图名称 as select语句</td><td>定义视图</td></tr><tr><td>show tables;</td><td>查看视图</td></tr><tr><td>select * from v_goods_info;</td><td>使用视图</td></tr><tr><td>drop view 视图名称</td><td>删除视图</td></tr></tbody></table><h3 id="视图意义"><a href="#视图意义" class="headerlink" title="视图意义"></a>视图意义</h3><ol><li>视图可以节省SQL语句: 将一条复杂的查询语句使用视图进行保存: 以后可以直接对视图进行操作</li><li>数据安全: 视图操作是主要针对查询的, 如果对视图结构进行处理(删除), 不会影响基表数据(相对安全).</li><li>视图往往是在大项目中使用, 而且是多系统使用: 可以对外提供有用的数据, 但是隐藏关键(无用)的数据: 数据安全</li><li>视图可以对外提供友好型: 不同的视图提供不同的数据, 对外好像专门设计</li><li>视图可以更好(容易)的进行权限控制</li></ol><h3 id="视图数据操作"><a href="#视图数据操作" class="headerlink" title="视图数据操作"></a>视图数据操作</h3><p>视图是的确可以进行数据写操作的: 但是有很多限制</p><p>将数据直接在视图上进行操作.</p><ul><li><p>新增数据</p><p>数据新增就是直接对视图进行数据新增.</p><ol><li>多表视图不能新增数据</li><li>可以向单表视图插入数据: 但是视图中包含的字段必须有基表中所有不能为空(或者没有默认值)字段</li><li>视图是可以向基表插入数据的.</li></ol></li><li><p>删除数据</p><p>多表视图不能删除数据</p><p>单表视图可以删除数据</p></li><li><p>更新数据</p><p>理论上不能单表视图还是多表示视图都可以更新数据.</p><p>更新限制: with check option, 如果对视图在新增的时候,限定了某个字段有限制: 那么在对视图进行数据更新操作时,系统会进行验证: 要保证更新之后,数据依然可以被实体查询出来,否则不让更新.</p></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>事务四大特性ACID<ol><li>原子性：一个事物必须被视为一个不可分割的最小工作单元，整个事物中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</li><li>一致性：数据库总是从一个一致性的状态转换到另一个一致性的状态</li><li>隔离性：通常来说，一个事务所做的修改在最终提交之前，对其他事务是不可见的</li><li>持久性：一旦事务提交，则其所做的修改会永久保存到数据库中</li></ol></li></ul><ul><li><p>事务操作分为两种: 自动事务(默认的), 手动事务</p><p><strong>手动事务操作流程:</strong></p></li></ul><ol><li>开启事务: 告诉系统以下所有的操作(写)不要直接写入到数据表, 先存放到事务日志</li></ol><p>start transaction;</p><ol start="2"><li><p>进行事务操作：一系列操作</p></li><li><p>关闭事务: 选择性的将日志文件中操作的结果保存到数据表(同步)或者说直接清空事务日志(原来操作全部清空)</p><p>a） 提交事务, 同步数据表(操作成功):commit;</p><p>b)    回滚事务，直接清空日志表(操作失败):rollback;</p></li></ol><ul><li>自动事务处理</li></ul><p>在mysql中: 默认的都是自动事务处理, 用户操作完会立即同步到数据表中.</p><p>自动事务: 系统通过autocommit变量控制</p><p>show variables like ‘autocommit’;</p><p>关闭自动提交： set autocommit = off/0</p><p>自动关闭之后,需要手动来选择处理: commit提交, rollback回滚</p><p>注意: 通常都会使用自动事务</p><ul><li>事务原理</li></ul><p>事务操作原理: 事务开启之后, 所有的操作都会临时保存到事务日志, 事务日志只有在得到commit命令才会同步到数据表,其他任何情况都会清空(rollback, 断电, 断开连接)</p><ul><li>回滚点</li></ul><p>回滚点: 在某个成功的操作完成之后, 后续的操作有可能成功有可能失败, 但是不管成功还是失败,前面操作都已经成功: 可以在当前成功的位置, 设置一个点: 可以供后续失败操作返回到该位置, 而不是返回所有操作, 这个点称之为回滚点.</p><p>设置回滚点语法: savepoint 回滚点名字;</p><p>回到回滚点语法: rollback to 回滚点名字;索引</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>show index from 表名</td><td>查看表中已有索引</td></tr><tr><td>alter table 表名 add index 索引名[可选](字段名,…)</td><td>创建索引</td></tr><tr><td>drop index 索引名称 on 表名</td><td>删除索引</td></tr></tbody></table><p><strong>开启时间检测:</strong></p><p>set profiling=1;</p><p><strong>查看执行时间:</strong></p><p>show profiles;</p><p>使用原则:</p><ol><li>经常发生数据更新的表避免使用过多的索引</li><li>数据量小的表没有必要使用索引</li><li>数据量较大同时不会频发数据更新的表可以使用索引</li></ol><h2 id="Python操作数据库"><a href="#Python操作数据库" class="headerlink" title="Python操作数据库"></a>Python操作数据库</h2><p><strong>pymysql使用步骤:</strong></p><ol><li><p>导入<strong>pymysql</strong>包</p><p>import pymysql</p></li><li><p>创建<strong>连接对象</strong></p><p>调用pymysql模块中的connect()函数来创建连接对象，代码如下：</p><p>conn = connect(参数列表)</p><ul><li>参数host:连接的mysql主机, 如果本机是’localhost’</li><li>参数port:连接的mysql主机的端口, 默认是3306</li><li>参数user: 连接的用户名</li><li>参数password: 连接的密码</li><li>参数database: 数据库的名称</li><li>参数charset:通信采用的编码方式。推荐使用utf8</li></ul><p>连接对象conn的相关操作</p><ul><li>关闭连接 conn.close()</li><li>提交数据 conn.commit()</li><li>撤销数据 conn.rollbock()</li></ul></li><li><p>获取<strong>游标对象</strong></p><p>获取游标对象的目标就是要执行sql语句，完成对数据库的增删改查。代码如下：</p><p>调用连接对象的cursor()方法</p><p>获取游标对象 cur = conn.cursor()</p><p>游标操作说明:</p><ul><li>使用游标执行SQL语句：execute(opeartion [parameters]) 执行SQL语句，返回受影响的行数，主要用于执行insert ,update, delete, select等语句</li><li>获取查询结果集中的一条数据: cur.fetchone()返回一个元组。如(1, ‘张三’)</li><li>获取查询结果集中的所有数据: cur.fetchall()返回一个元组。如((1, ‘张三’),(2, ‘李四’))</li><li>关闭游标: cur.close()表示和数据库操作完成</li></ul></li><li><p>pymysql完成数据的<strong>增删改查</strong>操作</p><p>增删改查的sql语句</p><p>sql = selct * from 数据表</p><p>执行sql语句完成相关数据操作</p><p>游标cursor.execute(sql)</p></li><li><p>关闭<strong>游标</strong>和<strong>连接</strong></p><p>先关闭游标</p><p>cur.close()</p><p>后关闭连接<br>conn.close()</p></li></ol><ul><li><p>防止SQL注入</p><p>构造参数列表</p><pre><code>params = [find_name]</code></pre><p>执行select 语句</p><pre><code>sql = "select * from goods where name=%s" (这里的%s不需要加引号)cs.execute(sql, params)</code></pre></li></ul><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>范式: Normal Format, 是一种离散数学中的知识, 是为了解决一种数据的存储与优化的问题: 保存数据的存储之后, 凡是能够通过关系寻找出来的数据,坚决不再重复存储: 终极目标是为了减少数据的冗余.</p><p>范式: 是一种分层结构的规范, 分为六层: 每一次层都比上一层更加严格: 若要满足下一层范式,前提是满足上一层范式.</p><p>六层范式: 1NF,2NF,3NF…6NF, 1NF是最底层,要求最低;6NF最高层,最严格.</p><p>但是数据库不单是要解决空间问题,要保证效率问题: 范式只为解决空间问题, 所以数据库的设计又不可能完全按照范式的要求实现: 一般情况下,只有前三种范式需要满足.</p><p>范式在数据库的设计当中是有指导意义: 但是不是强制规范.</p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>第一范式: 在设计表存储数据的时候, 如果表中设计的字段存储的数据,在取出来使用之前还需要额外的处理(拆分),那么说表的设计不满足第一范式: <strong>第一范式要求字段的数据具有原子性: 不可再分.</strong></p><p>讲师代课表</p><table><thead><tr><th><strong>讲师</strong></th><th><strong>性别</strong></th><th><strong>班级</strong></th><th><strong>教室</strong></th><th><strong>代课时间</strong></th><th><strong>代课时间（开始，结束）</strong></th></tr></thead><tbody><tr><td>朱元璋</td><td>Male</td><td>php0226</td><td>D302</td><td>30天</td><td>2014-02-27,2014-05-05</td></tr><tr><td>朱元璋</td><td>Male</td><td>php0320</td><td>B206</td><td>30天</td><td>2014-03-21,2014-05-30</td></tr><tr><td>李世民</td><td>Male</td><td>php0320</td><td>B206</td><td>15天</td><td>2014-06-01,2014-06-20</td></tr></tbody></table><p>上表设计不存在问题: 但是如果需求是将数据查出来之后,要求显示一个老师从什么时候开始上课,到什么时候节课: 需要将代课时间进行拆分: 不符合1NF, 数据不具有原子性, 可以再拆分.</p><p>解决方案: 将代课时间拆分成两个字段就解决问题.</p><table><thead><tr><th><strong>讲师</strong></th><th><strong>性别</strong></th><th><strong>班级</strong></th><th><strong>教室</strong></th><th><strong>代课时间</strong></th><th><strong>代课开始时间</strong></th><th>代课结束时间</th></tr></thead><tbody><tr><td>朱元璋</td><td>Male</td><td>php0226</td><td>D302</td><td>30天</td><td>2014-02-27</td><td>2014-05-05</td></tr><tr><td>朱元璋</td><td>Male</td><td>php0320</td><td>B206</td><td>30天</td><td>2014-03-21</td><td>2014-05-30</td></tr><tr><td>李世民</td><td>Male</td><td>php0320</td><td>B206</td><td>15天</td><td>2014-06-01</td><td>2014-06-20</td></tr></tbody></table><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>第二范式: 在数据表设计的过程中,<strong>如果有复合主键(多字段主键), 且表中有字段并不是由整个主键来确定, 而是依赖主键中的某个字段(主键的部分): 存在字段依赖主键的部分的问题, 称之为部分依赖:</strong> 第二范式就是要解决表设计不允许出现部分依赖.</p><table><thead><tr><th>讲师</th><th><strong>性别</strong></th><th><strong>班级</strong></th><th><strong>教室</strong></th><th><strong>代课时间</strong></th><th><strong>代课开始时间</strong></th><th>代课结束时间</th></tr></thead><tbody><tr><td>朱元璋</td><td>Male</td><td>php0226</td><td>D302</td><td>30天</td><td>2014-02-27</td><td>2014-05-05</td></tr><tr><td>朱元璋</td><td>Male</td><td>php0320</td><td>B206</td><td>30天</td><td>2014-03-21</td><td>2014-05-30</td></tr><tr><td>李世民</td><td>Male</td><td>php0320</td><td>B206</td><td>15天</td><td>2014-06-01</td><td>2014-06-20</td></tr></tbody></table><p>以上表中: 因为讲师没有办法作为独立主键, 需要结合班级才能作为主键(复合主键: 一个老师在一个班永远只带一个阶段的课): 代课时间,开始和结束字段都与当前的代课主键(讲师和班级): 但是性别并不依赖班级, 教室不依赖讲师: 性别只依赖讲师, 教室只依赖班级: 出现了性别和教室依赖主键中的一部分: 部分依赖.不符合第二范式.</p><p>解决方案1: 可以将性别与讲师单独成表, 班级与教室也单独成表.</p><p>解决方案2: 取消复合主键, 使用逻辑主键</p><table><thead><tr><th>IDP</th><th>讲师</th><th><strong>性别</strong></th><th><strong>班级</strong></th><th><strong>教室</strong></th><th><strong>代课时间</strong></th><th><strong>代课开始时间</strong></th><th>代课结束时间</th></tr></thead><tbody><tr><td>1</td><td>朱元璋</td><td>Male</td><td>php0226</td><td>D302</td><td>30天</td><td>2014-02-27</td><td>2014-05-05</td></tr><tr><td>2</td><td>朱元璋</td><td>Male</td><td>php0320</td><td>B206</td><td>30天</td><td>2014-03-21</td><td>2014-05-30</td></tr><tr><td>3</td><td>李世民</td><td>Male</td><td>php0320</td><td>B206</td><td>15天</td><td>2014-06-01</td><td>2014-06-20</td></tr></tbody></table><p>ID = 讲师 + 班级(业务逻辑约束: 复合唯一键)</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>要满足第三范式,必须满足第二范式.</p><p>第三范式: 理论上讲,**应该一张表中的所有字段都应该直接依赖主键(逻辑主键: 代表的是业务主键), **如果表设计中存在一个字段, 并不直接依赖主键,而是通过某个非主键字段依赖,最终实现依赖主键: 把这种不是直接依赖主键,而是依赖非主键字段的依赖关系称之为传递依赖. 第三范式就是要解决传递依赖的问题.</p><table><thead><tr><th>IDP</th><th>讲师</th><th><strong>性别</strong></th><th><strong>班级</strong></th><th><strong>教室</strong></th><th><strong>代课时间</strong></th><th><strong>代课开始时间</strong></th><th>代课结束时间</th></tr></thead><tbody><tr><td>1</td><td>朱元璋</td><td>Male</td><td>php0226</td><td>D302</td><td>30天</td><td>2014-02-27</td><td>2014-05-05</td></tr><tr><td>2</td><td>朱元璋</td><td>Male</td><td>php0320</td><td>B206</td><td>30天</td><td>2014-03-21</td><td>2014-05-30</td></tr><tr><td>3</td><td>李世民</td><td>Male</td><td>php0320</td><td>B206</td><td>15天</td><td>2014-06-01</td><td>2014-06-20</td></tr></tbody></table><p>以上设计方案中: 性别依赖讲师存在, 讲师依赖主键; 教室依赖班级,班级依赖主键: 性别和教室都存在传递依赖.</p><p>解决方案: 将存在传递依赖的字段,以及依赖的字段本身单独取出,形成一个单独的表, 然后在需要对应的信息的时候, 使用对应的实体表的主键加进来.</p><p>讲师代课表:</p><table><thead><tr><th>IDP</th><th>讲师ID</th><th>班级ID</th><th>代课时间</th><th>开始</th><th>结束</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td><td>30</td><td>2014-02-27</td><td>2014-05-05</td></tr><tr><td>2</td><td>1</td><td>12</td><td>30</td><td>2014-03-21</td><td>2014-05-30</td></tr><tr><td>3</td><td>2</td><td>12</td><td>15</td><td>2014-06-01</td><td>2014-06-20</td></tr></tbody></table><p>讲师表</p><table><thead><tr><th>ID</th><th>讲师</th><th>性别</th></tr></thead><tbody><tr><td>1</td><td>朱元璋</td><td>Male</td></tr><tr><td>2</td><td>李世民</td><td>Male</td></tr></tbody></table><p>班级表:</p><table><thead><tr><th>ID</th><th>班级</th><th>教室</th></tr></thead><tbody><tr><td>10</td><td>php0226</td><td>302</td></tr><tr><td>12</td><td>php0320</td><td>206</td></tr></tbody></table><h3 id="逆规范化"><a href="#逆规范化" class="headerlink" title="逆规范化"></a>逆规范化</h3><p>有时候, 在设计表的时候,如果一张表中有几个字段是需要从另外的表中去获取信息. 理论上讲, 的确可以获取到想要的数据, 但是就是效率低一点. 会刻意的在某些表中,不去保存另外表的主键(逻辑主键), 而是<strong>直接保存想要的数据信息:</strong> 这样一来,在查询数据的时候, 一张表可以直接提供数据, 而不需要多表查询(效率低), 但是会导致数据冗余增加.<br>逆规范化: 磁盘利用率与效率的对抗</p><h3 id="连接查询分类"><a href="#连接查询分类" class="headerlink" title="连接查询分类"></a>连接查询分类</h3><p>SQL中将连接查询分成四类: 内连接,外连接,自然连接和交叉连接</p><h3 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h3><p>交叉连接: cross join, 从一张表中循环取出每一条记录, 每条记录都去另外一张表进行匹配: 匹配一定保留(没有条件匹配), 而连接本身字段就会增加(保留),最终形成的结果叫做: 笛卡尔积.</p><p>基本语法：</p><p>左表 cross join 右表;</p><p>笛卡尔积没有意义: 应该尽量避免(交叉连接没用)</p><p>交叉连接存在的价值: 保证连接这种结构的完整性</p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接: [inner] join, 从左表中取出每一条记录,去右表中与所有的记录进行匹配: 匹配必须是某个条件在左表中与右表中相同最终才会保留结果,否则不保留.</p><p>基本语法：</p><p>左表 [inner] join 右表 on 左表.字段 = 右表.字段; on表示连接条件: 条件字段就是代表相同的业务含义(如my_student.c_id和my_class.id)</p><p>字段别名以及表别名的使用: 在查询数据的时候,不同表有同名字段,这个时候需要加上表名才能区分, 而表名太长, 通常可以使用别名.</p><p>内连接可以没有连接条件: 没有on之后的内容,这个时候系统会保留所有结果(笛卡尔积)</p><p>内连接还可以使用where代替on关键字(where没有on效率高)</p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>外连接: outer join, 以某张表为主,取出里面的所有记录, 然后每条与另外一张表进行连接: 不管能不能匹配上条件,最终都会保留: 能比配,正确保留; 不能匹配,其他表的字段都置空NULL.</p><p>外连接分为两种: 是以某张表为主: 有主表</p><p>Left join: 左外连接(左连接), 以左表为主表</p><p>Right join: 右外连接(右连接), 以右表为主表<br>基本语法: </p><p>左表 left/right join 右表 on 左表.字段 = 右表.字段;</p><p>虽然左连接和右连接有主表差异, 但是显示的结果: 左表的数据在左边,右表数据在右边.</p><h3 id="子连接"><a href="#子连接" class="headerlink" title="子连接"></a>子连接</h3><p>子查询: sub query, 查询是在某个查询结果之上进行的.(一条select语句内部包含了另外一条select语句).</p><ul><li><p>子查询分类</p><p>子查询有两种分类方式: <strong>按位置分类</strong>和<strong>按结果分类</strong></p><p>按位置分类: 子查询(select语句)在外部查询(select语句)中出现的位置</p><p>from子查询: 子查询跟在from之后</p><p>where子查询: 子查询出现where条件中</p><p>exists子查询: 子查询出现在exists里面</p><p>按结果分类: 根据子查询得到的数据进行分类(理论上讲任何一个查询得到的结果都可以理解为二维表)</p><p>标量子查询: 子查询得到的结果是一行一列</p><p>列子查询: 子查询得到的结果是一列多行</p><p>行子查询: 子查询得到的结果是多列一行(多行多列)</p><p>上面几个出现的位置都是在where之后</p><p>表子查询: 子查询得到的结果是多行多列(出现的位置是在from之后)</p></li><li><p>标量子查询</p><p>需求: 知道班级名字为PHP0710,想获取该班的所有学生.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from my_student where c_id = (select id from my_class where c_name = 'PHP0710')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>列子查询</p><p>需求: 查询所有在读班级的学生(班级表中存在的班级)</p><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">select * from my_student where c_id in (select id from my_cless)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>行子查询</p><p>行子查询: 返回的结果可以是多行多列(一行多列)</p><p>需求: 要求查询整个学生中,年龄最大且身高是最高的学生.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from my_student where (age, height) = (select max(age), max(height) from my_student)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>表子查询</p><p>表子查询: 子查询返回的结果是多行多列的二维表: 子查询返回的结果是当做二维表来使用</p><p>找出每一个班最高的一个学生.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from (select * from my_student order by height desc)as student group by c_id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Exists查询</p><p>exists: 是否存在的意思, exists子查询就是用来判断某些条件是否满足(跨表), exists是接在where之后: exists返回的结果只有0和1</p><p>需求: 查询所有的学生: 前提条件是班级存在</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from my_student where exists(select * from my_class where id = 1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器: trigger, 事先为某张表绑定好一段代码 ,当表中的某些内容发生改变的时候(增删改)系统会自动触发代码,执行.</p><p>触发器: 事件类型, 触发时间, 触发对象</p><p>事件类型: 增删改, 三种类型insert,delete和update</p><p>触发时间: 前后: before和after</p><p>触发对象: 表中的每一条记录(行)</p><p>一张表中只能拥有一种触发时间的一种类型的触发器: 最多一张表能有6个触发器</p><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>在mysql高级结构中: 没有大括号,  都是用对应的字符符号代替</p><p>触发器基本语法:</p><p>– 临时修改语句结束符</p><p>delimiter 自定义符号：后续代码中只有碰到自定义符号才算结束</p><p>create trigger 触发器名字 触发时间 时间类型  on 表名 for each row</p><p>begin – 代表左大括号：开始</p><p>– 里面是触发器的内容，每行内容都必须使用语句结束符：分号</p><p>end  – 代表右大括号: 结束</p><p>– 语句结束符</p><p>自定义符号</p><p>– 将临时修改 修正过来</p><p>delimiter ;</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 触发器: 订单生成一个，商品库存就减少-- 临时修改语句结束符delimiter $$create trigger after_order after insert on my_order for each rowbegin-- 触发器内容update my_goods set inv = inv-1 where id =2;end -- 结束触发器$$-- 修改修正结束符delimiter ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><p>查看所有触发器或者模糊匹配</p><p>Show triggers [like ‘pattern’];</p><p>\g 的作用是分号和在sql语句中写’;’是等效的</p><p>\G 的作用是将查到的结构旋转90度变成纵向</p><p>可以查看触发器创建语句</p><p>Show create trigger 触发器名字;</p><p>所有的触发器都会保存一张表中: Information_schema.triggers</p><h3 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h3><p>触发器: 不需要手动调用, 而是当某种情况发生时会自动触发.(订单里面插入记录之后)</p><h3 id="修改触发器-amp-删除触发器"><a href="#修改触发器-amp-删除触发器" class="headerlink" title="修改触发器&amp;删除触发器"></a>修改触发器&amp;删除触发器</h3><p>触发器不能修改,只能先删除,后新增.</p><p>Drop trigger 触发器名字;</p><h3 id="触发器记录"><a href="#触发器记录" class="headerlink" title="触发器记录"></a>触发器记录</h3><p>触发器记录: 不管触发器是否触发了,只要当某种操作准备执行, 系统就会将当前要操作的记录的当前状态和即将执行之后新的状态给分别保留下来, 供触发器使用: 其中, 要操作的当前状态保存到old中, 操作之后的可能形态保存给new.</p><p>Old和new都是代表记录本身: 任何一条记录除了有数据, 还有字段名字.</p><p>使用方式: old.字段名 / new.字段名(new代表的是假设发生之后的结果)</p><p>如果触发器内部只有一条要执行的SQL指令, 可以省略大括号(begin和end)</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>常见的数据库管理系统</p><p>MYSQL ：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x版本也开始收费。</p><p>Oracle ：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。</p><p>DB2 ：IBM公司的数据库产品,收费的。常应用在银行系统中.</p><p>SQLServer：MicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。</p><p>SyBase ：已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。</p><p>SQLite : 嵌入式的小型数据库，应用在手机端。</p></li></ul><h3 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h3><p>数据库引擎是用于存储、处理和保护数据的核心服务。<br>当你访问数据库时，不管是手工访问，还是程序访问，都不是直接读写数据库文件，而是通过数据库引擎去访问数据库文件<br>注意：数据引擎是指表格中的引擎，</p><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><p>数据库中以表为组织单位存储数据</p><p>表类似与Python类, 每个字段都有对应的数据类型</p><p>用熟悉的Python程序来与关系型数据库对比，就会发现对应关系：</p><p>类 —–  表</p><p>类中的属性 —-  表中字段</p><p>对象 —– 记录</p><h3 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h3><p>根据表字段所规定的数据类型，我们可以向其中填入一条条的数据，而表中的每条数据类似类的实例对象。表中的一行一行的信息我们称之为记录。</p><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><h3 id="SQL语句-1"><a href="#SQL语句-1" class="headerlink" title="SQL语句"></a>SQL语句</h3><ul><li><p>SQL分类：</p><ol><li><p>数据定义语言：简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等。关键字：create，alter，drop等</p></li><li><p>数据操作语言：简称DML(Data Manipulation Language)，用来对数据库中表的记录进行更新。关键字：insert，delete，update等</p></li><li><p>数据控制语言：简称DCL(Data Control Language)，用来定义数据库的访问权限和安全级别，及创建用户。</p></li><li><p>数据查询语言：简称DQL(Data Query Language)，用来查询数据库中表的记录。关键字：select，from，where等</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="2021/06/07/django/"/>
      <url>2021/06/07/django/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li><p>MVC模式</p><p>有一种程序设计模式叫<strong>MVC</strong>，其核心思想是<strong>分工、解耦，让不同的代码块之间降低耦合，增强代码的可扩展性和可移植性，实现向后兼容</strong></p><ul><li>M全拼为Model，主要封装对数据库层的访问，对数据库中的数据进行增、删、改、查操作</li><li>V全拼为View，用于封装结果，生成页面展示的html内容</li><li>C全拼为Controller，用于接收请求，处理业务逻辑，与Model和View交互，返回结果</li></ul></li><li><p>MVT模式</p><ul><li><p>M去全拼为Model，与MVC中的M功能相同，负责和数据库交互，进行数据处理</p></li><li><p>V的全拼为View，与MVC中的C功能相同，接收请求，进行业务处理，返回应答</p></li><li><p>T全拼为Template，与MVC中的V功能相同，负责封装构造要返回的html</p></li></ul></li></ul><h2 id="Django流程"><a href="#Django流程" class="headerlink" title="Django流程"></a>Django流程</h2><ul><li><p>创建工程</p><p>创建工程的命令为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m django startprojet xxxdjango<span class="token operator">-</span>admin startproject 工程名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建子应用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py startapp 子应用名称python mange<span class="token punctuation">.</span>py startproject xxxpython <span class="token operator">-</span>m django startprojet xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行开发服务器</p><pre class="line-numbers language-none"><code class="language-none">python manage.py runserver ip:端口或:python manage.py runserver# 可以不写IP和端口，默认IP是127.0.0.1，默认端口是8000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建超级用户</p><pre class="line-numbers language-none"><code class="language-none">python manage.py changepassword admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>项目结构分析:</strong></p><ol><li><code>manage.py</code>：以后和项目交互基本上都是基于这个文件，一般都是在终端输入python manage.py [子命令]    可以输入python manage.py help 看下能做什么事，除非你知道你自己在做什么，一般情况下不会编辑这个文件</li><li><code>setting.py</code>：保存项目所有的配置信息</li><li><code>urls.py</code>：用来做url和视图函数映射的，以后来了一个请求，就会从这个文件中找到匹配的视图函数</li><li><code>wsgi.py</code>：专门用来做部署的，不需要修改</li></ol><ul><li><p><strong>app结构分析:</strong></p><p>admin.py文件跟网站的后台管理站点配置相关</p><p>apps.py文件用于配置当前子应用的相关信息</p><p>migrations目录用于存放数据库迁移历史文件</p><p>model.py文件用于保存数据库模型类</p><p>tests.py文件用于开发测试用例，编写单元测试</p><p>view.py文件用于编写Web应用视图</p></li><li><ol start="3"><li>注册安装子应用</li></ol><p>创建出来的子应用目录文件虽然被放到了工程项目目录中，但是django工程并不能立即直接使用该子应用，需要注册安装后才能使用。</p><p>在工程配置文件settings.py中，<strong>INSTALLED_APPS</strong>项保存了工程中已经注册安装的子应用，</p><p><strong>注册安装一个子应用的方法，即是将子应用的配置信息文件apps.py中的Config类添加到INSTALLED_APPS列表中。</strong></p></li></ul><p><strong>DEBUG模式:</strong></p><ol><li>如果开启了DEBUG模式，那么以后我们修改了Django项目的代码，然后按下ctrl+s，那么Django就会自动的给我们重启项目，不需要手动重启。</li><li>如果开启了DEBUG模式，那么以后Django项目中的代码出现了bug，在浏览器和控制台中会打印出错信息。</li><li>在生产环境中，禁止开启DEBUG模式，不然会有很大的安全隐患</li><li>如果将DEBUG设置为False，那么必须要设置ALLOWED_HOSTS。</li></ol><p><strong>ALLOWED_HOSTS:</strong></p><p>这个变量是用来设置以后别人只能用通过这个变量中的ip地址或者域名进行访问。</p><p><strong>让同局域网中的其他电脑访问本机的项目:</strong></p><ol><li><p>让项目运行的时候, host为0.0.0.0</p><ul><li>在终端，使用命令: <code>python manage.py runserver 0.0.0.0:8000</code></li><li>在pycharm，右上角 -&gt; 项目配置 -&gt; host，改为<code>0.0.0.0</code></li></ul></li><li><p>在<code>setting.py</code>文件中，配置<code>ALLOWED_HOSTS</code>，</p><p>将本机的IP地址添加进去。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'192.168.0.103'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: 要关闭自己电脑的防火墙才行。</p></li></ol></li></ul><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>使用Django进行数据库开发的提示:</p><ol><li>MVT设计模式中的model，专门负责和数据库交互对应(model.py)</li><li>由于Model中内嵌了ORM框架，所有不需要直接面向数据库编程</li><li>而且定义模型类，通过模型类和对象完成数据表的增删改查</li><li>ORM框架就是把数据库表的行与相应的对象建立关联，互相转换，使得数据库的操作面向对象</li></ol><p>使用Django进行数据库开发的步骤：</p><ol><li><p>定义模型类</p><ul><li>根据书籍表结构设计模型类:<ul><li>模型类：BookInfo</li><li>书籍名称字段：name</li></ul></li><li>根据人物表结构设计模型类：<ul><li>模型类：PeopleInfo</li><li>人物姓名字段：name</li><li>人物性别字段：gender</li><li>外键约束：book<ul><li>外键要指定所属的模型类<code>book = models.ForeignKey(BookInfo)</code></li></ul></li></ul></li><li>说明 :<ul><li>书籍-人物的关系为一对多. 一本书中可以有多个英雄.</li><li>不需要定义主键字段, 在生成表时会自动添加, 并且值为自增长.</li></ul></li><li>根据数据库表的设计<ul><li>在<code>models.py</code>中定义模型类,继承自<code>models.Model</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment"># Create your models here.</span><span class="token comment"># 准备书籍列表信息的模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建字段，字段类型</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 准备人物列表的信息的模型类</span><span class="token keyword">class</span> <span class="token class-name">PeopleInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CherField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    gender <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 外键约束：人物属于哪本书</span>    book <span class="token operator">=</span> models<span class="token punctuation">.</span>Foreignkey<span class="token punctuation">(</span>BookInfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模型迁移(建表)</p><p>迁移由两步完成:</p><ul><li>生成迁移文件：根据模型类生成创建表的语句</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py makemigrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行迁移: 根据第一步生成的语句在数据库中建表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>提示：默认采用</strong><code>sqlite3</code><strong>数据库来存储数据</strong></li></ul></li><li><p>操作数据库</p></li></ol><h3 id="站点管理"><a href="#站点管理" class="headerlink" title="站点管理"></a>站点管理</h3><p>站点: 分为<code>内容发布</code>和<code>公共访问</code>两部分</p><p>内容发布的部分由网站的管理员负责查看、添加、修改、删除数据</p><p>Django能够根据定义的模型类自动地生成管理模块</p><p>使用django的管理模块, 需要按照如下步骤操作 :</p><p>​    1.管理界面本地化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在settings.py文件中</span><span class="token comment"># 设置中文</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-Hans'</span><span class="token comment"># 设置时区</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.创建管理员</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建管理员命令</span>python manage<span class="token punctuation">.</span>py createsuperuser<span class="token comment"># 重置密码</span>python mamage<span class="token punctuation">.</span>py changepassword 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.注册模型类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在子应用的admin.py文件中注册模型类</span><span class="token comment"># 需要导入模型模块: from book.models import BookInfo,PeopleInfo</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token punctuation">,</span>PeopleInfo<span class="token comment"># 注册书籍模型类</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>BookInfo<span class="token punctuation">)</span><span class="token comment"># 注册人物模型类</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>PeopleInfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.发布内容到数据库</p><p>​    发布内容后，优化模型类展示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 准备书籍列表信息的模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建字段，字段类型...</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将模型类以字符串的方式输出"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图和URL"><a href="#视图和URL" class="headerlink" title="视图和URL"></a>视图和URL</h3><p>站点管理页面做好了，接下来就要做公共访问页面</p><p>对应Django的设计框架MVT</p><p>​    用户在URL中请求的是视图</p><p>​    视图接收请求后进行处理</p><p>​    并将处理的结果返回给请求者</p><p>使用视图时需要进行两步操作</p><ol><li>定义视图</li></ol><p>视图就是一个Python函数，被定义在应用的views.py中，</p><p>视图的第一个参数是HttpRequest类型的对象，包含了所有请求信息</p><p>视图必须返回HttpResponse对象，包含返回给请求者的响应信息</p><p>需要导入HttpResponse模块: from django.http import HttpResponse</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义视图函数:响应字符串ok!给客户端</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 定义视图函数</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'ok!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置URLconf</li></ol><p>查找视图的过程:</p><ol><li>请求者在浏览器地址栏中输入URL，请求到网站</li><li>网站获取URL信息</li><li>然后与编写好的URLconf逐条匹配</li><li>如果匹配成功则调用对应的视图</li><li>如果所有的URLcinf都没有匹配成功，则返回404数据</li></ol><p>需要两步完成URLconf配置</p><ol><li><p>在项目中定义URLconf</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r"^"</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'book.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在应用中定义URLconf</p><p>一条URLconf包括URL规则、视图两部分</p><ul><li>URL规则使用正则表达式定义</li><li>视图就是在view.py中定义的视图函数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> book<span class="token punctuation">.</span>views <span class="token keyword">import</span> indexurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^index/$'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token comment"># 路由引导视图函数</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>url中添加参数</strong></p><ol><li><p>采用url中使用变量的方式： 在path的第一个参数中，使用<code>&lt;参数名&gt;</code>的方式可以传递参数，然后在视图函数中也要写一个参数，视图函数中的参数必须和url中的参数名称保持一致，不然就找不到这个参数。另外，url中可以传递多个参数。</p></li><li><p>采用查询字符串的方式：在url中，不需要单独的匹配查询字符串的部分，只需要在视图函数中使用<code>request.GET.get(参数名称)</code>的方式来获取。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">author_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    author_id <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    text <span class="token operator">=</span> <span class="token string">'作者的id是:%s'</span> <span class="token operator">%</span> author_id    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为查询字符串使用的是<code>GET</code>请求，所以我们通过<code>request.GET</code>来获取参数，并且因为<code>GET</code>是一个类似于字典的数据类型，所以获取值跟字典的方式都是一样的。</p></li></ol><p><strong>path函数：</strong></p><p><code>path</code>函数的定义为:<code>path(route, view, name=None, kwarg=None)</code>。以下是对几个参数进行讲解：</p><ol><li><code>route</code>参数：<code>url</code>的匹配规则，这个参数中可以指定<code>url</code>中需要传递的参数，比如在访问文章详情页的时候，可以传递一个<code>id</code>。传递参数是通过<code>&lt;&gt;</code>括号来进行指定的。并且在传递参数的时候，可以指定这个参数的类型，比如文章的<code>id</code>都是<code>int</code>类型，那么可以这样写<code>&lt;int:id&gt;</code>，以后匹配的时候，就只会匹配到id为<code>int</code>类型的<code>url</code>，而不会匹配其他的<code>url</code>，并且在视图函数中获取这个参数的时候，就已经被转换成一个<code>int</code>类型了。其中还有几个常用的类型：<ul><li>str:非空的子字符类型。默认的转换器。但是不能包含斜杠</li><li>int: 匹配任意的零或者正数的整数，到视图的函数中就是一个int类型</li><li>slug: 由英文的横杠<code>-</code>，或者下划线<code>_</code>连接英文字符或者数字而成的字符串</li><li>uuid: 匹配<code>uuid</code>字符</li><li>path: 匹配非空的英文字符串，可以包含斜杠</li></ul></li><li><code>view</code>参数：可以为一个视图函数或者是<code>类视图.as_view()</code>或者是<code>django.urls.include()</code>函数的返回值</li><li><code>name</code>参数：这个参数是给这个<code>url</code>取个名字的，这在项目比较大，<code>url</code>比较多的时候用处很大。</li><li><code>kwargs</code>参数：有时候想给视图函数传递一些额外的参数，就可以通过<code>kwargs</code>参数进行传递。这个参数接收一个字典。传到视图函数中的时候，会作为一个关键字参数传过去，比如以下的<code>url</code>规则:</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'blog/&lt;int:year&gt;/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'foo'</span><span class="token punctuation">:</span><span class="token string">'bar'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>URL参数的转换器</strong></p><ol><li>str：除了斜杠<code>/</code>以外的所有的字符都是可以的。</li><li>int：只有一个或者多个阿拉伯数字。</li><li>path：所有的字符都是满足的。</li><li>uuid：只有满足<code>uuid.uuid4()</code>这个函数返回的字符串的格式。 </li><li>slug：英文中的横杠或者英文字符或者阿拉伯数字或者下划线才满足。</li></ol><p><strong>urls模块化</strong></p><p>如果项目变得越来越大，那么url会变的越来越多，如果都放在主<code>urls.py</code>文件中，那么将不太好管理，因此我们可以将每个app自己的urls放到自己的app中进行管理。一般我们会在app中新建一个urls.py文件用来存储所有和这个app相关的子url。</p><p>需要注意的地方:    </p><ol><li><p>应该使用<code>include</code>函数包含子<code>urls.py</code>，并且这个<code>urls.py</code>的路径是相对于项目的路径。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'book/'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">'book.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>app</code>的<code>urls.py</code>中，所有的url匹配也要放在一个叫做<code>urlpatterns</code>的变量中，否则找不到。</p></li><li><p><code>url</code>是会根据主<code>urls.py</code>和app中的<code>urls.py</code>进行拼接的，因此注意不要多加斜杠。</p></li></ol><p><strong>URL命名</strong></p><p><strong>为什么需要给url命名</strong></p><p>因为url是经常变化的，如果在代码中写死可能会经常改代码，给url取个名字，以后使用url的时候就使用他的名字进行反转就可以了，就不需要写死url了。</p><p><strong>如何给一个url指定名称</strong></p><p>在<code>path</code>函数中，传递一个<code>name</code>参数就可以指定。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>login<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用命名空间</strong></p><p>在多个app之间，有可能产生同名的url。这时候为了避免反转url的时候产生混淆，可以使用应用命名空间，</p><p>来做区分，定义应用命名空间非常简单，只要在<code>app</code>的<code>urls.py</code>中定义一个叫做<code>app_name</code>的变量，来指定这个应用的命名空间即可。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 应用命名空间</span>app_name <span class="token operator">=</span> <span class="token string">'front'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>login<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后在做反转的时候就可以使用<code>应用命名空间:url名称</code>的方式进行反转，示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">login_url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'front:login'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>应用(app)命名空间和实例命名空间</strong></p><p>一个app，可以创建多个实例。可以使用多个url映射同一个app。所以这就会产生一个问题。以后再做反转的时候，如果使用应用命名空间，那么就会发生混淆。为了避免这个问题，我们可以使用实例命名空间。实例命名空间也是非常简单，只要再<code>include</code>函数中传递一个<code>namespace</code>变量即可。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'front.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 同一个app下有两个实例</span>    path<span class="token punctuation">(</span><span class="token string">'cms1/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'cms.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'cms1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'cms2/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'cms.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'cms2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后在做反转的时候，就可以根据实例命名空间来指定具体的url。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> username<span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'CMS首页'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 获取当前命名空间</span>        current_namespace <span class="token operator">=</span> request<span class="token punctuation">.</span>resolver_match<span class="token punctuation">.</span>namespace        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">"%s:login"</span><span class="token operator">%</span>current_namespace<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>include函数的用法</strong></p><ol><li><p>include(module, namespace=None):</p><ul><li>module：子url的模块字符串。</li><li>namespace：实例命名空间。这个地方需要注意一点。如果指定了实例命名空间，那么前提必须要先指定应用命名空间。也就是在子<code>urls.py</code>中添加<code>app_name</code>这个变量。</li></ul></li><li><p>include((pattern_list, app_namespace), namespace=None):</p><p><code>include</code>函数的第一个参数既可以为一个字符串，也可以为一个元组，如果是元组，    那么元组的第一个参数是子<code>urls.py</code>模块的字符串，元组的第二个参数是应用命名空间，也就是说，应用命名空间既可以在子<code>urls.py</code>中通过<code>app_name</code>指定，也可以在<code>include</code>函数中指定。</p></li><li><p>include(pattern_list):</p><p><code>pattern_list</code>是一个列表，这个列表中装的是<code>path</code>或者<code>re_path</code>函数。实例代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'movie/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>movie<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'list/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>movie_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>re_path函数</strong></p><ol><li><p>re_path和path的作用都是一样的，只不过<code>re_path</code>是在写url的时候可以用正则表达式，功能更加强大</p></li><li><p>写正则表达式都推荐使用原生字符串，也就是以<code>r</code>开头的字符串</p></li><li><p>在正则表达式中定义变量，需要用圆括号括起来。这个参数有名字的，那么需要使用<code>?p&lt;参数的名字&gt;</code></p><p>然后在后面添加正则表达式的规则。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> re_path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># r"":代表原生字符串(raw)</span>    re_path<span class="token punctuation">(</span><span class="token string">r'^$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># /article/list/&lt;year&gt;/</span>    re_path<span class="token punctuation">(</span><span class="token string">r'list/(?P&lt;year&gt;\d{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_list<span class="token punctuation">)</span><span class="token punctuation">,</span>    re_path<span class="token punctuation">(</span><span class="token string">r'list/(?P&lt;month&gt;\d{2})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_list_month<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是特别要求，直接使用<code>path</code>就够了，省的把代码搞的很麻烦(因为正则 表达式其实是非常晦涩的, 特别是一些比较复杂的正则表达式，今天写的明天就不记得了)。除非是url中确实是需要使用正则表达式来解决才使用<code>re_path</code></p></li></ol><p><strong>reverse函数</strong></p><ol><li><p>如果在反转url的时候，需要添加参数，那么可以传递<code>kwargs</code>参数到<code>reverse</code>函数中，实例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">detail_url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'detail'</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'article_id'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'page'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果想要添加查询字符串的参数，则必须手动的进行拼接。示例代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">login_url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'?next=/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>自定义URL(PATH)转换器</strong></p><p>需求:<br>实现一个获取文章列表的demo，用户可以根据<code>/articles/文章分类</code>的方式来获取文章，其中文章的分类采用的是<code>分类1+分类2+分类3...</code>的方式拼接，并且如果只个一个分类，那么就不需要加号。示例如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 第一种: 获取python分类下的文章</span><span class="token operator">/</span>articles<span class="token operator">/</span>python<span class="token operator">/</span><span class="token comment"># 2. 第二种：获取python和django分类下的文章</span><span class="token operator">/</span>articles<span class="token operator">/</span>python<span class="token operator">+</span>django<span class="token operator">/</span><span class="token comment"># 3. 第三种：获取python和django和flask分类下的文章</span><span class="token operator">/</span>articles<span class="token operator">/</span>python<span class="token operator">+</span>django<span class="token operator">+</span>flask<span class="token operator">/</span>以此类推<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在”文章分类”参数传到视图函数之前要把这些分类分开来存储到列表中。比如参数是<code>python+django</code>，那么传到视图函数的时候就要变成<code>['python', 'django']</code>。以后在使用reverse反转的时候，限制传递”文章分类”的参数应该是一个列表，并且要将这个列表变成<code>python+django</code>的形式。</p><p><strong>自定义URL转换器</strong></p><p>之前已经学过一些django内置的url转化器，包括int，uuid等，有时候这些内置的url转换器并不能满足我们的需求，因此django给我们提供了一个接口可以让我们自己定义自己的url转换器</p><p>自定义url转换器按照以下五个步骤来走就可以了:</p><ol><li>定义一个类，直接继承自object就可以了。</li><li>在类中定义一个属性regex，这个属性用来保存url转换器的正则表达式。</li><li>实现to_python(self, value)方法，这个方法是将url中的值转换以下，然后传给视图函数的。</li><li>实现to_url(self，value)方法，这个方法是在做url反转的时候，将传进来的参数转换后拼接成一个正确的url。</li><li>将定义好的转换器，使用<code>django.urls.converters.register_converter</code>方法注册到django中</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>converters <span class="token keyword">import</span> register_converter<span class="token keyword">class</span> <span class="token class-name">CategoryConverter</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> <span class="token string">r'\w+|(\w+\+\w+)+'</span>        <span class="token keyword">def</span> <span class="token function">to_python</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># value: python+django+flask</span>        <span class="token comment"># ['python'+'django'+'flask']</span>        result <span class="token operator">=</span> value<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result        <span class="token keyword">def</span> <span class="token function">to_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># value: ['python'+'django'+'flask']</span>        <span class="token comment"># python+django+flask</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'转换url的时候, 分类参数必须为列表！'</span><span class="token punctuation">)</span>            register_converter<span class="token punctuation">(</span>CategoryConverter<span class="token punctuation">,</span> <span class="token string">'cate'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>URL映射的时候指定默认参数</strong></p><p>使用path或者re_path的时候，在route中都可以包含参数，而有时候想指定默认的参数，这时候j就可以通过以下方式来完成。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urls.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'blog/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'blog/page&lt;int:num&gt;/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment"># View (in blog/views.py)</span><span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Output the appropriate page of blog entries, according to num.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当在访问blog/的时候，因为没有传递num参数，所以会匹配到第一个url，这时候就执行view.page这个视图函数，而在page函数中，又有num=1这个默认参数。因此这时候就可以不用传递参数。而如果访问blog/1    的时候，因为在传递参数的时候传递了num，因此会匹配到第二个url，这时候也会执行views.page，然后把传递进来的参数传给page函数中的num。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在Django中，将前端的内容定义在模板中，然后再把模板交给视图调用</p><p>模板使用步骤</p><ol><li>创建模板<ul><li>在应用同级目录下创建模板文件templates，文件名称固定写法</li><li>在templates文件夹下，创建应用同名文件夹，</li><li>在应用同名文件夹下创建网页模块文件</li></ul></li><li>设置模板查找路径</li><li>模板接收视图传入的数据</li><li>模板处理数据</li></ol><h2 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h2><p>在settings.py中保存了数据库的连接配置信息，Django默认初始配置使用<strong>sqlite</strong>数据库。</p><ol><li><p>使用mysql数据库首先需要安装驱动程序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在Django的工程同名子目录的_<em>init</em>_.py文件中添加如下语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改databases配置信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment"># 数据库引擎（是mysql还是oracle等）</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token comment"># 数据库的名字</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'dfz'</span><span class="token punctuation">,</span>        <span class="token comment"># 连接mysql数据库的用户名</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment"># 连接mysql数据库的密码</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment"># mysql数据库的主机地址</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token comment"># mysql数据库的端口号</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在mysql中创建数据库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">create database book charset<span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li><strong>在Django中操作数据库:</strong></li></ul><p>在<code>Django</code>中操作数据库有两种方式。第一种方式就是使用原生<code>sql</code>语句操作，第二种就是使用<code>ORM</code>模型来操作。在<code>Django</code>中使用原生<code>sql</code>语句操作其实就是使用<code>python db api</code>的接口来操作。如果你的<code>mysql</code>驱动使用的是<code>pymysql</code>，那么你就是使用<code>pymysql</code>来操作的，只不过<code>Django</code>将数据库连接的这一部分封装好了，我们只要在<code>settings.py</code>中配置好了数据库连接信息后直接使用<code>Django</code>封装好的接口就可以操作了。示例代码如下： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用django封装好的connection对象，会自动读取setting.py中数据库的配置信息</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connection<span class="token comment"># 获取游标对象</span>cursor <span class="token operator">=</span>connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 拿到游标对象后执行sql语句</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from book"</span><span class="token punctuation">)</span><span class="token comment"># 获取所有的数据</span>rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 遍历查询到的数据</span><span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的<code>execute</code>以及<code>fetchall</code>方法都是<code>Python DB API</code>规范中定义好的。任何使用<code>Python</code>来操作<code>MySQL</code>的驱动程序都应该遵循这个规范。所以不管是使用<code>pymysql</code>或者是<code>mysqlclient</code>或者是<code>mysqldb</code>，他们的接口都是一样的。 </p><p><strong>Python DB API规范下cursor对象常用接口</strong></p><ol><li><p><code>description</code>：如果<code>cursor</code>执行了查询的<code>sql</code>代码。那么读取<code>cursor.description</code>属性的时候，将返回一个列表，这个列表中装的是元组，元组中装的分别是<code>(name,type_code,display_size,internal_size,precision,scale,null_ok)</code>，其中<code>name</code>代表的是查找出来的数据的字段名称，其他参数暂时用处不大。 </p></li><li><p><code>rowcount</code>：代表的是在执行了<code>sql</code>语句后受影响的行数。 </p></li><li><p><code>close</code>：关闭游标。关闭游标以后就再也不能使用了，否则会抛出异常。 </p></li><li><p><code>execute(sql[,parameters])</code>：执行某个<code>sql</code>语句。如果在执行<code>sql</code>语句的时候还需要传递参数，那么可以传给<code>parameters</code>参数。示例代码如下： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from article where id=%s"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>fetchone</code>：在执行了查询操作以后，获取第一条数据。 </p></li><li><p><code>fetchmany(size)</code>：在执行查询操作以后，获取多条数据。具体是多少条要看传的<code>size</code>参数。如果不传<code>size</code>参数，那么默认是获取第一条数据。 </p></li><li><p><code>fetchall</code>：获取所有满足<code>sql</code>语句的数据。 </p></li></ol><ul><li>ORM模型</li></ul><p>使用原生SQL的方式会出现的问题:</p><ol><li>SQL语句重复利用率不高，越复杂的SQL语句条件越多，代码越长。会出现很多相近的SQL语句。</li><li>很多SQL语句是在业务逻辑中拼出来的，如果有数据库需要更改，就要去修改这些逻辑，这会很容易漏掉对某些SQL语句的修改。</li><li>写SQL时容易忽略web安全问题，给未来造成隐患。SQL注入。</li></ol><p><code>ORM</code>，全称<code>Object Relational Mapping</code>，中文叫做对象关系映射，通过<code>ORM</code>我们可以通过类的方式去操作数据库，而不用再写原生的SQL语句。通过把表映射成类，把行作实例，把字段作为属性，<code>ORM</code>在执行对象操作的时候最终还是会把对应的操作转换为数据库原生语句。使用<code>ORM</code>有许多优点:</p><ol><li>易用性：使用<code>ORM</code>做数据库的开发可以有效的减少重复SQL语句的概率，写出来的模型也更加直观、清晰。</li><li>性能损耗小：<code>ORM</code>转换成底层数据库操作指令确实会有一些开销。但从实际的情况来看，这种性能损耗很少（不足5%），只要不是对性能有严苛的要求，综合考虑开发效率、代码的阅读性，带来的好处要远远大于性能损耗，而且项目越大作用越明显。</li><li>设计灵活：可以轻松的写出复杂的查询。</li><li>可移植性：<code>Django</code>封装了底层的数据库实现，支持多个关系数据库引擎，包括流行的<code>MySQL</code>、<code>PostgreSQL</code>和<code>SQLite</code>。可以非常轻松的切换数据库。</li></ol><p><strong>ORM模型的创建和映射</strong></p><p><strong>创建ORM模型：</strong></p><p><code>ORM</code>模型一般都是放在<code>app</code>的<code>models.py</code>文件中。每个<code>app</code>都可以拥有自己的模型。并且如果这个模型想要映射到数据库中，那么这个<code>app</code>必须要放在<code>settings.py</code>的<code>INSTALLED_APP</code>中进行安装。以下是写一个简单的书籍<code>ORM</code>模型。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    pub_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>default<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    price <span class="token operator">=</span> models<span class="token punctuation">.</span>FloatField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上便定义了一个模型。这个模型继承自<code>django.db.models.Model</code>，如果这个模型想要映射到数据库中，就必须继承自这个类。这个模型以后映射到数据库中，表名是模型名称的小写形式，为<code>book</code>。在这个表中，有四个字段，一个为<code>name</code>，这个字段是保存的是书的名称，是<code>varchar</code>类型，最长不能超过20个字符，并且不能为空。第二个字段是作者名字类型，同样也是<code>varchar</code>类型，长度不能超过20个。第三个是出版时间，数据类型是<code>datetime</code>类型，默认是保存这本书籍的时间。第五个是这本书的价格，是浮点类型。<br>还有一个字段我们没有写，就是主键<code>id</code>，在<code>django</code>中，如果一个模型没有定义主键，那么将会自动生成一个自动增长的<code>int</code>类型的主键，并且这个主键的名字就叫做<code>id</code>。</p><p><strong>映射模型到数据库中：</strong></p><p>将<code>ORM</code>模型映射到数据库中，总结起来就是以下几步：</p><ol><li>在<code>settings.py</code>中，配置好<code>DATABASES</code>，做好数据库相关的配置。</li><li>在<code>app</code>中的<code>models.py</code>中定义好模型，这个模型必须继承自<code>django.db.models</code>。</li><li>将这个<code>app</code>添加到<code>settings.py</code>的<code>INSTALLED_APP</code>中。</li><li>在命令行终端，进入到项目所在的路径，然后执行命令<code>python manage.py makemigrations</code>来生成迁移脚本文件。</li><li>同样在命令行中，执行命令<code>python manage.py migrate</code>来将迁移脚本文件映射到数据库中。</li></ol><h3 id="定义模型类"><a href="#定义模型类" class="headerlink" title="定义模型类"></a>定义模型类</h3><p>模型类被定义在”应用/model.py”文件中</p><p>模型类必须继承自Model类，位于包django.db.models中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment"># Create your models here.</span><span class="token comment"># 准备书籍列表信息的模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建字段，字段类型...</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    readcount <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    commentcount <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'评论量'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'bookinfo'</span>  <span class="token comment"># 指明数据库表名</span>        verbose_name <span class="token operator">=</span> <span class="token string">'图书'</span>  <span class="token comment"># 在admin站点中显示的名称</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""定义每个数据对象的显示信息"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>数据库表名</p><p>模型类如果未指明表名，Django默认以<strong>小写app应用名_小写模型类名</strong>为数据库表名。</p><p>可通过<strong>db_table</strong>指明数据库表名。</p></li><li><p>关于主键</p><p>django会为表创建自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后django不会再创建自动增长的主键列。</p><p>默认创建的主键列属性为id，可以使用pk代替，pk全拼为primary key。</p></li><li><p>属性命名限制</p><p>不能是python的保留关键字</p><p>不允许使用连续的下划线，这是由django的查询方式决定的</p><p>定义属性时需要指定字段类型，通过字段类型的参数指定选项</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">属性<span class="token operator">=</span>models<span class="token punctuation">.</span>字段类型<span class="token punctuation">(</span>选项<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字段类型</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>AutoField</td><td>自动增长的IntegerField，通常不用指定，不指定时Django会自动创建属性名为id的自动增长属性</td></tr><tr><td>BooleanField</td><td>布尔字段，值为True或False</td></tr><tr><td>NullBooleanField</td><td>支持Null、True、False三种值</td></tr><tr><td>CharField</td><td>字符串，参数max_length表示最大字符个数</td></tr><tr><td>TextField</td><td>大文本字段，一般超过4000个字符时使用</td></tr><tr><td>IntegerField</td><td>整数</td></tr><tr><td>DecimalField</td><td>十进制浮点数， 参数max_digits表示总位数， 参数decimal_places表示小数位数</td></tr><tr><td>FloatField</td><td>浮点数</td></tr><tr><td>DateField</td><td>日期， 参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，它总是使用当前日期，默认为False； 参数auto_now_add表示当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为False; 参数auto_now_add和auto_now是相互排斥的，组合将会发生错误</td></tr><tr><td>TimeField</td><td>时间，参数同DateField</td></tr><tr><td>DateTimeField</td><td>日期时间，参数同DateField</td></tr><tr><td>FileField</td><td>上传文件字段</td></tr><tr><td>ImageField</td><td>继承于FileField，对上传的内容进行校验，确保是有效的图片</td></tr></tbody></table></li><li><p>选项</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>null</td><td>如果为True，表示允许为空，默认值是False</td></tr><tr><td>blank</td><td>如果为True，则该字段允许为空白，默认值是False</td></tr><tr><td>db_column</td><td>字段的名称，如果未指定，则使用属性的名称</td></tr><tr><td>db_index</td><td>若值为True, 则在表中会为此字段创建索引，默认值是False</td></tr><tr><td>default</td><td>默认</td></tr><tr><td>primary_key</td><td>若为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用</td></tr><tr><td>unique</td><td>如果为True, 这个字段在表中必须有唯一值，默认值是False</td></tr></tbody></table><p><strong>null是数据库范畴的概念，blank是表单验证范畴的</strong></p></li><li><p>外键</p></li></ol><p>在设置外键时，需要通过<strong>on_delete</strong>选项指明主表删除数据时，对于外键引用表数据如何处理，在django.db.models中包含了可选常量：</p><ul><li><strong>CASCADE</strong>级联，删除主表数据时连通一起删除外键表中数据</li><li><strong>PROTECT</strong>保护，通过抛出<strong>ProtectedError</strong>异常，来阻止删除主表中被外键应用的数据</li><li><strong>SET_NULL</strong>设置为NULL，仅在该字段null=True允许为null时可用</li><li><strong>SET_DEFAULT</strong>设置为默认值，仅在该字段设置了默认值时可用</li><li>**SET()**设置为特定值或者调用特定方法</li><li><strong>DO_NOTHING</strong>不做任何操作，如果数据库前置指明级联性，此选项会抛出<strong>IntegrityError</strong>异常</li></ul><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><ol><li><p>生成迁移文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py makemigrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>同步到数据库中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>迁移命令</strong></p><ol><li>makemigrations：将模型生成迁移脚本。模型所在的<code>app</code>，必须放在<code>settings.py</code>中的<code>INSTALLED_APPS</code>中。这个命令有以下几个常用选项：<ul><li>app_label：后面可以跟一个或者多个<code>app</code>，那么就只会针对这几个app生成迁移脚本。如果没有任何的app_label，那么会检查<code>INSTALLED_APPS</code>中所有的app下的模型，针对每一个app都生成响应的迁移脚本。</li><li>–name：给这个迁移脚本指定一个名字。</li><li>–empty：生成一个空的迁移脚本。如果你想写自己的迁移脚本，可以使用这个命令来实现一个空的文件，然后自己再在文件中写迁移脚本。</li></ul></li><li>migrate：将新生成的迁移脚本。映射到数据库中。创建新的表或者修改表的结构。以下一些常用的选项：<ul><li>app_label：将某个<code>app</code>下的迁移脚本映射到数据库中。如果没有指定，那么会将所有在<code>INSTALLED_APPS</code>中的<code>app</code>下的模型都映射到数据库中。</li><li>app_label migrationname：将某个<code>app</code>下指定名字的<code>migration</code>文件映射到数据库中。</li><li>–fake：可以将指定的迁移脚本名字添加到数据库中。但是并不会把迁移脚本转换为SQL语句，修改数据库中的表。</li><li>–fake-initial：将第一次生成的迁移文件版本号记录在数据库中。但并不会真正的执行迁移脚本。</li></ul></li><li>showmigrations：查看某个app下的迁移文件。如果后面没有app，那么将查看<code>INSTALLED_APPS</code>中所有的迁移文件。</li><li>sqlmigrate：查看某个迁移文件在映射到数据库中的时候，转换的<code>SQL</code>语句。</li></ol><h3 id="shell工具"><a href="#shell工具" class="headerlink" title="shell工具"></a>shell工具</h3><ol><li>shell工具</li></ol><p>Django的manage工具提供了<strong>shell</strong>命令，帮助我们配置好当前工程的运行环境（如连接好数据库等），以便可以直接在终端中执行测试python语句。</p><p>通过如下命令进入shell</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><ul><li><p>增加</p><p>增加数据有两种方法</p><ol><li><p>save: 通过创建模型类对象，执行对象的save()方法保存到数据库中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token punctuation">,</span>PeopleInfobook <span class="token operator">=</span> BookInfo<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'python入门'</span><span class="token punctuation">,</span>    pub_date <span class="token operator">=</span> <span class="token string">'2010-1-1'</span><span class="token punctuation">)</span>book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>create: 通过模型类.objects.create()保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">PeopleInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token punctuation">,</span>    book <span class="token operator">=</span> book<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>修改</p><ol><li><p>save: 修改模型类对象的属性，然后执行save()方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person <span class="token operator">=</span> PeopleInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'itheima'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'itcast'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person<span class="token operator">&lt;</span>PeopleInfo<span class="token punctuation">:</span> itcast<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>update: 使用模型类.objects.filter().update()，会返回受影响的行数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> PeopleInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'itcast'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'传智播客'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>删除</p><p>删除有两种方法</p><ol><li><p>模型类对象delete</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person <span class="token operator">=</span> PeopleInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'传智播客'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> person<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'book.PeopleInfo'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>模型类.objects.filter().delete()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'python入门'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'book.BookInfo'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'book.PeopleInfo'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><p>查询</p><ol><li><p>基本查询</p><p>get查询单一结果，如果不存在会抛出模型类.DoesNotExist异常</p><p>all查询多个结果</p><p>count查询结果数量</p></li><li><p>过滤查询</p><p>实现SQL中的where功能，包括:</p><p>filter过滤出多个结果</p><p>exclude排除掉符合条件剩下的结果</p><p>get过滤单一结果</p><p>过滤条件的表达语法如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">属性名称__比较运算符 <span class="token operator">=</span> 值<span class="token comment"># 属性名称和比较运算符间使用两个下划线，所以属性名不能包括多个下划线</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>相等：</li></ol><p>exact: 表示判等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__exact<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>模糊查询</li></ol><p>contains: 是否包含</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">'传'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>startswith, endswith: 以指定开头和结尾</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>name__endswith<span class="token operator">=</span><span class="token string">'部'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>空查询</li></ol><p>isnull: 是否为null</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>name__isnull<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>范围查询</li></ol><p>in: 是否包含在范围内</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__in<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>比较查询</li></ol><p>gt 大于</p><p>gte 大于等于</p><p>lt 小于</p><p>lte 小于等于</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不等于运算符，使用exclude()过滤器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>日期查询</li></ol><p>year, month, day, week_day, hour, minute, second: 对日期时间类型的属性进行运算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询1980年发表的图书BookInfo.objects.filter(pub_date__year==1980)# 查询1990年1月1日后发表的图书BookInfo.objects.filter(pub_date__gt=='1990-1-1')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul><h3 id="F和Q对象"><a href="#F和Q对象" class="headerlink" title="F和Q对象"></a>F和Q对象</h3><ul><li><p>F对象 : F(属性名)</p><p>两个属性的比较使用F对象，被定义在django.db.models中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询阅读量大于等于评论量的图书from django.db.modles import FBookInfo.objects.filter(readcount__gte=F('commentcount'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Q对象  : Q(属性名__运算符=值)</p><p><strong>多个过滤器逐个调用表示逻辑关系，同sql语句中的where部分的and关键字</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询阅读量大于20, 并且编号小于3的图书</span>BookInfo<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>readcount__gt<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> id__lt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>BookInfo<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>readcount__gt<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>id__lt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果需要实现逻辑或or的查询，需要使用Q()对象结合|运算符</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询阅读量大于20，或编号小于3的图书，</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Q<span class="token punctuation">(</span>readcount__gt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>Q<span class="token punctuation">(</span>id__lt<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Q对象使用~操作符, 表示非not</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token operator">~</span>Q<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="聚合函数和排序函数"><a href="#聚合函数和排序函数" class="headerlink" title="聚合函数和排序函数"></a>聚合函数和排序函数</h3><ul><li><p>聚合函数</p><p>使用aggregate()过滤器调用聚合函数，聚合函数包括：Avg平均，Count数量，Max最大，Min最小，Sum求和，被定义在django.db.models中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询图书的总阅读量</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> SumBookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Sum<span class="token punctuation">(</span><span class="token string">'readcount'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意: aggregate的 返回值是一个字典类型，格式如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'属性名__聚合类小写'</span><span class="token punctuation">:</span>值<span class="token punctuation">}</span>如<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'readcount__sum'</span><span class="token punctuation">:</span><span class="token number">126</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用count时一般不使用aggregate()过滤器。</p><p>例：查询图书总数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意count函数的返回值是一个数字。</p></li><li><p>排序函数</p><p>使用order_by对结果进行排序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 默认升序</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'readcount'</span><span class="token punctuation">)</span><span class="token comment"># 降序</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-readcount'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><ul><li><p>由多模型类条件查询一模型类数据:</p><p>语法如下:</p><pre class="line-numbers language-none"><code class="language-none">关联模型名名小写__属性名__条件运算符 = 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询图书,要求图书人物为'郭靖'</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>peopleinfo__name <span class="token operator">=</span> <span class="token string">'郭靖'</span><span class="token punctuation">)</span><span class="token comment"># 查询图书,要求图书中人物的描述包含'八'</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>peopleinfo__description__contains <span class="token operator">=</span> <span class="token string">'八'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>由一模型类条件查询多模型类数据:</p><p>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">一模型类关联属性名__一模型类属性名__条件运算符 <span class="token operator">=</span> 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询书名为"天龙八部"的所有人物</span>people <span class="token operator">=</span> PeopleInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>book__name<span class="token operator">=</span><span class="token string">'天龙八部'</span><span class="token punctuation">)</span><span class="token comment"># 查询图书阅读量大于30的所有人物</span>people <span class="token operator">=</span> PeopleInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>book__readcount__gt <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="查询集"><a href="#查询集" class="headerlink" title="查询集"></a>查询集</h3><ul><li><ol><li>概念</li></ol><p>Django的ORM中存在查询集的概念</p><p>查询集，也称查询结果集、QuerySet，表示从数据库中获取的对象集合。</p><p>当调用如下过滤器方法时，Django会返回查询集（而不是简单的列表）：</p><ul><li>all() : 返回所有数据</li><li>filter(): 返回满足条件的数据</li><li>exclude(): 返回满足条件以外的数据</li><li>order_by(): 对结果进行排序</li></ul><p>对查询集可以再次调用过滤器进行过滤</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>readcount__gt<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'pub_date'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就意味着查询集可以含有零个、一个或多个过滤器。过滤器基于所给的参数限制查询的结果。</p><p>判断某一查询集中是否有数据：</p><ul><li>exists(): 判断查询集中是否有数据，如果有则返回True，没有则返回False</li></ul></li><li><ol start="2"><li>两大特性<ol><li>惰性执行</li></ol></li></ol><p>创建查询集不会访问数据库，直到调用数据时，才会访问数据库，调用数据的情况包括迭代、序列化、与if合用</p><p>例如：当执行如下语句时，并未进行数据库查询，只是创建了一个查询集books</p><pre class="line-numbers language-none"><code class="language-none">books = BookInfo.objects.all()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续执行遍历迭代操作后，才真正的进行了数据库的查询</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> book <span class="token keyword">in</span> books<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>缓存</li></ol><p>使用同一个查询集，第一次使用时会发生数据库的查询，然后Django会把结果缓存下来，再次使用这个查询集时会使用缓存的数据，减少了数据库的查询次数。</p><pre class="line-numbers language-none"><code class="language-none">books = BookInfo.objects.all()[book.id for book in books][book.id for book in books]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><ol start="3"><li>限制查询集</li></ol><p>可以对查询集进行取下标或切片操作，等同于sql中的limit和offset子句。</p><p>注意: 不支持负数索引</p><p><strong>对查询集进行切片后返回一个新的查询集，不会立即执行查询。</strong></p><p>如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()如果没有数据引发DoesNotExist异常。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> books<span class="token operator">&lt;</span>QuerySet <span class="token punctuation">[</span><span class="token operator">&lt;</span>BookInfo<span class="token punctuation">:</span> 射雕英雄传<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>BookInfo<span class="token punctuation">:</span> 天龙八部<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><ol start="4"><li>分页</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询数据</span>books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 导入分页类</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginator<span class="token comment"># 创建分页类实例</span>paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 获取指定页码的数据</span>page_skus <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 获取分页数据</span>total_page <span class="token operator">=</span> paginator<span class="token punctuation">.</span>num_pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="视图介绍"><a href="#视图介绍" class="headerlink" title="视图介绍"></a>视图介绍</h3><p>视图介绍</p><ul><li><p>视图就是views.py文件中的函数</p></li><li><p>视图的第一个参数必须为HttpRequest对象，还可能包含如下参数如:</p><ul><li>通过正则表达式组获取的位置参数</li><li>通过正则表达式组获取的关键字参数</li></ul></li><li><p>视图必须返回一个HttpResponse对象或子对象作为响应</p><ul><li>子对象: JsonResponse HttpResponseRedirect</li></ul></li><li><p>视图负责接收Web请求HttpRequest，进行逻辑处理，返回Web响应HttpResponse给请求者</p><ul><li>响应内容可以是HTML内容，404错误，重定向，json数据</li></ul></li><li><p>视图处理过程如下：</p><p>使用视图时需要进行两步操作，两步操作不分前后</p><ol><li>配置URLconf</li><li>在应用/view.py中定义视图</li></ol></li></ul><h3 id="URLconf"><a href="#URLconf" class="headerlink" title="URLconf"></a>URLconf</h3><p>浏览者通过在浏览器的地址栏中输入网址请求网站</p><p>对于Django开发的网站，由哪一个视图进行处理请求，是由url匹配找到的的</p><ul><li><p>配置URLconf</p><ol><li><p>setting.py中</p><p>指定url配置</p><pre class="line-numbers language-none"><code class="language-none">ROOT_URLCONF = '项目.urls'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>项目中的urls.py中</p><p>匹配成功后，包含到应用的urls.py</p><pre class="line-numbers language-none"><code class="language-none">url(正则, include('应用.urls'))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>应用中的urls.py</p><p>匹配成功后，调用view.py对应的函数</p><pre class="line-numbers language-none"><code class="language-none">url(正则, views.函数名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>提示</p><pre class="line-numbers language-none"><code class="language-none">1. 正则部分推荐使用 r，表示字符串不转义，这样在正则表达式中使用 \ 只写一个就可以     2. 不能在开始加反斜杠，推荐在结束加反斜杠    正确：path/    正确：path    错误：/path    错误：/path/     3. 请求的url被看做是一个普通的python字符串，进行匹配时不包括域名、get或post参数    3.1 如请求地址如下：        http://127.0.0.1:8000/18/?a=10    3.2 去掉域名和参数部分后，只剩下如下部分与正则匹配        18/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="路由命名与reverse反解析"><a href="#路由命名与reverse反解析" class="headerlink" title="路由命名与reverse反解析"></a>路由命名与reverse反解析</h3><ul><li><ol><li>路由命名</li></ol><p>在定义路由的时候，可以为路由命名，方便查找特定视图的具体路径信息。</p><ol><li>在使用include函数定义路由时，可以使用namespace参数定义路由的命名空间，如:</li></ol><pre class="line-numbers language-none"><code class="language-none">url(r'^',include('book.urls',namespace='book'))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命名空间表示，凡是book.urls中定义的路由，均属于namespace指明的book名下</p><p>命名空间的作用：避免不同应用中的路由使用了相同名字发生冲突，使用命名空间区别开</p><ol start="2"><li>在定义普通路由时，可以使用name参数指明路由的名字: 如</li></ol><pre class="line-numbers language-none"><code class="language-none">urlpatterns = [    url(r'^$',index),    # 匹配书籍列表信息的URL,调用对应的bookList视图    url(r'^booklist/$',bookList,name='index'),    url(r'^testproject/$',views.testproject,name='test'),]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="2"><li>reverse反解析</li></ol><p>使用reverse函数，可以根据路由名称，返回具体的路径，如：</p><pre class="line-numbers language-none"><code class="language-none">from django.core.urlresolvers import reverse# 或from django.urls import reversedef testproject(request):    return HttpResponse("OK")# 定义视图：提供书籍列表信息def bookList(request):    url = reverse('book:test')    print(url)    return HttpResponse('index')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于未指明namespace的，reverse(路由name)</li><li>对于指明namespace的，reverse(命名空间namespace:路由name)</li></ul></li></ul><h3 id="HttpRequest对象"><a href="#HttpRequest对象" class="headerlink" title="HttpRequest对象"></a>HttpRequest对象</h3><p>利用HTTP协议向服务器传参的四种途径</p><p>​    提取URL的特定部分，如/weather/beijing/2018，可以在服务器端的路由中用正则表达式截取；</p><p>​    查询字符串（query string)，形如key1=value1&amp;key2=value2；</p><p>​    请求体（body）中发送的数据，比如表单数据、json、xml；</p><p>​    在http报文的头（header）中。</p><ul><li><p>URL路径参数</p><p>如果想从URL中获取值，需要在正则表达式中使用分组</p><p>获取值分为两种方式</p><ul><li><p>位置参数</p><p>位置参数不能错</p></li><li><p>关键字参数</p><p>参数的位置可以变，跟关键字保持一致即可</p></li></ul><p><strong>位置参数</strong></p><p>应用中urls.py</p><pre class="line-numbers language-none"><code class="language-none">url(r'^(\d+)/(\d+)/$', views.index),<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>视图中的函数: 参数的位置不能错</p><pre class="line-numbers language-none"><code class="language-none">def index(request, value1, value2):      # 构造上下文      context = {'v1':value1, 'v2':value2}      return render(request, 'Book/index.html', context)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关键字参数</strong></p><p>应用中的urls.py</p><p>​    其中?P&lt;value1&gt;部分表示为这个参数定义的名称为values</p><p>​    可以是其他名称，起名要做到见名知意</p><pre class="line-numbers language-none"><code class="language-none">url(r'^(?P&lt;value1&gt;\d+)/(?P&lt;value2&gt;\d+)/$', views.index),<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>视图中的函数：参数的位置可以变，跟关键字保持一致即可</p><pre class="line-numbers language-none"><code class="language-none">def index(request, value2, value1):      # 构造上下文      context = {'v1':value1, 'v2':value2}      return render(request, 'Book/index.html', context)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Django中的QueryDict对象</p><p>HttpRequest对象的属性GET、POST都是QueryDict类型的对象</p><p>与python字典不同，QueryDict类型的对象用来处理同一个键带有多个值的情况</p><ul><li><p>方法get()：根据键获取值</p><p>如果一个键同时拥有多个值将获取最后一个值</p><p>如果键不存在则返回None值，可以设置默认值进行后续处理</p><pre class="line-numbers language-none"><code class="language-none">get('键',默认值)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方法getlist()：根据键获取值，值以列表返回，可以获取指定键的所有值</p><p>如果键不存在则返回空列表[]，可以设置默认值进行后续处理</p><pre class="line-numbers language-none"><code class="language-none">getlist('键', 默认值)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>查询字符串Query String</p><p>获取请求路径中的查询字符串参数（形如?k1=v1&amp;k2=v2），可以通过request.GET属性获取，返回QueryDict对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># /get/?a=1&amp;b=2&amp;a=3</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>a <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>alist <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># 2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span> <span class="token comment"># ['1', '3']</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要：查询字符串不区分请求方式，即假使客户端进行POST方式的请求，依然可以通过request.GET获取请求中的查询字符串数据。</strong></p></li><li><p>请求体</p><p>请求体数据格式不固定，可以是表单类型字符串，可以是JSON字符串，可以是XML字符串，应区别对待。</p><p>可以发送请求体数据的请求方式有<strong>POST</strong>、<strong>PUT</strong>、<strong>PATCH</strong>、<strong>DELETE</strong>。</p><p><strong>Django默认开启了CSRF防护</strong>，会对上述请求方式进行CSRF防护验证，在测试时可以关闭CSRF防护机制，方法为在settings.py文件中注释掉CSRF中间件，</p><ul><li><p>表单类型 Form data</p><p>前端发送的表单类型的请求体数据，可以通过request.POST属性获取，返回QueryDict对象。</p><pre class="line-numbers language-none"><code class="language-none">def post(request):    a = request.POST.get('a')    b = request.POST.get('b')    alist = request.POST.getlist('a')    print(a)    print(b)    print(alist)    return HttpResponse('OK')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>非表单类型 Non-Form Data</p><p>非表单类型的请求体数据，Django无法自动解析，可以通过<strong>request.body</strong>属性获取最原始的请求体数据，自己按照请求体格式（JSON、XML等）进行解析。<strong>request.body返回bytes类型。</strong></p><p>例如：要获取请求体中的如下JSON数据</p><pre class="line-numbers language-none"><code class="language-none">{"a":1, "b":2}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以进行如下操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">post_json</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    json_str <span class="token operator">=</span> request<span class="token punctuation">.</span>body    json_str <span class="token operator">=</span> json_str<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    req_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>req_data<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>req_data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>请求头</p><p>可以通过<strong>request.META</strong>属性获取请求头headers中的数据，<strong>request.META为字典类型</strong>。</p><p>常见的请求头如：</p><ul><li><code>CONTENT_LENGTH</code>– The length of the request body (as a string).</li><li><code>CONTENT_TYPE</code>– The MIME type of the request body.</li><li><code>HTTP_ACCEPT</code>– Acceptable content types for the response.</li><li><code>HTTP_ACCEPT_ENCODING</code>– Acceptable encodings for the response.</li><li><code>HTTP_ACCEPT_LANGUAGE</code>– Acceptable languages for the response.</li><li><code>HTTP_HOST</code>– The HTTP Host header sent by the client.</li><li><code>HTTP_REFERER</code>– The referring page, if any.</li><li><code>HTTP_USER_AGENT</code>– The client’s user-agent string.</li><li><code>QUERY_STRING</code>– The query string, as a single (unparsed) string.</li><li><code>REMOTE_ADDR</code>– The IP address of the client.</li><li><code>REMOTE_HOST</code>– The hostname of the client.</li><li><code>REMOTE_USER</code>– The user authenticated by the Web server, if any.</li><li><code>REQUEST_METHOD</code>– A string such as<code>"GET"</code>or<code>"POST"</code>.</li><li><code>SERVER_NAME</code>– The hostname of the server.</li><li><code>SERVER_PORT</code>– The port of the server (as a string).</li></ul><p>具体使用如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_headers</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">'CONTENT_TYPE'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>其他常用的HttpRequest对象属性</p><ul><li><strong>method</strong>：一个字符串，表示请求使用的HTTP方法，常用值包括：’GET’、’POST’。</li><li><strong>user：请求的用户对象。</strong></li><li>path：一个字符串，表示请求的页面的完整路径，不包含域名和参数部分。</li><li>encoding：一个字符串，表示提交的数据的编码方式。<ul><li>如果为None则表示使用浏览器的默认设置，一般为utf-8。</li><li>这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值。</li></ul></li><li>FILES：一个类似于字典的对象，包含所有的上传文件。</li></ul></li></ul><h3 id="HttpResponse对象"><a href="#HttpResponse对象" class="headerlink" title="HttpResponse对象"></a>HttpResponse对象</h3><p>视图在接收请求并处理后，必须返回HttpResponse对象或子对象。HttpRequest对象由Django创建，HttpResponse对象由开发人员创建。</p><ul><li>HttpResponse</li></ul><p>可以使用<strong>django.http.HttpResponse</strong>来构造响应对象。</p><pre class="line-numbers language-none"><code class="language-none">HttpResponse(content=响应体, content_type=响应体数据类型, status=状态码)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可通过HttpResponse对象属性来设置响应体、响应体数据类型、状态码：</p><p>​    content: 表示返回的内容</p><p>​    status_code: 返回的HTTP响应状态码</p><p>响应头可以直接将HttpResponse对象当做字典进行响应头键值对的设置：</p><pre class="line-numbers language-none"><code class="language-none">response = HttpResponse()responsep['itcast'] = 'Python'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'itcast python'</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span>    或者    response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'itcast python'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span>status_code <span class="token operator">=</span> <span class="token number">400</span>    response<span class="token punctuation">[</span><span class="token string">'itcast'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Python'</span>    <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HttpResponse子类</li></ul><p>Django提供了一系列HttpResponse的子类，可以快速设置状态码</p><ul><li>HttpResponseRedirect 301<ul><li>HttpResponsePermanentRedirect 302</li><li>HttpResponseNotModified 304</li><li>HttpResponseBadRequest 400</li><li>HttpResponseNotFound 404</li><li>HttpResponseForbidden 403</li><li>HttpResponseNotAllowed 405</li><li>HttpResponseGone 410</li><li>HttpResponseServerError 500</li></ul></li></ul><ul><li>JsonResponse</li></ul><p>若要返回json数据，可以使用JsonResponse来构造响应对象，作用：</p><p>​    帮助我们将数据转换为json字符串</p><p>​    设置响应头<strong>Content-Type</strong>为<strong>application/json</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'subject'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>redirect重定向</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> redirect<span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/get_header'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h3><p>浏览器请求服务器是无状态的</p><p>无状态：指一次用户请求时，浏览器，服务器无法知道之前这个用户做过什么，每次请求都是一次新的请求</p><p>无状态的原因：浏览器与服务器是使用Socket套接字进行通信的，服务器将请求结果返回给浏览器之后，会关闭当前的Socket连接，而且服务器也会在处理页面完毕之后销毁页面对象。</p><p>有时需要保持下来用户浏览的状态，比如用户是否登录过，浏览过哪些商品等</p><p>实现状态保持主要有两种状态：</p><p>​    在客户端存储信息使用Cookie</p><p>​    在服务端存储信息使用Session</p><ul><li><p>Cookie</p><p>Cookie是存储在浏览器中的一段纯文本信息，建议不要存储敏感信息如密码，因为电脑上的浏览器可能被其它人使用。</p><p><strong>Cookie的特点</strong></p><p>Cookie以键值对的格式进行信息的存储</p><p>Cookie基于域名安全，不同域名的Cookie是不能互相访问的，如访问itcast.cn时向浏览器中写入Cookie信息，使用同一浏览器baidu.com时，无法访问到itcast.cn写的Cookie信息</p><p>当浏览器请求某网站时，会将浏览器存储的跟网站相关的所有Cookie信息提交给网站服务器</p><ul><li><ol><li>设置Cookie</li></ol></li></ul><p>可以通过HttpResponse对象中的set_cookie方法来设置cookie</p><pre class="line-numbers language-none"><code class="language-none">HttpResponse.set_cookie(cookie名, value=cookie值, max_age=cookie有效期)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>max_age单位为秒，默认为None，如果是临时cookie，可将max_age设置为None</p><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cookie</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span>    response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'itcast1'</span><span class="token punctuation">,</span><span class="token string">'python1'</span><span class="token punctuation">)</span> <span class="token comment"># 临时cookie</span>    response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'itcast2'</span><span class="token punctuation">,</span><span class="token string">'python2'</span><span class="token punctuation">,</span>max_age<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span> <span class="token comment"># 有效期一小时</span>    <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol start="2"><li>读取Cookie</li></ol></li></ul><p>可以通过HttpRequest对象的COOKIES属性来读取本次请求携带的cookie值，request.COOKIES为字典类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cookie</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    cookie1 <span class="token operator">=</span> request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'itcast1'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol start="3"><li>删除Cookie</li></ol></li></ul><p>可以通过HttpResponse对象中的delete_cookie方法来删除</p><pre class="line-numbers language-none"><code class="language-none">response.delete_cookie('itcast2')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Session</p><ol><li><p>启用Session</p><p>Django项目默认启用Session，如需禁用session，将session中间件注释掉即可</p></li><li><p>存储方式</p><p>在setting.py文件中，可以设置session数据的存储方式，可以保存在数据库、本地缓存等</p><p><strong>2.1 数据库</strong></p><p>存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式</p><pre class="line-numbers language-none"><code class="language-none">SESSION_ENGINE = 'django.contrib.sessions.backends.db'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果存储在数据库中，需要在项INSTALLED_APPS中安装Session应用</p><p>由表结构可知，操作Session包括三个数据: 键，值，过期时间</p><p><strong>2.2 本地缓存</strong></p><p>存储在本地内存中，如果丢失则不能找回，比数据库的方式读写更快</p><pre class="line-numbers language-none"><code class="language-none">SESSION_ENGINE='django.contrib.sessions.backends.cache'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.3 混合存储</strong></p><p>优先从本机内存中存取，如果没用则从数据库中存取</p><pre class="line-numbers language-none"><code class="language-none">SESSION_ENGINE='django.contrib.sessions.backends.cache_db'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.4 Redis</strong></p><p>在redis中保存session，需要引入第三方扩展，可以使用django-redis来解决</p><p>1）安装配置</p><pre class="line-numbers language-none"><code class="language-none">pip install django-redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>配置</li></ol><p>在setting.py文件中做如下设置</p><pre class="line-numbers language-none"><code class="language-none">CACHES={'default':{'BACKEND': 'django_redis.cache.RedisCache',        'LOCATION': 'redis://127.0.0.1:6379/1',        'OPTIONS': {           'CLIENT_CLASS': 'django_redis.client.DefaultClient',}}SESSION_ENGINE = 'django.contrib.session.backends.cache'SESSION_CACHE_ALIAS = 'default'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Session操作</p></li></ol><p>通过HttpRequest对象的session属性进行会话的读写操作</p><p>1）以键值对的格式写session</p><pre class="line-numbers language-none"><code class="language-none">request.session['键'] = 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）根据键读值</p><pre class="line-numbers language-none"><code class="language-none">request.session.get('键', 默认值)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）清除所有的session,在存储中删除值的部分</p><pre class="line-numbers language-none"><code class="language-none">request.session.clear()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）清除所有的session,在存储中删除session的整条数据</p><pre class="line-numbers language-none"><code class="language-none">request.session.flush()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）删除session中的指定键和值，在存储中只删除某个键对应的值</p><pre class="line-numbers language-none"><code class="language-none">del request.session['键']<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6）设置session的有效期</p><pre class="line-numbers language-none"><code class="language-none">request.session.set_expiry(value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果value是一个整数，session将在value秒没有活动后过期。</li><li>如果value为0，那么用户session的Cookie将在用户的浏览器关闭时过期。</li><li>如果value为None，那么session有效期将采用系统默认值， <strong>默认为两周</strong>，可以通过在settings.py中设置<strong>SESSION_COOKIE_AGE</strong>来设置全局默认值。</li></ul></li></ul><h3 id="类视图和中间件"><a href="#类视图和中间件" class="headerlink" title="类视图和中间件"></a>类视图和中间件</h3><ul><li>类视图</li></ul><p>注册视图处理get和post请求</p><p>以函数的方式定义的视图称为<strong>函数视图</strong>，函数视图便于理解，但是遇到一个视图对应的路径提供了多种不同HTTP请求方式的支持时，便需要在一个函数中编写不同的业务逻辑，代码可读性与复用性都不佳</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 处理注册        # 获取请求方式, 判断GET/POST请求    if request.method = 'GET':        # 处理GET请求, 返回注册页面        return render(request, 'register.html')    else:        # 处理POST请求, 实现注册逻辑        return HttpResponse('这里实现注册逻辑')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>类视图的使用</strong></p><p>​    在Django中也可以使用类定义一个视图，称为类视图</p><p>​    使用类视图可以将视图对应的不同请求方式以类中不同方法来区别定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> Views<span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""类视图: 处理注册"""</span>        <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""处理GET请求, 返回注册页面"""</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'registerview.html'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""处理POST请求, 实现注册逻辑"""</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'这里实现注册逻辑'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类视图的好处:</p><p>​    <strong>代码可读性高</strong></p><p>​    <strong>类视图相对于函数视图有更高的复用性</strong>，如果其他地方需要用到某个类视图的某个特定逻辑，直接继承该类视图即可。</p><p>定义类视图需要继承自Django提供的父类View，可使用from django.views.generic import View，或者from django.views.generic.base import View导入，</p><p>配置路由时，使用类视图的as_view()方法来添加    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 视图函数：注册</span>    <span class="token comment"># url(r'^register/$', views.register,name='register'),</span>    <span class="token comment"># 类视图:注册</span>    url<span class="token punctuation">(</span><span class="token string">r'^reguster/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>RegisterView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>类视图的原理</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@classonlymethod</span><span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Main entry point for a request-response process.    """</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>get        self<span class="token punctuation">.</span>request <span class="token operator">=</span> request        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args        self<span class="token punctuation">.</span>kwargs <span class="token operator">=</span> kwargs        <span class="token comment"># 调用dispatch方法，按照不同请求方式调用不同请求方法</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 返回真正的函数视图</span>    <span class="token keyword">return</span> view<span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Try to dispatch to the right method; if a method doesn't exist,</span>    <span class="token comment"># defer to the error handler. Also defer to the error handler if the</span>    <span class="token comment"># request method isn't on the approved list.</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>http_method_names<span class="token punctuation">:</span>        handler <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">.</span>method<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>http_method_not_allowed<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        handler <span class="token operator">=</span> self<span class="token punctuation">.</span>http_method_not_allowed    <span class="token operator">=</span><span class="token keyword">return</span> handler<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>类视图的多继承重新dispatch</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CenterView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span>    <span class="token comment"># 使用面向对象多继承的特性</span><span class="token keyword">class</span> <span class="token class-name">CenterView</span><span class="token punctuation">(</span>LoginRequireMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>中间件</li></ul><p>Django中的中间件是一个轻量级，底层的插件系统，可以介入Django的请求和响应处理过程，修改Django的输入输出，中间件的设计为开发者提供了一种无侵入式的开发方式，增强了Django框架的健壮性</p><p><strong>中间件的定义方式</strong></p><p>定义一个中间件工厂函数，然后返回一个可以被调用的中间件，</p><p>中间件工厂函数需要接收一个可以调用get_response对象。</p><p>返回的中间件也是一个可以被调用的对象，并且像视图一样需要接收一个request对象参数，返回一个response对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">simple_middleware</span><span class="token punctuation">(</span>get_request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 此处编写的代码仅在Django第一次配置和初始化的时候执行一次</span>            <span class="token keyword">def</span> <span class="token function">middleware</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 此处编写的代码会在每个请求处理视图前被调用</span>                        response <span class="token operator">=</span> get_request<span class="token punctuation">(</span>request<span class="token punctuation">)</span>                        <span class="token comment"># 此处编写的代码会在每个请求视图后被调用</span>       <span class="token keyword">return</span> response     <span class="token keyword">return</span> middleware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_middleware</span><span class="token punctuation">(</span>get_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'init 被调用'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">middleware</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before request 被调用'</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> get_response<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after response 被调用'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> middleware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义好中间件后，需要在settings.py 文件中添加注册中间件</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.middleware.security.SecurityMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    <span class="token comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span>    <span class="token string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'book.middleware.my_middleware'</span><span class="token punctuation">,</span>  <span class="token comment"># 添加中间件</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个视图进行测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">middleware</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'view 视图被调用'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：Django运行在调试模式下，中间件init部分有可能被调用两次。</strong></p><p><strong>多个中间件的执行顺序</strong></p><ul><li>在请求视图被处理前，中间件由上至下依次执行</li><li>在请求视图被处理后，中间件由下至上依次执行</li></ul><p>示例:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义两个中间件</span><span class="token keyword">def</span> <span class="token function">my_middleware</span><span class="token punctuation">(</span>get_response<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'init被调用'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">middleware</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before request被调用'</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> get_response<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after request 被调用'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> response    <span class="token keyword">return</span> middleware<span class="token keyword">def</span> <span class="token function">my_middleware2</span><span class="token punctuation">(</span>get_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'init2 被调用'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">middleware</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before request 2 被调用'</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> get_response<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after response 2 被调用'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> middleware<span class="token comment"># 注册添加两个中间件</span>MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.middleware.security.SecurityMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    <span class="token comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span>    <span class="token string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages.middleware.MessageMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class="token punctuation">,</span>    <span class="token string">'users.middleware.my_middleware'</span><span class="token punctuation">,</span>  <span class="token comment"># 添加</span>    <span class="token string">'users.middleware.my_middleware2'</span><span class="token punctuation">,</span>  <span class="token comment"># 添加</span><span class="token punctuation">]</span><span class="token comment"># 执行结果</span>init2 被调用init 被调用before request 被调用before request <span class="token number">2</span> 被调用view 视图被调用after response <span class="token number">2</span> 被调用after response 被调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h2><h3 id="Django使用自带模板"><a href="#Django使用自带模板" class="headerlink" title="Django使用自带模板"></a>Django使用自带模板</h3><p>在工程中创建模板目录templates</p><p>在setting.py配置文件中修改TEMPLATES配置项的DIRS值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.django.DjangoTemplates'</span><span class="token punctuation">,</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 此处修改</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在templates目录中新建一个模板文件，如index.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>{{ city }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用模板分为两步骤：</p><ol><li>找到模板loader.get_templates(模板文件在模板目录中的相对路径) -&gt; 返回模板对象</li><li>渲染模板  模板对象.render(context=None, request=None) -&gt; 返回渲染后的html文本字符串 context为模板变量字典，默认值为None request为请求对象，默认值为None</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> loader<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1. 获取模板</span>    template <span class="token operator">=</span> loader<span class="token punctuation">.</span>get_templates<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'city'</span><span class="token punctuation">:</span><span class="token string">'北京'</span><span class="token punctuation">}</span>    <span class="token comment"># 2. 渲染模板</span>    <span class="token keyword">return</span> HttpResoponse<span class="token punctuation">(</span>templates<span class="token punctuation">.</span>render<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    Django提供了一个函数render可以简写上述代码</p><p>render(request对象，模板文件路径，模板数据字典)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'city'</span><span class="token punctuation">:</span><span class="token string">'北京'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'北京'</span><span class="token punctuation">,</span>        <span class="token string">'adict'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'西游记'</span><span class="token punctuation">,</span>            <span class="token string">'author'</span><span class="token punctuation">:</span> <span class="token string">'吴承恩'</span>        <span class="token punctuation">}</span>        <span class="token string">'alist'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>过滤器</li></ul><p>​    使用管道符号来应用过滤器，用于进行计算，转换操作，可以使用在变量，标签中</p><p>​    如果过滤器需要参数，则使用冒号:传递参数</p><pre class="line-numbers language-none"><code class="language-none">变量|过滤器: 参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列举如下:</p><p>​    safe，禁用转义，告诉模块这个变量是安全的，可以解释执行</p><p>​    length，长度，然后字符串包含字符的个数，或列表，元组，字典的元素个数</p><p>​    default，默认值，如果变量不存在则返回默认值</p><pre class="line-numbers language-none"><code class="language-none">data|default:'默认值'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    date，日期，用于对日期类型的值进行字符串格式化，常用的格式化字符串如下：</p><p>​        Y表示年，格式为4位，y表示两位的年</p><p>​        m表示月，格式为01,02,12等</p><p>​        d表示日，格式为01，02等</p><p>​        H表示时，24进制，h表示12进制的时</p><p>​        i表示分，为0-59</p><p>​        s表示秒，为0-59</p><pre class="line-numbers language-none"><code class="language-none">value|date:"Y年m月j日 H时i分s秒"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Djago使用Jinja2模板"><a href="#Djago使用Jinja2模板" class="headerlink" title="Djago使用Jinja2模板"></a>Djago使用Jinja2模板</h3><p>由于django默认模板引擎功能不齐全,速度慢，所以我们也可以在Django中使用jinja2, jinja2宣称比django默认模板引擎快10-20倍。</p><p>Django主流的第三方APP基本上也都同时支持Django默认模板及jinja2，所以要用jinja2也不会有多少障碍。</p><p><strong>安装jinja2</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install jinja2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Django配置jinja2</strong></p><ol><li>在项目文件中创建jinja2_env.py文件</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> jinja2 <span class="token keyword">import</span> Environment<span class="token keyword">def</span> <span class="token function">environment</span><span class="token punctuation">(</span><span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>    env <span class="token operator">=</span> Environment<span class="token punctuation">(</span><span class="token operator">**</span>options<span class="token punctuation">)</span>        <span class="token keyword">return</span> env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在setting.py</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.template.backends.jinja2.Jinja2'</span><span class="token punctuation">,</span><span class="token comment">#修改1</span>        <span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'APP_DIRS'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'environment'</span><span class="token punctuation">:</span> <span class="token string">'jinja2_env.environment'</span><span class="token punctuation">,</span><span class="token comment"># 修改2</span>            <span class="token string">'context_processors'</span><span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token string">'django.template.context_processors.debug'</span><span class="token punctuation">,</span>                <span class="token string">'django.template.context_processors.request'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.auth.context_processors.auth'</span><span class="token punctuation">,</span>                <span class="token string">'django.contrib.messages.context_processors.messages'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>jinja2模板的使用绝大数和Django自带模板一样</strong></p><p><strong>jinja2自定义过滤器</strong></p><p>在jinja2_env.py文件中自定义过滤器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> jinja2 <span class="token keyword">import</span> Environment<span class="token keyword">def</span> <span class="token function">environment</span><span class="token punctuation">(</span><span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>    env <span class="token operator">=</span> Environment<span class="token punctuation">(</span><span class="token operator">**</span>options<span class="token punctuation">)</span>    <span class="token comment"># 2.将自定义的过滤器添加到 环境中</span>    env<span class="token punctuation">.</span>filters<span class="token punctuation">[</span><span class="token string">'do_listreverse'</span><span class="token punctuation">]</span> <span class="token operator">=</span> do_listreverse    <span class="token keyword">return</span> env<span class="token comment"># 1.自定义过滤器</span><span class="token keyword">def</span> <span class="token function">do_listreverse</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> li <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"哈哈"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF译为跨站请求伪造</p><p>CSRF指攻击者盗用了你的身份，以你的名义发送恶意请求</p><p>​    包括：以你的名义发送邮件，发消息，盗取你的账户，甚至于购买商品，虚拟货币转账……</p><p>造成的问题：个人隐私泄露以及财产安全</p><p><strong>CSRF攻击示意图</strong></p><p>客户端访问服务器时没有同服务器做安全验证</p><p><strong>防止CSRF攻击</strong></p><ol><li>在客户端向后端请求界面数据的时候，后端会往响应中的 cookie 中设置 csrf_token 的值</li><li>在 Form 表单中添加一个隐藏的的字段，值也是 csrf_token</li><li>在用户点击提交的时候，会带上这两个值向后台发起请求</li><li>后端接受到请求，以会以下几件事件：<ol><li>从cookie中取出csrf_token</li><li>从表单数据中取出来隐藏的csrf_token的值</li><li>进行对比</li></ol></li><li>如果比较之后两值一样，那么代表是正常的请求，如果没取到或者比较不一样，代表不是正常的请求，不执行下一步操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础_函数</title>
      <link href="2021/06/06/python-ji-chu-han-shu/"/>
      <url>2021/06/06/python-ji-chu-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>作用：封装代码，高效的代码重用函数就是将一段具有独立功能的代码块整合到一个整体并命名，在需要的位置调用这个名称即可完成对应的需求。</p></li><li><p>步骤：先定义后调用（函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()）</p></li><li><p>参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</p><ul><li><p>形参：函数定义时书写的参数(非真实数据)</p></li><li><p>实参：函数调用时书写的参数(真实数据)</p></li><li><p>位置参数</p><ol><li>调用函数时根据函数定义的参数位置来传递参数</li><li>传递和定义参数的顺序及个数必须一致</li></ol></li><li><p>关键字参数</p><ul><li>函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</li><li>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</li></ul></li><li><p>不定长参数 *args 和  **kwargs</p><ul><li> *args：</li></ul>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 前面加个 * ，表示为可变参数，其中 * 是规定的，args可用其他名称替换，但一般习惯用 args 来表示。可变参数在传入函数后，被封装成一个 tuple(元祖)来进行使用</span><span class="token keyword">def</span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># tuple</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># int</span>numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>**kwargs</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 是一个字典，传入的参数以键值对的形式存放到字典里。</span><span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>name<span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>name<span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>变量作用域</p><ul><li>全局：函数体内外都能生效(global)</li><li>局部：当前函数体内部生效(在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。)</li></ul></li><li><p>递归函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数内部自己调用自己</span><span class="token comment"># 必须有出口</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> fact<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>拆包</p><ul><li><p>对于可迭代对象，如元组、列表、字符串、集合、字典这些可迭代对象都可以被拆包，拆包是指将一个结构中的数据拆分为多个单独变量中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 以变量的方式来接收</span><span class="token comment"># 用‘*’号</span><span class="token keyword">def</span> <span class="token function">return_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span>num1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> return_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>  <span class="token comment"># 100</span><span class="token keyword">print</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>  <span class="token comment"># 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>lambda 表达式</p><ul><li><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> 参数列表 ： 表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。</p></li><li><p>lambda表达式能接收任何数量的参数但只能返回一个表达式的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 函数</span><span class="token keyword">def</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># lambda表达式</span>fn2 <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p></blockquote></li></ul></li></ul><pre><code>参数形式：1. 无参数<pre class="line-numbers language-python" data-language="python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>2. 一个参数<pre class="line-numbers language-python" data-language="python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>3. 默认参数<pre class="line-numbers language-python" data-language="python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>4. 可变参数：*args<pre class="line-numbers language-python" data-language="python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> args<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>&gt; 注意：这里的可变参数传入到lambda之后，返回值为元组。4. 可变参数：**kwargs<pre class="line-numbers language-python" data-language="python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> kwargs<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> lambda的应用带判断的lambda<pre class="line-numbers language-python" data-language="python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>5. 列表数据按字典key的值排序<pre class="line-numbers language-python" data-language="python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'ROSE'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment"># 按name值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment"># 按name值降序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment"># 按age值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><ol><li><p>概述：把函数作为参数传入，化简代码</p><ol><li><p>map: 把迭代器中的元素作用到函数中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>abs: 求绝对值</p></li><li><p>round: 四舍五入</p></li><li><p>reduce: 把序列中的元素从左到右进行累计计算</p></li><li><p>filter: 把迭代器中的元素按照传入的函数进行过滤,返回值是filter对象</p></li></ol></li><li><p>迭代器</p><ol><li>迭代器是一个可以记住遍历的位置的对象</li><li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退</li><li>两个基本的方法<ul><li><strong>iter</strong>() <ul><li>返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成</li></ul></li><li><strong>next</strong>()<ul><li>返回下一个迭代器对象</li><li>StopIteration<ul><li>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong>() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</li></ul></li></ul></li></ul></li></ol></li><li><p>生成器</p><ul><li>生成器是迭代器的一种，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器</li></ul></li></ol><h2 id="文件操作步骤"><a href="#文件操作步骤" class="headerlink" title="文件操作步骤"></a>文件操作步骤</h2><h5 id="打开文件模式"><a href="#打开文件模式" class="headerlink" title="打开文件模式"></a>打开文件模式</h5><table><thead><tr><th align="center">模式</th><th>描述</th></tr></thead><tbody><tr><td align="center">r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p></blockquote><ul><li><p>文件对象方法</p><ul><li><p>写</p><pre class="line-numbers language-none"><code class="language-none">对象对象.write('内容')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment"># 2.文件写入</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ol><li><code>w    </code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote></li><li><p>读</p><ul><li><p>read()</p><pre class="line-numbers language-none"><code class="language-none">文件对象.read(num)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote></li><li><p>readlines()</p><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>readline()</p><p>readline()一次读取一行内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第一行：</span><span class="token interpolation"><span class="token punctuation">{</span>content<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第二行：</span><span class="token interpolation"><span class="token punctuation">{</span>content<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>seek()</p><p>作用：用来移动文件指针。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>偏移量<span class="token punctuation">,</span> 起始位置<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul></blockquote></li></ul></li><li><p>关闭</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">文件对象<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h5 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h5><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><ul><li><p>步骤</p><ul><li>接收用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据</li></ul></li><li><p> 代码实现</p></li><li><p>接收用户输入目标文件名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要备份的文件名：'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>规划备份文件名</p><ul><li><p>提取目标文件后缀</p></li><li><p>组织备份的文件名，xx[备份]后缀</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 2.1 提取文件后缀点的下标</span>index <span class="token operator">=</span> old_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment"># print(index)  # 后缀中.的下标</span><span class="token comment"># print(old_name[:index])  # 源文件名（无后缀）</span><span class="token comment"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span>new_name <span class="token operator">=</span> old_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> old_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 打印新文件名（带后缀）</span><span class="token comment"># print(new_name)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>备份文件写入数据</p><ul><li>打开源文件 和 备份文件</li><li>将源文件数据写入备份文件</li><li>关闭文件</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 3.1 打开文件</span>old_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>old_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment"># 3.2 将源文件数据写入备份文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token comment"># 3.3 关闭文件</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考：</p><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p><p>答：添加条件判断即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">old_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入您要备份的文件名：'</span><span class="token punctuation">)</span>index <span class="token operator">=</span> old_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">if</span> index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    postfix <span class="token operator">=</span> old_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>new_name <span class="token operator">=</span> old_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> postfixold_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>old_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">)</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="文件和文件夹的操作"><a href="#文件和文件夹的操作" class="headerlink" title="文件和文件夹的操作"></a>文件和文件夹的操作</h5><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li>导入os模块</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用<code>os</code>模块相关功能</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>文件重命名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>目标文件名<span class="token punctuation">,</span> 新文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>删除文件</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>目标文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>创建文件夹</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>文件夹名字<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>删除文件夹</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span>文件夹名字<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>获取当前目录</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>改变默认目录</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>目录<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>获取目录列表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>目录<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用案例：</p><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><ul><li>步骤</li></ul><ol><li>设置添加删除字符串的的标识</li><li>获取指定目录的所有文件</li><li>将原有文件名添加/删除指定字符串，构造新名字</li><li>os.rename()重命名</li></ol><ul><li>代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 获取指定目录</span>dir_name <span class="token operator">=</span> <span class="token string">'./'</span><span class="token comment"># 获取指定目录的文件列表</span>file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token comment"># print(file_list)</span><span class="token comment"># 遍历文件列表内的文件</span><span class="token keyword">for</span> name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>    <span class="token comment"># 添加指定字符</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        new_name <span class="token operator">=</span> <span class="token string">'Python-'</span> <span class="token operator">+</span> name    <span class="token comment"># 删除指定字符</span>    <span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'Python-'</span><span class="token punctuation">)</span>        new_name <span class="token operator">=</span> name<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># 打印新文件名，测试程序正确性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>        <span class="token comment"># 重命名</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>dir_name<span class="token operator">+</span>name<span class="token punctuation">,</span> dir_name<span class="token operator">+</span>new_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>了解异常</li></ul><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><ul><li><p>异常的写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生错误的代码<span class="token keyword">except</span><span class="token punctuation">:</span>    如果出现异常执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>需求：尝试以<code>r</code>模式打开文件，如果文件不存在，则以<code>w</code>方式打开。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>捕获指定异常</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    可能发生错误的代码<span class="token keyword">except</span> 异常类型<span class="token punctuation">:</span>    如果捕获到该异常类型执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">except</span> NameError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ol><li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li><li>一般try下方只放一行尝试执行的代码。</li></ol></blockquote><ul><li>捕获多个指定异常</li></ul><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>捕获异常描述信息</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>NameError<span class="token punctuation">,</span> ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>捕获所有异常</li></ul><p>Exception是所有程序异常类的父类。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异常的else</li></ul><p>else表示的是如果没有异常要执行的代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是else，是没有异常的时候执行的代码'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异常的finally</li></ul><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有异常，真开心'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异常的传递</li></ul><p>体验异常传递</p><p>需求：</p><p>​    1. 尝试只读方式打开test.txt文件，如果文件存在则读取文件内容，文件不存在则提示用户即可。</p><p>​    2. 读取内容要求：尝试循环读取内容，读取过程中如果检测到用户意外终止程序，则<code>except</code>捕获异常并提示用户。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token comment"># 如果在读取文件的过程中，产生了异常，那么就会捕获到</span>        <span class="token comment"># 比如 按下了 ctrl+c</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'意外终止了读取数据'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'关闭文件'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有这个文件"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自定义异常</li></ul><p>在Python中，抛出自定义异常的语法为<code> raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足3位，则报错，即抛出自定义异常，并捕获该异常）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自定义异常类，继承Exception</span><span class="token keyword">class</span> <span class="token class-name">ShortInputError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">,</span> min_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>min_len <span class="token operator">=</span> min_len    <span class="token comment"># 设置抛出异常的描述信息</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'你输入的长度是</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>length<span class="token punctuation">}</span></span><span class="token string">, 不能少于</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>min_len<span class="token punctuation">}</span></span><span class="token string">个字符'</span></span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        con <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码：'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ShortInputError<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码已经输入完成'</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li><p>面向对象三大特性</p><ul><li>封装<ul><li>将属性和方法书写到类的里面的操作即为封装</li><li>封装可以为属性和方法添加私有权限</li></ul></li><li>继承<ul><li>子类默认继承父类的所有属性和方法</li><li>子类可以重写父类属性和方法</li></ul></li><li>多态<ul><li>传入不同的对象，产生不同的结果</li></ul></li></ul></li><li><p>多态</p><ul><li><p>了解多态</p><p>多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</p><ul><li>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</li><li>好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</li><li>实现步骤：<ul><li>定义父类，并提供公共方法</li><li>定义子类，并重写父类方法</li><li>传递子类对象给调用者，可以看到不同子类执行效果不同</li></ul></li></ul></li><li><p>体验多态</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 父类提供统一的方法，哪怕是空方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指哪打哪...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ArmyDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 继承Dog类</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 子类重写父类同名方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'追击敌人...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DrugDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'追查毒品...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">work_with_dog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 传入不同的对象，执行不同的代码，即不同的work函数</span>        dog<span class="token punctuation">.</span>work<span class="token punctuation">(</span><span class="token punctuation">)</span>ad <span class="token operator">=</span> ArmyDog<span class="token punctuation">(</span><span class="token punctuation">)</span>dd <span class="token operator">=</span> DrugDog<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>work_with_dog<span class="token punctuation">(</span>ad<span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>work_with_dog<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>类属性和实例属性</p><ul><li><p>类属性</p><ul><li><p>设置和访问类属性</p><ul><li><p>类属性就是 <strong>类对象</strong> 所拥有的属性，它被 <strong>该类的所有实例对象 所共有</strong>。</p><ul><li><p>类属性可以使用 <strong>类对象</strong> 或 <strong>实例对象</strong> 访问。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tooth <span class="token operator">=</span> <span class="token number">10</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaohei <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>wangcai<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaohei<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>类属性的优点</p><ul><li><strong>记录的某项数据 始终保持一致时</strong>，则定义类属性。</li><li><strong>实例属性</strong> 要求 <strong>每个对象</strong> 为其 <strong>单独开辟一份内存空间</strong> 来记录数据，而 <strong>类属性</strong> 为全类所共有 ，<strong>仅占用一份内存</strong>，<strong>更加节省内存空间</strong>。</li></ul></blockquote></li></ul></li></ul></li><li><p>修改类属性</p><p>类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tooth <span class="token operator">=</span> <span class="token number">10</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaohei <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 修改类属性</span>Dog<span class="token punctuation">.</span>tooth <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>wangcai<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaohei<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 12</span><span class="token comment"># 不能通过对象修改属性，如果这样操作，实则是创建了一个实例属性</span>wangcai<span class="token punctuation">.</span>tooth <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>wangcai<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 20</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaohei<span class="token punctuation">.</span>tooth<span class="token punctuation">)</span>  <span class="token comment"># 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>实例属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">def</span> <span class="token function">info_print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wangcai<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment"># 5</span><span class="token comment"># print(Dog.age)  # 报错：实例属性不能通过类访问</span>wangcai<span class="token punctuation">.</span>info_print<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>类方法和静态方法</p><ul><li><p>类方法</p><ul><li><p>类方法特点</p><ul><li>需要用装饰器<code>@classmethod</code>来标识其为类方法，对于类方法，<strong>第一个参数必须是类对象</strong>，一般以<code>cls</code>作为第一个参数。</li></ul></li><li><p>类方法使用场景</p><ul><li><p>当方法中 <strong>需要使用类对象</strong> (如访问私有类属性等)时，定义类方法</p></li><li><p>类方法一般和类属性配合使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __tooth <span class="token operator">=</span> <span class="token number">10</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">get_tooth</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__toothwangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> wangcai<span class="token punctuation">.</span>get_tooth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>静态方法</p><ul><li><p>静态方法特点</p><ul><li>需要通过装饰器<code>@staticmethod</code>来进行修饰，<strong>静态方法既不需要传递类对象也不需要传递实例对象（形参没有self/cls）</strong>。</li><li>静态方法 也能够通过 <strong>实例对象</strong> 和 <strong>类对象</strong> 去访问。</li></ul></li><li><p>静态方法使用场景</p><ul><li><p>当方法中 <strong>既不需要使用实例对象</strong>(如实例对象，实例属性)，<strong>也不需要使用类对象</strong> (如类属性、类方法、创建实例等)时，定义静态方法</p></li><li><p><strong>取消不需要的参数传递</strong>，有利于 <strong>减少不必要的内存占用和性能消耗</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">info_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个狗类，用于创建狗实例....'</span><span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 静态方法既可以使用对象访问又可以使用类访问</span>wangcai<span class="token punctuation">.</span>info_print<span class="token punctuation">(</span><span class="token punctuation">)</span>Dog<span class="token punctuation">.</span>info_print<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>继承的概念</p><p>生活中的继承，一般指的是子女继承父辈的财产。</p><ul><li><p>拓展1：经典类或旧式类</p><p>不由任意内置类型派生出的类，称之为经典类。</p></li></ul></li><li><p>拓展2：新式类</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> 类名<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 父类A</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">info_print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token comment"># 子类B</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>result <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>info_print<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类。</p></blockquote><ul><li>单继承</li></ul><blockquote><p>故事主线：一个煎饼果子老师傅，在煎饼果子界摸爬滚打多年，研发了一套精湛的摊煎饼果子的技术。师父要把这套技术传授给他的唯一的最得意的徒弟。</p></blockquote><p>分析：徒弟是不是要继承师父的所有技术？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 师父类</span><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>        <span class="token comment"># 2. 徒弟类</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 3. 创建对象daqiu</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 4. 对象访问实例属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>daqiu<span class="token punctuation">.</span>kongfu<span class="token punctuation">)</span><span class="token comment"># 5. 对象调用实例方法</span>daqiu<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多继承</li></ul><blockquote><p>故事推进：daqiu是个爱学习的好孩子，想学习更多的煎饼果子技术，于是，在百度搜索到黑马程序员，报班学习煎饼果子技术。</p></blockquote><p>所谓多继承意思就是一个类同时继承了多个父类。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token comment"># 创建学校类</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">,</span> Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>daqiu<span class="token punctuation">.</span>kongfu<span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</p></blockquote><ul><li>子类重写父类同名方法和属性</li></ul><blockquote><p>故事：daqiu掌握了师父和培训的技术后，自己潜心钻研出自己的独门配方的一套全新的煎饼果子技术。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token comment"># 独创配方</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">,</span> Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[独创煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>daqiu<span class="token punctuation">.</span>kongfu<span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Prentice<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</p></blockquote><ul><li>子类调用父类的同名方法和属性</li></ul><blockquote><p>故事：很多顾客都希望也能吃到古法和黑马的技术的煎饼果子。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">,</span> Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[独创煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span>        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>    <span class="token comment"># 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span>    <span class="token keyword">def</span> <span class="token function">make_master_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Master<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        Master<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_school_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        School<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        School<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_master_cake<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_school_cake<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多层继承</li></ul><blockquote><p>故事：N年后，daqiu老了，想要把所有技术传承给自己的徒弟。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">,</span> Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[独创煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_master_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Master<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        Master<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_school_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        School<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        School<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment"># 徒孙类</span><span class="token keyword">class</span> <span class="token class-name">Tusun</span><span class="token punctuation">(</span>Prentice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>xiaoqiu <span class="token operator">=</span> Tusun<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoqiu<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoqiu<span class="token punctuation">.</span>make_school_cake<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoqiu<span class="token punctuation">.</span>make_master_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>super()调用父类方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span>Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>        <span class="token comment"># 方法2.1</span>        <span class="token comment"># super(School, self).__init__()</span>        <span class="token comment"># super(School, self).make_cake()</span>        <span class="token comment"># 方法2.2</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[独创煎饼果子技术]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>    <span class="token comment"># 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span>    <span class="token keyword">def</span> <span class="token function">make_master_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Master<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        Master<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_school_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        School<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        School<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment"># 一次性调用父类的同名属性和方法</span>    <span class="token keyword">def</span> <span class="token function">make_old_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span>        <span class="token comment"># Master.__init__(self)</span>        <span class="token comment"># Master.make_cake(self)</span>        <span class="token comment"># School.__init__(self)</span>        <span class="token comment"># School.make_cake(self)</span>        <span class="token comment"># 方法二: super()</span>        <span class="token comment"># 方法2.1 super(当前类名, self).函数()</span>        <span class="token comment"># super(Prentice, self).__init__()</span>        <span class="token comment"># super(Prentice, self).make_cake()</span>        <span class="token comment"># 方法2.2 super().函数()</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span>daqiu<span class="token punctuation">.</span>make_old_cake<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：使用super() 可以自动查找父类。调用顺序遵循 <code>__mro__</code> 类属性的顺序。比较适合单继承使用。</p></blockquote><ul><li><p>私有权限</p><ol><li><p>定义私有属性和方法</p><p>在Python中，可以为实例属性和方法设置私有权限，即设置某个实例属性或实例方法不继承给子类。</p><blockquote><p>故事：daqiu把技术传承给徒弟的同时，不想把自己的钱(2000000个亿)继承给徒弟，这个时候就要为<code>钱</code>这个实例属性设置私有权限。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">,</span> Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[独创煎饼果子配方]'</span>        <span class="token comment"># 定义私有属性</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> <span class="token number">2000000</span>    <span class="token comment"># 定义私有方法</span>    <span class="token keyword">def</span> <span class="token function">__info_print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__money<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_master_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Master<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        Master<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_school_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        School<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        School<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment"># 徒孙类</span><span class="token keyword">class</span> <span class="token class-name">Tusun</span><span class="token punctuation">(</span>Prentice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 对象不能访问私有属性和私有方法</span><span class="token comment"># print(daqiu.__money)</span><span class="token comment"># daqiu.__info_print()</span>xiaoqiu <span class="token operator">=</span> Tusun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 子类无法继承父类的私有属性和私有方法</span><span class="token comment"># print(xiaoqiu.__money)  # 无法访问实例属性__money</span><span class="token comment"># xiaoqiu.__info_print()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在属性名和方法名 前面 加上两个下划线 __。</p></li><li><p>获取和修改私有属性值</p><p>在Python中，一般定义函数名<code>get_xx</code>用来获取私有属性，定义<code>set_xx</code>用来修改私有属性值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[古法煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[黑马煎饼果子配方]'</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Prentice</span><span class="token punctuation">(</span>School<span class="token punctuation">,</span> Master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kongfu <span class="token operator">=</span> <span class="token string">'[独创煎饼果子配方]'</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> <span class="token number">2000000</span>    <span class="token comment"># 获取私有属性</span>    <span class="token keyword">def</span> <span class="token function">get_money</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__money    <span class="token comment"># 修改私有属性</span>    <span class="token keyword">def</span> <span class="token function">set_money</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__money <span class="token operator">=</span> <span class="token number">500</span>    <span class="token keyword">def</span> <span class="token function">__info_print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__money<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'运用</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>kongfu<span class="token punctuation">}</span></span><span class="token string">制作煎饼果子'</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_master_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Master<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        Master<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_school_cake</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        School<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        School<span class="token punctuation">.</span>make_cake<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment"># 徒孙类</span><span class="token keyword">class</span> <span class="token class-name">Tusun</span><span class="token punctuation">(</span>Prentice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>daqiu <span class="token operator">=</span> Prentice<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoqiu <span class="token operator">=</span> Tusun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 调用get_money函数获取私有属性money的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">.</span>get_money<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 调用set_money函数修改私有属性money的值</span>xiaoqiu<span class="token punctuation">.</span>set_money<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoqiu<span class="token punctuation">.</span>get_money<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><p>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​    </p><p>​<br>​    </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyhton基础</title>
      <link href="2021/06/06/pyhton-ji-chu/"/>
      <url>2021/06/06/pyhton-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a><strong>Python</strong> 基础</h1><ul><li><p>注释</p><ol><li>单行： <code># 注释内容</code>，快捷键ctrl+/</li><li>多行：<code>""" 注释内容 """</code> 或 <code>''' 注释内容 '''</code></li></ol></li><li><p>变量</p><ol><li><p>定义变量的语法</p><p>​    变量名 = 值</p></li><li><p>标识符</p><ol><li>由数字、字母、下划线组成</li><li>不能数字开头</li><li>不能使用内置关键字</li><li>严格区分大小写</li></ol></li><li><p>输出</p><ol><li>格式化符号</li></ol></li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">|</span> 格式符号 <span class="token operator">|</span>           转换           <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">:</span> <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">:</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token operator">==</span><span class="token operator">%</span>s<span class="token operator">==</span>  <span class="token operator">|</span>       字符串<span class="token punctuation">(</span>常用<span class="token punctuation">)</span>       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token operator">==</span><span class="token operator">%</span>d<span class="token operator">==</span>  <span class="token operator">|</span> 有符号的十进制整数<span class="token punctuation">(</span>常用<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token operator">==</span><span class="token operator">%</span>f<span class="token operator">==</span>  <span class="token operator">|</span>       浮点数<span class="token punctuation">(</span>常用<span class="token punctuation">)</span>       <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>c    <span class="token operator">|</span>           字符           <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>u    <span class="token operator">|</span>     无符号十进制整数     <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>o    <span class="token operator">|</span>        八进制整数        <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>x    <span class="token operator">|</span>  十六进制整数（小写ox）  <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>X    <span class="token operator">|</span>  十六进制整数（大写OX）  <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>e    <span class="token operator">|</span>  科学计数法（小写<span class="token string">'e'</span>）   <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>E    <span class="token operator">|</span>  科学计数法（大写<span class="token string">'E'</span>）   <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>g    <span class="token operator">|</span>       <span class="token operator">%</span>f和<span class="token operator">%</span>e的简写       <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">%</span>G    <span class="token operator">|</span>       <span class="token operator">%</span>f和<span class="token operator">%</span>E的简写       <span class="token operator">|</span><span class="token operator">-</span> <span class="token operator">%</span><span class="token number">06d</span>，表示输出的整数显示位数，不足以<span class="token number">0</span>补全，超出当前位数则原样输出<span class="token operator">-</span> <span class="token operator">%</span><span class="token punctuation">.</span><span class="token number">2f</span>，表示小数点后显示的小数位数。<span class="token number">2</span><span class="token punctuation">.</span> f<span class="token operator">-</span>字符串   格式化字符串除了<span class="token operator">%</span>s，还可以写为`<span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>表达式<span class="token punctuation">}</span></span><span class="token string">'</span></span>`   ```python   age <span class="token operator">=</span> <span class="token number">18</span>    name <span class="token operator">=</span> <span class="token string">'TOM'</span>   weight <span class="token operator">=</span> <span class="token number">75.5</span>   student_id <span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment"># 我的名字是TOM</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>      <span class="token comment"># 我的学号是0001</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的学号是%4d'</span> <span class="token operator">%</span> student_id<span class="token punctuation">)</span>      <span class="token comment"># 我的体重是75.50公斤</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的体重是%.2f公斤'</span> <span class="token operator">%</span> weight<span class="token punctuation">)</span>      <span class="token comment"># 我的名字是TOM，今年18岁了</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，今年%d岁了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 我的名字是TOM，明年19岁了</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，明年%d岁了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 我的名字是TOM，明年19岁了</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'我的名字是</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, 明年</span><span class="token interpolation"><span class="token punctuation">{</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">岁了'</span></span><span class="token punctuation">)</span>   ```<span class="token operator">&gt;</span> f<span class="token operator">-</span>格式化字符串是Python3<span class="token punctuation">.</span><span class="token number">6</span>中新增的格式化方法，该方法更简单易读。<span class="token number">3</span><span class="token punctuation">.</span> 转义字符   <span class="token operator">-</span> `\n`：换行。   <span class="token operator">-</span> `\t`：制表符，一个tab键（<span class="token number">4</span>个空格）的距离。<span class="token number">4</span><span class="token punctuation">.</span> 结束符   ```python   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>   ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>转换数据类型函数</p><ul><li><p>int() 整形</p></li><li><p>float() 浮点型</p></li><li><p>str() 字符串</p></li><li><p>list() 列表</p></li><li><p>tuple() 元祖</p></li><li><p>eval()</p></li></ul><blockquote><p>查看数据类型用 type</p></blockquote><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">==int(x [,base ])==</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">==float(x )==</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">==str(x )==</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">==eval(str )==s</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">==tuple(s )==</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">==list(s )==</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table></li></ol><ul><li><p>运算符</p><ol><li><p>算数运算符    </p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td align="center">-</td><td align="center">减</td><td>1-1 输出结果为 0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td align="center">/</td><td align="center">除</td><td>10 / 2 输出结果为 5</td></tr><tr><td align="center">//</td><td align="center">整除</td><td>9 // 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td align="center">()</td><td align="center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></p></blockquote></li><li><p>赋值运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul><li>单个变量赋值</li><li>多个变量赋值</li><li>多变量赋相同值</li></ul></li><li><p>复合赋值运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td>//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td>%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table></li><li><p>比较运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table></li><li><p>逻辑运算符</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><p>拓展</p><p>数字之间的逻辑运算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>b <span class="token operator">=</span> <span class="token number">1</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">and</span> b<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token keyword">and</span> a<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">and</span> c<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">and</span> a<span class="token punctuation">)</span>  <span class="token comment"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token keyword">and</span> c<span class="token punctuation">)</span>  <span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token keyword">and</span> b<span class="token punctuation">)</span>  <span class="token comment"># 1</span><span class="token comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">or</span> b<span class="token punctuation">)</span>  <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">or</span> c<span class="token punctuation">)</span>  <span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token keyword">or</span> c<span class="token punctuation">)</span>  <span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>条件语句</p><ol><li><p>if 语法    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    条件成立执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>if…else…</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    条件成立执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    条件不成立执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多重判断</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码<span class="token keyword">elif</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>    条件<span class="token number">2</span>成立执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    以上条件都不成立执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>if嵌套</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码    <span class="token keyword">if</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        条件<span class="token number">2</span>成立执行的代码        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>三目运算符</p><p>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">值<span class="token number">1</span> <span class="token keyword">if</span> 条件 <span class="token keyword">else</span> 值<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>循环</p><ol><li>while语法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    条件成立重复执行的代码<span class="token number">1</span>    条件成立重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>while循环嵌套语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        条件<span class="token number">2</span>成立执行的代码        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>for循环语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码<span class="token number">1</span>    重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>break退出整个循环</li><li>continue退出本次循环，继续执行下一次重复执行的代码</li><li>else<ul><li>while和for都可以配合else使用</li><li>else下方缩进的代码含义：当循环正常结束后执行的代码</li><li>break终止循环不会执行else下方缩进的代码</li><li>continue退出循环的方式执行else下方缩进的代码</li></ul></li></ul></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li><p>概述：字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。即它是不可变类型</p></li><li><p>下标又称索引，用来快速定位对应的数据</p></li><li><p>切片：是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作，（序列[开始位置下标:结束位置下标:步长]）默认步长为1。</p></li><li><p>常用操作方法：</p><ul><li><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><ul><li><p>find</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>find<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回<span class="token operator">-</span><span class="token number">1</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Index</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>index<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>count</p><pre class="line-numbers language-none"><code class="language-none">字符串序列.count(子串, 开始位置下标, 结束位置下标)返回某个子串在字符串中出现的次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ul><li><p>replace  —&gt; 替换 (字符串序列.replace(旧子串, 新子串, 替换次数)</p></li><li><p>split —&gt; 按照指定字符分割字符串 (字符串序列.split(分割字符, num))</p></li><li><p>Join —&gt; 用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串 (字符或子串.join(多字符串组成的序列))</p></li><li><p>capitalize()</p><p>将字符串第一个字符转换成大写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment"># 结果：Hello world and itcast and itheima and python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p><p>title()：将字符串每个单词首字母转换成大写。</p></blockquote></li><li><p>判断</p><ul><li><p>startswith</p><pre class="line-numbers language-none"><code class="language-none">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>endswith</p><pre class="line-numbers language-none"><code class="language-none">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>isalpha</p></li><li><p>如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</p></li><li><p>isdigit</p><ul><li>如果字符串只包含数字则返回 True 否则返回 False</li></ul></li><li><p>isspace</p><ul><li>如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False</li></ul></li><li><p>isalnum</p><ul><li>如果字符串中只包含空白，则返回 True，否则返回 False</li></ul></li></ul></li><li><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><ul><li><p>format() —&gt; 格式化字符串</p></li><li><p>title() —&gt; 将字符串每个单词首字母转换成大写</p></li><li><p>lower() —&gt; 将字符串中大写转小写</p></li><li><p>strip() —&gt; 删除前后空格</p></li><li><p>upper() —&gt; 将字符串中小写转大写</p></li><li><p>lstrip() —&gt; 删除字符串左侧空白字符</p></li><li><p>rstrip() —&gt; 删除字符串右侧空白字符。</p></li><li><p>ljust():  返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">字符串序列<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>长度<span class="token punctuation">,</span> 填充字符<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p></li><li><p>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</p><pre class="line-numbers language-none"><code class="language-none">字符串序列.replace(旧子串, 新子串, 替换次数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote></li><li><p>[<a href="https://www.runoob.com/python/python-strings.html]">https://www.runoob.com/python/python-strings.html]</a>: </p></li></ul></li></ul></li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><p>概述: 列表可以一次性存储多个数据，且可以为不同数据类型, 即它是可变类型</p></li><li><p>常用操作</p><ul><li><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><ul><li><p>index</p><pre class="line-numbers language-none"><code class="language-none">列表序列.index(数据, 开始位置下标, 结束位置下标)返回指定数据所在位置的下标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>count —&gt; 统计指定数据在当前列表中出现的次数</p></li><li><p>Len —&gt; 访问列表长度，即列表中数据的个数</p></li><li><p>判断</p><ol><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</li><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</li></ol></li></ul></li><li><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><ul><li><p>append</p><pre class="line-numbers language-none"><code class="language-none">列表序列.append(数据)列表结尾追加数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'xiaohong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>extend()</p><p>列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</p><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ol><pre><code>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   2. 序列数据   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'xiaohong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming', 'xiaohong']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - insert()   指定位置新增数据。   <pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>位置下标<span class="token punctuation">,</span> 数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ul><li><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><ul><li><p>del</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> 目标<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><pre><code>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment"># 结果：报错提示：name 'name_list' is not defined</span><span class="token keyword">del</span> name_list<span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>   2. 删除指定数据   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 结果：['Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - pop()   删除指定下标的数据(默认为最后一个)，并返回该数据。   <pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>下标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>del_name <span class="token operator">=</span> name_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 结果：Lily</span><span class="token keyword">print</span><span class="token punctuation">(</span>del_name<span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - remove()   移除列表中某个数据的第一个匹配项。   <pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - clear()   清空列表   <pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span> <span class="token comment"># 结果： []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ul><li><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><ol><li><p>修改指定下标数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token comment"># 结果：['aaa', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>逆置：reverse()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结果：[8, 6, 3, 2, 5, 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排序：sort()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">列表序列<span class="token punctuation">.</span>sort<span class="token punctuation">(</span> key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结果：[1, 2, 3, 5, 6, 8]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>复制</p><p>copy()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_li2 <span class="token operator">=</span> name_list<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 结果：['Tom', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_li2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环遍历和列表嵌套</p><ol><li><p>while</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>for</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列表嵌套</p><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小绿'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol></li></ul><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><ol><li><p>元组特点：定义元组使用==小括号==，且==逗号==隔开各个数据，数据可以是不同的数据类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 多个数据元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># 单个数据元组</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型</p></blockquote></li><li><p>常见操作</p><p>元组数据不支持修改，只支持查找</p><p>查找</p><ol><li><p>按下标查找数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># aa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>index()</p><p>查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>count()</p><p>统计某个数据在当前元组出现的次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>len()</p><p>统计元组中数据的个数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：元组内的直接数据如果修改则立即报错</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span>tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>但是如果元组里面有列表，修改列表里面的数据则是支持的，故自觉很重要。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 访问到列表</span><span class="token comment"># 结果：(10, 20, ['aaaaa', 'bb', 'cc'], 50, 30)</span>tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaaaa'</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ol><li><p>字典特点：</p><p>字典的每个键值&nbsp;key=&gt;value&nbsp;对用冒号&nbsp;:&nbsp;分割，每个键值对之间用逗号&nbsp;,&nbsp;分割，整个字典包括在花括号&nbsp;{}&nbsp;中 </p><ul><li><p>符号为==大括号==</p></li><li><p>数据为==键值对==形式出现</p></li><li><p>各个键值对之间用==逗号==隔开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 有数据字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment"># 空字典</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dict3 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p></blockquote></li></ul></li><li><p>常见操作</p><ol><li><p>增</p><p>==字典序列[key] = 值==</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>dict1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Rose'</span><span class="token comment"># 结果：{'name': 'Rose', 'age': 20, 'gender': '男'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>dict1<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">110</span><span class="token comment"># {'name': 'Rose', 'age': 20, 'gender': '男', 'id': 110}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：字典为可变类型。</p></blockquote></li><li><p>删</p><ol><li><p>del() / del</p><p>删除字典或删除字典中指定键值对。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token comment"># 结果：{'name': 'Tom', 'age': 20}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>clear()</p><p>清空字典</p></li><li><p>pop() </p><p>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。 </p></li><li><p>popitem()  </p><p>返回并删除字典中的最后一对键和值 </p></li></ol></li><li><p>查</p><p>cmp() 比较两个字典元素 </p><p>如果两个字典的元素相同返回0，如果字典dict1大于字典dict2返回1，如果字典dict1小于字典dict2返回-1 </p><ol><li><p>key值查找</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote></li><li><p>get()</p><p>语法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">字典序列<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> 默认值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><p>快速体验</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 110</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>keys()</p><p>以列表返回一个字典所有的键 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># dict_keys(['name', 'age', 'gender'])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>values()</p><p>以列表返回字典中的所有值 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># dict_values(['Tom', 20, '男'])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>items()</p><p>以列表返回可遍历的(键, 值) 元组数组 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># dict_items([('name', 'Tom'), ('age', 20), ('gender', '男')])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><p>循环遍历</p><ol><li><p>遍历字典的key</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>遍历字典的value</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>遍历字典的元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> item <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>遍历字典的键值对</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ol><li><p>创建集合</p><p>创建集合使用<code>{}</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>{}</code>用来创建空字典。</p><p>特点：</p><ol><li>集合可以去掉重复数据；</li><li>集合数据是无序的，故不支持下标</li></ol></li><li><p>常见操作</p><ol><li><p>增</p><ol><li><p>add()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># {100, 10, 20}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote></li><li><p>update()</p><p>追加的数据是序列。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment"># s1.update(100)  # 报错</span>s1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>删</p><ol><li>remove()，删除集合中的指定数据，如果数据不存在则报错</li><li>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</li><li>pop()，随机删除集合中的某个数据，并返回这个数据。</li></ol></li><li><p>判断</p><ol><li>in：判断数据在集合序列</li><li>not in：判断数据不在集合序列</li></ol></li></ol></li></ol><h2 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h2><ol><li><p>运算符</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">支持的容器类型</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">合并</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">*</td><td align="center">复制</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">in</td><td align="center">元素是否存在</td><td align="center">字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td align="center">元素是否不存在</td><td align="center">字符串、列表、元组、字典</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串 </span>str1 <span class="token operator">=</span> <span class="token string">'aa'</span>str2 <span class="token operator">=</span> <span class="token string">'bb'</span>str3 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>  <span class="token comment"># aabb</span><span class="token comment"># 2. 列表 </span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>list3 <span class="token operator">=</span> list1 <span class="token operator">+</span> list2<span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 10, 20]</span><span class="token comment"># 3. 元组 </span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2<span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment"># (10, 20, 100, 200)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># ----------</span><span class="token comment"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># ['hello', 'hello', 'hello', 'hello']</span><span class="token comment"># 3. 元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># ('world', 'world', 'world', 'world')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">in</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment"># False</span><span class="token comment"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span>  <span class="token comment"># False</span><span class="token comment"># 3. 元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aa'</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>  <span class="token comment"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aa'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>  <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>公共方法</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 len()</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 7</span><span class="token comment"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span><span class="token comment"># 3. 元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span><span class="token comment"># 4. 集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span><span class="token comment"># 5. 字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">del</span> str1<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">del</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># [20, 30, 40]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># g</span><span class="token comment"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># a</span><span class="token comment"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1 2 3 4 5 6 7 8 9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment"># 1 3 5 7 9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment"># 0 1 2 3 4 5 6 7 8 9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：range()生成的序列不包含end数字。</p></blockquote></li><li><p>容器类型转换</p><ol><li><p>tuple()</p><p>将某个序列转换成元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>list()</p><p>将某个序列转换成列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>set()</p><p>将某个序列转换成集合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>​    1.集合可以快速完成列表去重</p><p>​    2.集合不支持下标</p></blockquote></li></ol></li></ol><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><pre class="line-numbers language-none"><code class="language-none">列表推倒式: [结果 for 变量 in 可迭代对象 if 条件筛选]生成器表达式: (结果 for 变量 in 可迭代对象 if 条件筛选), 没有元组推倒式字典推倒式: {结果(k:v) for 变量 in 可迭代对象 if 条件筛选}集合推倒式: {结果(k) for 变量 in 可迭代对象 if 条件筛选} 自带去重功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题</title>
      <link href="2021/06/05/hexo-zhu-ti/"/>
      <url>2021/06/05/hexo-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-none"><code class="language-none">title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span> <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment"># 列表最大高度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
